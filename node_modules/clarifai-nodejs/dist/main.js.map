{"mappings":"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","sources":["src/index.ts","src/client/user.ts","src/client/lister.ts","src/client/base.ts","src/client/auth/helper.ts","src/utils/misc.ts","src/errors.ts","package.json","src/client/auth/stub.ts","src/utils/fromPartialProtobufObject.ts","src/client/app.ts","src/urls/helper.ts","src/constants/model.ts","src/workflows/validate.ts","src/workflows/utils.ts","src/client/model.ts","src/utils/modelTrain.ts","src/client/input.ts","src/constants/dataset.ts","src/client/search.ts","src/constants/search.ts","src/schema/search.ts","src/client/workflow.ts","src/constants/workflow.ts","src/workflows/export.ts","src/client/dataset.ts","src/client/rag.ts","src/constants/rag.ts","src/rag/utils.ts"],"sourcesContent":["export * from \"./client/user\";\nexport * from \"./client/app\";\nexport * from \"./client/input\";\nexport * from \"./client/model\";\nexport * from \"./client/search\";\nexport * from \"./client/workflow\";\nexport * from \"./client/dataset\";\nexport * from \"./client/rag\";\n","import { Lister } from \"./lister\";\nimport { AuthConfig, PaginationRequestParams } from \"../utils/types\";\nimport {\n  DeleteAppRequest,\n  DeleteRunnersRequest,\n  GetAppRequest,\n  GetRunnerRequest,\n  ListAppsRequest,\n  ListRunnersRequest,\n  MultiAppResponse,\n  MultiRunnerResponse,\n  PostAppsRequest,\n  PostRunnersRequest,\n  SingleAppResponse,\n  SingleRunnerResponse,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/service_pb\";\nimport { promisifyGrpcCall } from \"../utils/misc\";\nimport {\n  App,\n  Runner,\n  UserAppIDSet,\n  Workflow,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/resources_pb\";\nimport { StatusCode } from \"clarifai-nodejs-grpc/proto/clarifai/api/status/status_code_pb\";\nimport { fromPartialProtobufObject } from \"../utils/fromPartialProtobufObject\";\n\nexport type UserConfig = AuthConfig;\nexport type ListAppsRequestParams =\n  PaginationRequestParams<ListAppsRequest.AsObject>;\nexport type ListRunnersRequestParams =\n  PaginationRequestParams<ListRunnersRequest.AsObject>;\n\n/**\n * User is a class that provides access to Clarifai API endpoints related to user information.\n * @noInheritDoc\n */\nexport class User extends Lister {\n  /**\n   * Initializes an User object with the specified authentication configuration.\n   *\n   * @param authConfig An object containing the authentication configuration. Defaults to an empty object.\n   * @param authConfig.userId The user ID for the user to interact with.\n   * @param authConfig.appId The application ID associated with the user.\n   * @param authConfig.pat A personal access token for authentication. Can also be set as an environment variable CLARIFAI_PAT.\n   * @param authConfig.token A session token for authentication. Accepts either a session token or a personal access token (pat). Can also be set as an environment variable CLARIFAI_SESSION_TOKEN.\n   * @param authConfig.base Optional. The base API URL. Defaults to \"https://api.clarifai.com\".\n   * @param authConfig.ui Optional. Additional UI configurations.\n   *\n   * @includeExample examples/user/index.ts\n   */\n  constructor(authConfig: UserConfig = {}) {\n    super({ authConfig });\n  }\n\n  /**\n   * Lists all the apps for the user.\n   *\n   * @param params A dictionary of filters to be applied to the list of apps.\n   * @param pageNo The page number to list.\n   * @param perPage The number of items per page.\n   * @yields App objects for the user.\n   *\n   * @includeExample examples/user/listApps.ts\n   *\n   * @note Defaults to 16 per page if pageNo is specified and perPage is not specified.\n   * If both pageNo and perPage are None, then lists all the resources.\n   */\n  async *listApps({\n    params = {},\n    pageNo,\n    perPage,\n  }: {\n    params?: ListAppsRequestParams;\n    pageNo?: number;\n    perPage?: number;\n  } = {}): AsyncGenerator<\n    MultiAppResponse.AsObject[\"appsList\"],\n    void,\n    unknown\n  > {\n    const listApps = promisifyGrpcCall(\n      this.STUB.client.listApps,\n      this.STUB.client,\n    );\n    const request = fromPartialProtobufObject(ListAppsRequest, params);\n\n    for await (const item of this.listPagesGenerator(\n      listApps,\n      request,\n      pageNo,\n      perPage,\n    )) {\n      yield item.toObject()?.appsList;\n    }\n  }\n\n  /**\n   * Lists all the runners for the user.\n   *\n   * @param params A dictionary of filters to be applied to the list of runners.\n   * @param pageNo The page number to list.\n   * @param perPage The number of items per page.\n   * @yields Runner objects for the user.\n   *\n   * @includeExample examples/user/listRunners.ts\n   *\n   * @note Defaults to 16 per page if perPage is not specified.\n   */\n  async *listRunners({\n    params = {},\n    pageNo,\n    perPage,\n  }: {\n    params?: ListRunnersRequestParams;\n    pageNo?: number;\n    perPage?: number;\n  } = {}): AsyncGenerator<MultiRunnerResponse.AsObject, void, unknown> {\n    const listRunners = promisifyGrpcCall(\n      this.STUB.client.listRunners,\n      this.STUB.client,\n    );\n    const request = fromPartialProtobufObject(ListRunnersRequest, params);\n\n    for await (const item of this.listPagesGenerator(\n      listRunners,\n      request,\n      pageNo,\n      perPage,\n    )) {\n      yield item.toObject();\n    }\n  }\n\n  /**\n   * Creates an app for the user.\n   *\n   * @param appId The app ID for the app to create.\n   * @param baseWorkflow The base workflow to use for the app. Examples: 'Universal', 'Language-Understanding', 'General'\n   * @returns An App object for the specified app ID.\n   *\n   * @includeExample examples/user/createApp.ts\n   */\n  async createApp({\n    appId,\n    baseWorkflow = \"Empty\",\n  }: {\n    appId: string;\n    baseWorkflow?: string;\n  }): Promise<App.AsObject> {\n    const workflow = new Workflow();\n    workflow.setId(baseWorkflow);\n    workflow.setAppId(\"main\");\n    workflow.setUserId(\"clarifai\");\n\n    const app = new App();\n    app.setId(appId);\n    app.setDefaultWorkflow(workflow);\n\n    const request = new PostAppsRequest();\n    request.setUserAppId(this.userAppId);\n    request.setAppsList([app]);\n\n    const postApps = promisifyGrpcCall(\n      this.STUB.client.postApps,\n      this.STUB.client,\n    );\n\n    const response = await this.grpcRequest(postApps, request);\n\n    const responseObject = response.toObject();\n\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(\n        `Failed to create app: ${responseObject.status?.description}`,\n      );\n    }\n\n    return responseObject.appsList?.[0];\n  }\n\n  /**\n   * Creates a runner for the user.\n   *\n   * @param runnerId The Id of runner to create.\n   * @param labels Labels to match runner.\n   * @param description Description of Runner.\n   * @returns A runner object for the specified Runner ID.\n   *\n   * @includeExample examples/user/createRunner.ts\n   */\n  async createRunner({\n    runnerId,\n    labels,\n    description,\n  }: {\n    runnerId: string;\n    labels: string[];\n    description: string;\n  }): Promise<MultiRunnerResponse.AsObject[\"runnersList\"][0]> {\n    if (!Array.isArray(labels)) {\n      throw new Error(\"Labels must be an array of strings\");\n    }\n\n    const request = new PostRunnersRequest();\n    request.setUserAppId(this.userAppId);\n    const runner = new Runner();\n    runner.setId(runnerId);\n    runner.setLabelsList(labels);\n    runner.setDescription(description);\n    request.setRunnersList([runner]);\n\n    const postRunners = promisifyGrpcCall(\n      this.STUB.client.postRunners,\n      this.STUB.client,\n    );\n    const response = await this.grpcRequest(postRunners, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(\n        `Failed to create runner: ${responseObject.status?.description}`,\n      );\n    }\n    console.info(\"\\nRunner created\\n%s\", responseObject.status.description);\n\n    return responseObject.runnersList?.[0];\n  }\n\n  /**\n   * Returns an App object for the specified app ID.\n   *\n   * @param appId The app ID for the app to interact with.\n   * @returns An App object for the specified app ID.\n   *\n   * @includeExample examples/user/app.ts\n   */\n  async app({\n    appId,\n  }: {\n    appId: string;\n  }): Promise<SingleAppResponse.AsObject[\"app\"]> {\n    const request = new GetAppRequest();\n    const appIdSet = new UserAppIDSet();\n    appIdSet.setUserId(this.userAppId.getUserId());\n    appIdSet.setAppId(appId);\n    request.setUserAppId(appIdSet);\n    const getApp = promisifyGrpcCall(this.STUB.client.getApp, this.STUB.client);\n    const response = await this.grpcRequest(getApp, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(\n        `Failed to retrieve app: ${responseObject.status?.description}`,\n      );\n    }\n    return responseObject[\"app\"];\n  }\n\n  /**\n   * Returns a Runner object if exists.\n   *\n   * @param runnerId The runner ID to interact with.\n   * @returns A Runner object for the existing runner ID.\n   *\n   * @includeExample examples/user/runner.ts\n   */\n  async runner({\n    runnerId,\n  }: {\n    runnerId: string;\n  }): Promise<SingleRunnerResponse.AsObject[\"runner\"]> {\n    const request = new GetRunnerRequest();\n    request.setUserAppId(this.userAppId);\n    request.setRunnerId(runnerId);\n    const getRunner = promisifyGrpcCall(\n      this.STUB.client.getRunner,\n      this.STUB.client,\n    );\n    const response = await this.grpcRequest(getRunner, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(\n        `Failed to retrieve runner: ${responseObject.status?.description}`,\n      );\n    }\n    return responseObject.runner;\n  }\n\n  /**\n   * Deletes an app for the user.\n   *\n   * @param appId The app ID for the app to delete.\n   *\n   * @example examples/user/deleteApp.ts\n   */\n  async deleteApp({ appId }: { appId: string }): Promise<void> {\n    const request = new DeleteAppRequest();\n    const appIdSet = new UserAppIDSet();\n    appIdSet.setUserId(this.userAppId.getUserId());\n    appIdSet.setAppId(appId);\n    request.setUserAppId(appIdSet);\n    const deleteApp = promisifyGrpcCall(\n      this.STUB.client.deleteApp,\n      this.STUB.client,\n    );\n    const response = await this.grpcRequest(deleteApp, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n    console.info(\"\\nApp Deleted\\n%s\", responseObject.status.description);\n  }\n\n  /**\n   * Deletes a runner for the user.\n   *\n   * @param runnerId The runner ID to delete.\n   *\n   * @includeExample examples/user/deleteRunner.ts\n   */\n  async deleteRunner({ runnerId }: { runnerId: string }): Promise<void> {\n    const request = new DeleteRunnersRequest();\n    request.setUserAppId(this.userAppId);\n    request.setIdsList([runnerId]);\n    const deleteRunners = promisifyGrpcCall(\n      this.STUB.client.deleteRunners,\n      this.STUB.client,\n    );\n    const response = await this.grpcRequest(deleteRunners, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n    console.info(\"\\nRunner Deleted\\n%s\", responseObject.status.description);\n  }\n}\n","import { grpc } from \"clarifai-nodejs-grpc\";\nimport * as jspb from \"google-protobuf\";\nimport { AuthConfig } from \"../utils/types\";\nimport { BaseClient } from \"./base\";\nimport { StatusCode } from \"clarifai-nodejs-grpc/proto/clarifai/api/status/status_code_pb\";\nimport { Status } from \"clarifai-nodejs-grpc/proto/clarifai/api/status/status_pb\";\n\nexport class Lister extends BaseClient {\n  defaultPageSize: number;\n\n  constructor({\n    authConfig = {},\n    pageSize = 16,\n  }: {\n    authConfig?: AuthConfig;\n    pageSize?: number;\n  }) {\n    super(authConfig);\n    this.defaultPageSize = pageSize;\n  }\n\n  async *listPagesGenerator<\n    TRequest extends jspb.Message,\n    TResponseObject extends { status?: Status.AsObject },\n    TResponse extends {\n      toObject: (arg?: boolean) => TResponseObject;\n    },\n  >(\n    endpoint: (\n      request: TRequest,\n      metadata: grpc.Metadata,\n      options: Partial<grpc.CallOptions>,\n    ) => Promise<TResponse>,\n    requestData: TRequest,\n    pageNo: number = 1,\n    perPage: number = this.defaultPageSize,\n  ): AsyncGenerator<TResponse, void, unknown> {\n    let page = pageNo;\n\n    while (true) {\n      // Prepare request data\n      // @ts-expect-error - TS doesn't know that the method exists\n      requestData.setPage(page);\n      if (perPage) {\n        // @ts-expect-error - TS doesn't know that the method exists\n        requestData.setPerPage(perPage);\n      }\n\n      // Perform gRPC request\n      const response = await this.grpcRequest(endpoint, requestData);\n      const responseObject = response.toObject();\n\n      // Check response status\n      if (responseObject.status?.code !== StatusCode.SUCCESS) {\n        throw new Error(`Listing failed with response ${response}`);\n      }\n\n      const dataListEntries = Object.entries(responseObject).find(\n        ([key, value]) => key !== \"status\" && Array.isArray(value),\n      );\n\n      if (!dataListEntries) {\n        break; // If no data list is found, stop pagination\n      }\n\n      const [, dataList] = dataListEntries;\n\n      // If the length of the data list is less than perPage, it means we've reached the end\n      // @ts-expect-error - TS doesn't know that data format is array\n      if (dataList.length === 0) {\n        break;\n      }\n\n      yield response;\n\n      // If the length of the data list is less than perPage, it means we've reached the end\n      // @ts-expect-error - TS doesn't know that data format is array\n      if (dataList.length < perPage) {\n        break;\n      }\n\n      page += 1;\n    }\n  }\n\n  async listPagesData<\n    TRequest extends jspb.Message,\n    TResponseObject extends { status?: Status.AsObject },\n    TResponse extends {\n      toObject: (arg?: boolean) => TResponseObject;\n    },\n  >(\n    endpoint: (\n      request: TRequest,\n      metadata: grpc.Metadata,\n      options: Partial<grpc.CallOptions>,\n    ) => Promise<TResponse>,\n    requestData: TRequest,\n    pageNo: number = 1,\n    perPage: number = this.defaultPageSize,\n  ): Promise<TResponse> {\n    // Prepare request data\n    // @ts-expect-error - TS doesn't know that the method exists\n    requestData.setPage(pageNo);\n    if (perPage) {\n      // @ts-expect-error - TS doesn't know that the method exists\n      requestData.setPerPage(perPage);\n    }\n\n    // Perform gRPC request\n    const response = await this.grpcRequest(endpoint, requestData);\n    const responseObject = response.toObject();\n\n    // Check response status\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(`Listing failed with response ${response}`);\n    }\n\n    return response;\n  }\n}\n","import { UserAppIDSet } from \"clarifai-nodejs-grpc/proto/clarifai/api/resources_pb\";\nimport { ClarifaiAuthHelper } from \"./auth/helper\";\nimport { getFromDictOrEnv } from \"../utils/misc\";\nimport { createStub } from \"./auth/stub\";\nimport { V2Stub } from \"./auth/register\";\nimport { Timestamp } from \"google-protobuf/google/protobuf/timestamp_pb\";\nimport { AuthConfig } from \"../utils/types\";\nimport * as jspb from \"google-protobuf\";\nimport { grpc } from \"clarifai-nodejs-grpc\";\nimport { Status } from \"clarifai-nodejs-grpc/proto/clarifai/api/status/status_pb\";\n\n/**\n * BaseClient is the base class for all the classes interacting with Clarifai endpoints.\n * It initializes with various configuration options to set up the authentication helper,\n * gRPC stub, and other necessary properties for interacting with the Clarifai API.\n *\n * @property {ClarifaiAuthHelper} authHelper An instance of ClarifaiAuthHelper for authentication.\n * @property {V2Stub} STUB The gRPC Stub object for API interaction.\n * @property {[string, string][]} metadata The gRPC metadata containing the personal access token.\n * @property {string} pat The personal access token.\n * @property {UserAppIDSet} userAppId The protobuf object representing user and app IDs.\n * @property {string} base The base URL for the API endpoint.\n */\nexport class BaseClient {\n  protected authHelper: ClarifaiAuthHelper;\n  protected STUB: V2Stub;\n  protected metadata: [string, string][];\n  protected pat: string;\n  protected userAppId: UserAppIDSet;\n  protected base: string;\n  protected rootCertificatesPath: string;\n\n  /**\n   * Constructs a new BaseClient instance with specified configuration options.\n   *\n   * @param {Object} authConfig Configuration options for the client.\n   * @param {string} authConfig.userId A user ID for authentication.\n   * @param {string} authConfig.appId An app ID for the application to interact with.\n   * @param {string} authConfig.pat A personal access token for authentication. If not provided, it attempts to fetch from environment variables.\n   * @param {string} [authConfig.token] An optional token for authentication.\n   * @param {string} [authConfig.base='https://api.clarifai.com'] The base URL for the API endpoint. Defaults to 'https://api.clarifai.com'.\n   * @param {string} [authConfig.ui='https://clarifai.com'] The URL for the UI. Defaults to 'https://clarifai.com'.\n   * @param {string} [authConfig.rootCertificatesPath] Path to the SSL root certificates file, used to establish secure gRPC connections.\n   */\n  constructor(authConfig: AuthConfig = {}) {\n    const pat = getFromDictOrEnv(\"pat\", \"CLARIFAI_PAT\", authConfig);\n    authConfig.pat = pat;\n    this.authHelper =\n      Object.keys(authConfig).length > 0\n        ? new ClarifaiAuthHelper(\n            authConfig.userId,\n            authConfig.appId,\n            authConfig.pat,\n            authConfig.token,\n            authConfig.base,\n            authConfig.ui,\n            authConfig.rootCertificatesPath,\n            false,\n          )\n        : ClarifaiAuthHelper.fromEnv(false); // The validate parameter is set to false explicitly\n    this.STUB = createStub(this.authHelper);\n    this.metadata = this.authHelper.metadata;\n    this.pat = this.authHelper.pat;\n    this.userAppId = this.authHelper.getUserAppIdProto();\n    this.base = this.authHelper.base;\n    this.rootCertificatesPath = this.authHelper.rootCertificatesPath;\n  }\n\n  /**\n   * Makes a gRPC request to the API.\n   *\n   * @param method The gRPC method to call.\n   * @param argument The argument to pass to the gRPC method.\n   * @returns A Promise resolving to the result of the gRPC method call.\n   */\n  protected async grpcRequest<\n    TRequest extends jspb.Message,\n    TResponseObject extends { status?: Status.AsObject },\n    TResponse extends {\n      toObject: (arg?: boolean) => TResponseObject;\n    },\n  >(\n    endpoint: (\n      request: TRequest,\n      metadata: grpc.Metadata,\n      options: Partial<grpc.CallOptions>,\n    ) => Promise<TResponse>,\n    requestData: TRequest,\n  ): Promise<TResponse> {\n    return await this.STUB.makeCallPromise(endpoint, requestData);\n  }\n\n  /**\n   * Converts a string to a Timestamp object.\n   *\n   * @param dateStr The string to convert.\n   * @returns A Timestamp object representing the given date string.\n   */\n  convertStringToTimestamp(dateStr: string): Timestamp {\n    const timestamp = new Timestamp();\n\n    // Attempt to parse the date string into a Date object\n    const datetimeObj = new Date(dateStr);\n\n    // Check if the date is valid\n    if (isNaN(datetimeObj.getTime())) {\n      throw new Error(\"Invalid date string\");\n    }\n\n    // Convert the Date object to a Timestamp\n    timestamp.fromDate(datetimeObj);\n\n    return timestamp;\n  }\n}\n","import resources_pb2 from \"clarifai-nodejs-grpc/proto/clarifai/api/resources_pb\";\nimport { grpc } from \"clarifai-nodejs-grpc\";\nimport { V2Client } from \"clarifai-nodejs-grpc/proto/clarifai/api/service_grpc_pb\";\nimport process from \"process\";\nimport fs from \"fs\";\n\n// TypeScript interface for the cache\nexport interface Cache {\n  [key: string]: boolean;\n}\n\nconst DEFAULT_BASE = \"https://api.clarifai.com\";\nconst DEFAULT_UI = \"https://clarifai.com\";\n\nconst validResourceTypes = [\n  \"modules\",\n  \"models\",\n  \"concepts\",\n  \"inputs\",\n  \"workflows\",\n  \"tasks\",\n  \"installed_module_versions\",\n] as const;\n\n// Map from base domain to True / False for whether the base has https or http.\nconst baseHttpsCache: Cache = {};\nconst uiHttpsCache: Cache = {};\n\nfunction getHostnameFromUrl(url: string): string {\n  // Remove protocol (http, https) if present\n  let hostname = url.indexOf(\"//\") > -1 ? url.split(\"/\")[2] : url.split(\"/\")[0];\n\n  // Remove port number if present\n  hostname = hostname.split(\":\")[0];\n\n  // Remove path if present\n  hostname = hostname.split(\"?\")[0];\n\n  return hostname;\n}\n\nexport function clearCache(): void {\n  Object.keys(baseHttpsCache).forEach((key) => delete baseHttpsCache[key]);\n  Object.keys(uiHttpsCache).forEach((key) => delete uiHttpsCache[key]);\n}\n\nexport function httpsCache(cache: Cache, url: string): string {\n  const HTTPS = true;\n  const HTTP = false;\n\n  if (url.startsWith(\"https://\")) {\n    url = url.replace(\"https://\", \"\");\n    cache[url] = HTTPS;\n  } else if (url.startsWith(\"http://\")) {\n    url = url.replace(\"http://\", \"\");\n    cache[url] = HTTP;\n  } else if (!(url in cache)) {\n    // Assuming HTTPS for any URLs without a scheme that end with .clarifai.com\n    const hostname = getHostnameFromUrl(url);\n    if (hostname && hostname.endsWith(\".clarifai.com\")) {\n      cache[url] = HTTPS;\n    } else {\n      // For URLs without a scheme and not ending with .clarifai.com, prompt user to provide the scheme\n      throw new Error(\n        `Please provide a valid scheme for the ${url}, either use http:// or https://`,\n      );\n    }\n  }\n  return url;\n}\n\nexport class ClarifaiAuthHelper {\n  private userId: string;\n  private appId: string;\n  private _pat: string;\n  private token: string;\n  private _base: string;\n  private _ui: string;\n  private _rootCertificatesPath: string;\n\n  /**\n   * A helper to get the authorization information needed to make API calls with the grpc\n   * client to a specific app using a personal access token.\n   *\n   * There are class methods to make this object easily from either query_params provided by streamlit or from env vars.\n   *\n   * Note: only one of personal access token (pat) or a session token (token) can be provided.\n   * Always use PATs in your code and never session tokens, those are only provided internal UI code.\n   *\n   * @param user_id - A user id who owns the resource you want to make calls to.\n   * @param app_id - An app id for the application that owns the resource you want to interact with.\n   * @param pat - A personal access token.\n   * @param token - A session token (internal use only, always use a PAT).\n   * @param base - A url to the API endpoint to hit. Examples include api.clarifai.com,\n   *               https://api.clarifai.com (default), https://host:port, http://host:port,\n   *               host:port (will be treated as http, not https). It's highly recommended to include\n   *               the http:// or https:// otherwise we need to check the endpoint to determine if it has SSL during this __init__.\n   * @param ui - A url to the UI. Examples include clarifai.com,\n   *             https://clarifai.com (default), https://host:port, http://host:port,\n   *             host:port (will be treated as http, not https). It's highly recommended to include\n   *             the http:// or https:// otherwise we need to check the endpoint to determine if it has SSL during this __init__.\n   * @param rootCertificatesPath - path to the root certificates file. This is only used for grpc secure channels.\n   * @param validate - Whether to validate the inputs. This is useful for overriding vars then validating.\n   */\n  constructor(\n    userId: string,\n    appId: string,\n    pat: string,\n    token: string = \"\",\n    base: string = DEFAULT_BASE,\n    ui: string = DEFAULT_UI,\n    rootCertificatesPath: string = \"\",\n    validate: boolean = true,\n  ) {\n    this.userId = userId;\n    this.appId = appId;\n    this._pat = pat;\n    this.token = token;\n    this._rootCertificatesPath = rootCertificatesPath;\n    this._base = base;\n    this._ui = ui;\n\n    this.setBase(base);\n    this.setUi(ui);\n\n    if (validate) {\n      this.validate();\n    }\n  }\n\n  private validate(): void {\n    if (this.userId === \"\") {\n      throw new Error(\n        \"Need 'user_id' to not be empty in the query params or use CLARIFAI_USER_ID env var\",\n      );\n    }\n    if (this.appId === \"\") {\n      throw new Error(\n        \"Need 'app_id' to not be empty in the query params or use CLARIFAI_APP_ID env var\",\n      );\n    }\n    if (this._pat !== \"\" && this.token !== \"\") {\n      throw new Error(\n        \"A personal access token OR a session token need to be provided, but you cannot provide both.\",\n      );\n    } else if (this._pat === \"\" && this.token === \"\") {\n      throw new Error(\n        \"Need 'pat' or 'token' in the query params or use one of the CLARIFAI_PAT or CLARIFAI_SESSION_TOKEN env vars\",\n      );\n    } else if (\n      this._rootCertificatesPath &&\n      !fs.existsSync(this._rootCertificatesPath)\n    ) {\n      throw new Error(\n        `Root certificates path ${this._rootCertificatesPath} does not exist`,\n      );\n    }\n  }\n\n  /**\n   * Will look for the following env vars:\n   * user_id: CLARIFAI_USER_ID env var.\n   * app_id: CLARIFAI_APP_ID env var.\n   * one of:\n   *   token: CLARIFAI_SESSION_TOKEN env var.\n   *   pat: CLARIFAI_PAT env var.\n   * base: CLARIFAI_API_BASE env var.\n   *\n   * @param validate - Whether to validate the inputs. This is useful for overriding vars then validating.\n   */\n  static fromEnv(validate: boolean = true): ClarifaiAuthHelper {\n    const userId = process.env.CLARIFAI_USER_ID || \"\";\n    const appId = process.env.CLARIFAI_APP_ID || \"\";\n    const token = process.env.CLARIFAI_SESSION_TOKEN || \"\";\n    const pat = process.env.CLARIFAI_PAT || \"\";\n    const base = process.env.CLARIFAI_API_BASE || DEFAULT_BASE;\n    const ui = process.env.CLARIFAI_UI || DEFAULT_UI;\n    const rootCertificatesPath =\n      process.env.CLARIFAI_ROOT_CERTIFICATES_PATH || \"\";\n\n    return new ClarifaiAuthHelper(\n      userId,\n      appId,\n      pat,\n      token,\n      base,\n      ui,\n      rootCertificatesPath,\n      validate,\n    );\n  }\n\n  /**\n   * Get the gRPC metadata that contains either the session token or the PAT to use.\n   *\n   * @param userId - Optional user ID to override the default.\n   * @param appId - Optional app ID to override the default.\n   * @returns The metadata needed to send with all gRPC API calls in the API client.\n   */\n  getUserAppIdProto(\n    userId?: string,\n    appId?: string,\n  ): resources_pb2.UserAppIDSet {\n    const effectiveUserId = userId ?? this.userId;\n    const effectiveAppId = appId ?? this.appId;\n    const userAppIdSet = new resources_pb2.UserAppIDSet();\n    userAppIdSet.setUserId(effectiveUserId);\n    userAppIdSet.setAppId(effectiveAppId);\n    return userAppIdSet;\n  }\n\n  /**\n   * Get the gRPC metadata that contains either the session token or the PAT to use.\n   *\n   * @returns The metadata needed to send with all gRPC API calls in the API client.\n   */\n  get metadata(): [string, string][] {\n    if (this._pat !== \"\") {\n      return [[\"authorization\", `Key ${this._pat}`]];\n    } else if (this.token !== \"\") {\n      return [[\"x-clarifai-session-token\", this.token]];\n    } else {\n      throw new Error(\n        \"'token' or 'pat' needed to be provided in the query params or env vars.\",\n      );\n    }\n  }\n\n  /**\n   * Get the API gRPC stub using the right channel based on the API endpoint base.\n   * TODO: This method is currently not implemented due to the lack of a gRPC V2Stub in clarifai-node.js.\n   *\n   * @returns V2Client - The gRPC client to use to make API calls.\n   */\n  getStub(): V2Client {\n    if (!(this._base in baseHttpsCache)) {\n      throw new Error(`Cannot determine if base ${this._base} is https`);\n    }\n\n    const https = baseHttpsCache[this._base];\n\n    let client: V2Client;\n\n    if (https) {\n      if (this._rootCertificatesPath) {\n        client = new V2Client(\n          this._base,\n          grpc.ChannelCredentials.createSsl(\n            fs.readFileSync(this._rootCertificatesPath),\n          ),\n        );\n      } else {\n        client = new V2Client(this._base, grpc.ChannelCredentials.createSsl());\n      }\n    } else {\n      let host: string;\n      let port: number = 80;\n      if (this._base.includes(\":\")) {\n        [host, port] = this._base\n          .split(\":\")\n          .map((item, index) => (index === 1 ? parseInt(item) : item)) as [\n          string,\n          number,\n        ];\n      } else {\n        host = this._base;\n      }\n      client = new V2Client(\n        `${host}:${port}`,\n        grpc.ChannelCredentials.createInsecure(),\n      );\n    }\n\n    return client;\n  }\n\n  /**\n   * Return the domain for the UI.\n   */\n  get ui(): string {\n    if (!(this._ui in uiHttpsCache)) {\n      throw new Error(`Cannot determine if ui ${this._ui} is https`);\n    }\n\n    const https = uiHttpsCache[this._ui];\n    if (https) {\n      return this._ui.startsWith(\"https://\") ? this._ui : `https://${this._ui}`;\n    } else {\n      return this._ui.startsWith(\"http://\") ? this._ui : `http://${this._ui}`;\n    }\n  }\n\n  /**\n   * set the base domain for the API.\n   * @param base - The base domain to set.\n   */\n  setBase(base: string): void {\n    this._base = httpsCache(baseHttpsCache, base);\n  }\n\n  /**\n   * set the domain for the UI.\n   * @param ui - The UI domain to set.\n   */\n  setUi(ui: string): void {\n    this._ui = httpsCache(uiHttpsCache, ui);\n  }\n\n  /**\n   * Return the root certificates path.\n   */\n  get rootCertificatesPath(): string {\n    return this._rootCertificatesPath;\n  }\n\n  /**\n   * Return the base domain for the API.\n   */\n  get base(): string {\n    if (!(this._base in baseHttpsCache)) {\n      throw new Error(`Cannot determine if base ${this._base} is https`);\n    }\n\n    const https = baseHttpsCache[this._base];\n    if (https) {\n      return this._base.startsWith(\"https://\")\n        ? this._base\n        : `https://${this._base}`;\n    } else {\n      return this._base.startsWith(\"http://\")\n        ? this._base\n        : `http://${this._base}`;\n    }\n  }\n\n  /**\n   * Return the personal access token.\n   */\n  get pat(): string {\n    return this._pat;\n  }\n\n  /**\n   * Returns a string representation of the class.\n   */\n  toString(): string {\n    return `ClarifaiAuthHelper:\\n- base: ${this._base}\\n- user_id: ${this.userId}\\n- app_id: ${this.appId}`;\n  }\n\n  /**\n   * Return the list of the required environment variables.\n   */\n  static requiredEnvVars(): string[] {\n    return [\"CLARIFAI_USER_ID\", \"CLARIFAI_APP_ID\", \"CLARIFAI_PAT\"];\n  }\n\n  /**\n   * Validate the secrets.toml file has been filled with non-empty values for all the auth parameters that are present.\n   *\n   * @param tomlDict - The dictionary obtained from the secrets.toml file.\n   */\n  static validateSecretsDict(tomlDict: Record<string, unknown>): boolean {\n    const authKeys = ClarifaiAuthHelper.requiredEnvVars();\n\n    for (const [key, value] of Object.entries(tomlDict)) {\n      if (authKeys.includes(key) && value === \"\") {\n        throw new Error(`'${key}' in secrets.toml cannot be empty`);\n      }\n    }\n    // Assuming all non-present keys have non-empty values.\n    return true;\n  }\n\n  clarifaiUrl({\n    resourceType,\n    resourceId,\n    versionId,\n  }: {\n    resourceType: (typeof validResourceTypes)[number];\n    resourceId: string;\n    versionId?: string;\n  }): string {\n    if (!validResourceTypes.includes(resourceType)) {\n      throw new Error(\n        `resourceType must be one of ${validResourceTypes.join(\", \")} but was ${resourceType}`,\n      );\n    }\n    if (!versionId) {\n      return `${this.base}/${this.userId}/${this.appId}/${resourceType}/${resourceId}`;\n    }\n    return `${this.base}/${this.userId}/${this.appId}/${resourceType}/${resourceId}/versions/${versionId}`;\n  }\n}\n","import { V2Client } from \"clarifai-nodejs-grpc/proto/clarifai/api/service_grpc_pb\";\nimport { UserError } from \"../errors\";\nimport { GrpcWithCallback, AuthConfig } from \"./types\";\nimport { grpc } from \"clarifai-nodejs-grpc\";\n\n/**\n * Get a value from a dictionary or an environment variable.\n */\nexport function getFromDictOrEnv(\n  key: string,\n  envKey: string,\n  data: { [key: string]: string },\n): string {\n  if (data?.[key]) {\n    return data[key];\n  } else {\n    return getFromEnv(key, envKey);\n  }\n}\n\n/**\n * Get a value from an environment variable.\n */\nfunction getFromEnv(key: string, envKey: string): string {\n  if (process.env?.[envKey]) {\n    return process.env[envKey]!;\n  } else {\n    throw new UserError(\n      `Did not find \\`${key}\\`, please add an environment variable \\`${envKey}\\` which contains it, or pass \\`${key}\\` as a named parameter.`,\n    );\n  }\n}\n\nexport function promisifyGrpcCall<TRequest, TResponse>(\n  func: GrpcWithCallback<TRequest, TResponse>,\n  client: V2Client,\n): (\n  request: TRequest,\n  metadata: grpc.Metadata,\n  options: Partial<grpc.CallOptions>,\n) => Promise<TResponse> {\n  return (\n    request: TRequest,\n    metadata: grpc.Metadata,\n    options: Partial<grpc.CallOptions>,\n  ): Promise<TResponse> => {\n    return new Promise((resolve, reject) => {\n      func.bind(client)(request, metadata, options, (error, response) => {\n        if (error) {\n          return reject(error);\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nexport function mergeObjects(obj1: AuthConfig, obj2: AuthConfig): AuthConfig {\n  const result = { ...obj1 };\n\n  type KnownKey = keyof AuthConfig;\n  Object.entries(obj2).forEach(([key, value]) => {\n    if (value) {\n      result[key as KnownKey] = value;\n    }\n  });\n\n  return result;\n}\n\nexport class BackoffIterator {\n  private count: number;\n\n  constructor({ count } = { count: 0 }) {\n    this.count = count;\n  }\n\n  [Symbol.iterator]() {\n    return this;\n  }\n\n  next(): IteratorResult<number> {\n    if (this.count < 1) {\n      this.count += 1;\n      return { value: 0.1, done: false };\n    } else if (this.count < 7) {\n      this.count += 1;\n      return { value: 0.01 * Math.pow(2, this.count + 4), done: false };\n    } else {\n      return { value: 0.01 * Math.pow(2, 10), done: false };\n    }\n  }\n}\n","import { version as nodeVersion } from \"process\";\nimport * as os from \"os\";\nimport packageJson from \"../package.json\";\n\nconst CLIENT_VERSION = packageJson.version;\nconst OS_VER = os.platform() + \" \" + os.release();\nconst NODE_VERSION = nodeVersion;\n\ninterface Response {\n  status: {\n    code: string;\n    description: string;\n    details: string;\n  };\n}\n\nexport class TokenError extends Error {}\n\nexport class ApiError extends Error {\n  resource: string;\n  params: object;\n  method: string;\n  response: Response | null;\n  error_code: string | null;\n  error_desc: string | null;\n  error_details: string | null;\n\n  constructor(\n    resource: string,\n    params: object,\n    method: string,\n    response: Response | null = null,\n  ) {\n    super();\n    this.resource = resource;\n    this.params = params;\n    this.method = method;\n    this.response = response;\n    this.error_code = \"N/A\";\n    this.error_desc = \"N/A\";\n    this.error_details = \"N/A\";\n\n    let response_json: string = \"N/A\";\n    if (response) {\n      // TODO: Might need a function to convert response to JSON object\n      const response_json_dict = response; // Adapt based on actual protobuf usage\n\n      this.error_code = response_json_dict?.status?.code ?? \"N/A\";\n      this.error_desc = response_json_dict?.status?.description ?? \"N/A\";\n      this.error_details = response_json_dict?.status?.details ?? \"N/A\";\n      response_json = JSON.stringify(response_json_dict.status, null, 2);\n    }\n\n    const current_ts_str = Date.now().toString();\n\n    const msg = `${method} ${resource} FAILED(${current_ts_str}).  error_code: ${this.error_code}, error_description: ${this.error_desc}, error_details: ${this.error_details}\n >> Node client ${CLIENT_VERSION} with Node ${NODE_VERSION} on ${OS_VER}\n >> ${method} ${resource}\n >> REQUEST(${current_ts_str}) ${JSON.stringify(params, null, 2)}\n >> RESPONSE(${current_ts_str}) ${response_json}`;\n\n    this.message = msg;\n  }\n}\n\nexport class ApiClientError extends Error {}\nexport class UserError extends Error {}\nexport class AuthError extends Error {}\n\nexport function baseUrl(url: string): string {\n  try {\n    return url.slice(0, nthOccurrence(url, \"/\", 4) + 1);\n  } catch (e) {\n    return \"\";\n  }\n}\n\nexport function nthOccurrence(str: string, char: string, n: number): number {\n  let firstIndex = str.indexOf(char);\n  let count = 1;\n  while (firstIndex >= 0 && count < n) {\n    firstIndex = str.indexOf(char, firstIndex + 1);\n    count++;\n  }\n  return firstIndex;\n}\n","{\n  \"name\": \"clarifai-nodejs\",\n  \"version\": \"0.0.3\",\n  \"description\": \"The official Clarifai Node.js SDK\",\n  \"source\": \"src/index.ts\",\n  \"main\": \"dist/main.js\",\n  \"module\": \"dist/module.js\",\n  \"types\": \"dist/types.d.ts\",\n  \"scripts\": {\n    \"test\": \"vitest\",\n    \"test:unit\": \"vitest unit.test\",\n    \"test:integration\": \"vitest run integration.test\",\n    \"coverage\": \"vitest run --coverage\",\n    \"lint:fix\": \"eslint . --fix --ignore-path .gitignore\",\n    \"lint\": \"tsc --noEmit --pretty && eslint . --ignore-path .gitignore\",\n    \"watch\": \"parcel watch\",\n    \"build\": \"parcel build\",\n    \"generate-docs\": \"typedoc --plugin typedoc-plugin-markdown --plugin typedoc-plugin-no-inherit --plugin ./typedoc-plugins/expand-object.js --plugin ./typedoc-plugins/include-example --out docs src/\"\n  },\n  \"files\": [\n    \"dist/\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/Clarifai/clarifai-nodejs.git\"\n  },\n  \"keywords\": [\n    \"clarifai\",\n    \"clarifai-nodejs\",\n    \"clarifai-typescript\"\n  ],\n  \"author\": \"Clarifai Inc.\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Clarifai/clarifai-nodejs/issues\"\n  },\n  \"homepage\": \"https://github.com/Clarifai/clarifai-nodejs#readme\",\n  \"devDependencies\": {\n    \"@parcel/packager-ts\": \"^2.11.0\",\n    \"@parcel/transformer-typescript-types\": \"^2.11.0\",\n    \"@types/async\": \"^3.2.24\",\n    \"@types/google-protobuf\": \"^3.15.12\",\n    \"@types/js-yaml\": \"^4.0.9\",\n    \"@types/lodash\": \"^4.17.0\",\n    \"@types/node\": \"^20.11.16\",\n    \"@types/tmp\": \"^0.2.6\",\n    \"@types/uuid\": \"^9.0.8\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.19.1\",\n    \"@typescript-eslint/parser\": \"^6.19.1\",\n    \"@vitest/coverage-v8\": \"^1.3.1\",\n    \"dotenv\": \"^16.4.5\",\n    \"eslint\": \"^8.56.0\",\n    \"eslint-config-prettier\": \"^9.1.0\",\n    \"eslint-plugin-prettier\": \"^5.1.3\",\n    \"parcel\": \"^2.11.0\",\n    \"prettier\": \"3.2.4\",\n    \"typedoc\": \"^0.25.12\",\n    \"typedoc-plugin-include-example\": \"^1.2.0\",\n    \"typedoc-plugin-markdown\": \"^3.17.1\",\n    \"typedoc-plugin-no-inherit\": \"^1.4.0\",\n    \"typescript\": \"^5.3.3\",\n    \"vitest\": \"^1.3.1\"\n  },\n  \"dependencies\": {\n    \"@grpc/grpc-js\": \"^1.10.1\",\n    \"@grpc/proto-loader\": \"^0.7.10\",\n    \"async\": \"^3.2.5\",\n    \"axios\": \"^1.6.8\",\n    \"chalk\": \"^5.3.0\",\n    \"clarifai-nodejs-grpc\": \"^10.3.2\",\n    \"csv-parse\": \"^5.5.5\",\n    \"from-protobuf-object\": \"^1.0.2\",\n    \"google-protobuf\": \"^3.21.2\",\n    \"js-yaml\": \"^4.1.0\",\n    \"llamaindex\": \"^0.2.13\",\n    \"lodash\": \"^4.17.21\",\n    \"safe-flat\": \"^2.1.0\",\n    \"tmp\": \"^0.2.3\",\n    \"uuid\": \"^9.0.1\",\n    \"winston\": \"^3.11.0\",\n    \"zod\": \"^3.22.4\"\n  }\n}\n","import { ServiceError, status } from \"@grpc/grpc-js\";\nimport { V2Client } from \"clarifai-nodejs-grpc/proto/clarifai/api/service_grpc_pb\";\nimport { ClarifaiAuthHelper } from \"./helper\";\nimport { StatusCode } from \"clarifai-nodejs-grpc/proto/clarifai/api/status/status_code_pb\";\nimport { V2Stub } from \"./register\";\nimport { grpc } from \"clarifai-nodejs-grpc\";\nimport * as jspb from \"google-protobuf\";\nimport { Status } from \"clarifai-nodejs-grpc/proto/clarifai/api/status/status_pb\";\n\nconst throttleStatusCodes = new Set([\n  StatusCode.CONN_THROTTLED,\n  StatusCode.CONN_EXCEED_HOURLY_LIMIT,\n]);\n\nconst retryCodesGrpc = new Set([\n  status.UNAVAILABLE, // gRPC status code for retries\n]);\n\n// Utility type to extract the first parameter type from a function\nexport type FirstParameterType<T> = T extends (\n  arg1: infer P,\n  ...args: unknown[]\n) => unknown\n  ? P\n  : never;\n\n// Utility type to extract the callback parameter type from a function\ntype CallbackParameterType<T> = T extends (\n  arg1: unknown,\n  callback: infer P,\n  ...args: unknown[]\n) => unknown\n  ? P\n  : never;\n\n// Utility type to infer response type from callback\ntype CallbackResponseType<T> = T extends (\n  error: grpc.ServiceError | null,\n  response: infer R,\n) => void\n  ? R\n  : never;\n\nexport class AuthorizedStub {\n  private authHelper: ClarifaiAuthHelper;\n  private stub: V2Client;\n  public client: V2Client;\n  private metadata: [string, string][];\n\n  constructor(authHelper?: ClarifaiAuthHelper) {\n    if (!authHelper) {\n      this.authHelper = ClarifaiAuthHelper.fromEnv();\n    } else {\n      this.authHelper = authHelper;\n    }\n\n    this.stub = this.authHelper.getStub();\n    this.client = this.stub;\n    this.metadata = this.authHelper.metadata;\n  }\n\n  async makeCall<MethodName extends keyof V2Client>(\n    methodName: MethodName,\n    request: FirstParameterType<V2Client[MethodName]>,\n  ): Promise<\n    CallbackResponseType<CallbackParameterType<V2Client[MethodName]>>\n  > {\n    const metadata = new grpc.Metadata();\n    const authMetadata = this.metadata;\n    authMetadata.forEach((meta) => {\n      metadata.set(meta?.[0], meta?.[1]);\n    });\n\n    return new Promise((resolve, reject) => {\n      const methodFunction = this.stub[methodName];\n\n      if (typeof methodFunction !== \"function\") {\n        reject(new Error(`Method ${methodName} does not exist on stub`));\n        return;\n      }\n\n      // TODO - Fix the type issue with manually invoking the methodFunction\n      // @ts-expect-error - TS doesn't know that methodFunction has overloads & only expects 5 arguments\n      methodFunction.call(this.stub, request, metadata, {}, (err, response) => {\n        if (err) {\n          reject(err);\n        } else {\n          // TODO - Fix the type issue with the response\n          // @ts-expect-error - Response type is not fully inferred\n          resolve(response);\n        }\n      });\n    });\n  }\n\n  async makeCallPromise<\n    TRequest extends jspb.Message,\n    TResponseObject extends { status?: Status.AsObject },\n    TResponse extends {\n      toObject: (arg?: boolean) => TResponseObject;\n    },\n  >(\n    endpoint: (\n      request: TRequest,\n      metadata: grpc.Metadata,\n      options: Partial<grpc.CallOptions>,\n    ) => Promise<TResponse>,\n    requestData: TRequest,\n  ): Promise<TResponse> {\n    const metadata = new grpc.Metadata();\n    const authMetadata = this.metadata;\n    authMetadata.forEach((meta) => {\n      metadata.set(meta?.[0], meta?.[1]);\n    });\n\n    return await endpoint(requestData, metadata, {});\n  }\n}\n\nexport class RetryStub extends AuthorizedStub {\n  private maxAttempts: number;\n  private backoffTime: number;\n\n  constructor(\n    authHelper?: ClarifaiAuthHelper,\n    maxAttempts: number = 10,\n    backoffTime: number = 5,\n  ) {\n    super(authHelper);\n    this.maxAttempts = maxAttempts;\n    this.backoffTime = backoffTime;\n  }\n\n  async makeCall<MethodName extends keyof V2Client>(\n    methodName: MethodName,\n    request: FirstParameterType<V2Client[MethodName]>,\n  ): Promise<\n    CallbackResponseType<CallbackParameterType<V2Client[MethodName]>>\n  > {\n    for (let attempt = 1; attempt <= this.maxAttempts; attempt++) {\n      try {\n        const response = await super.makeCall(methodName, request);\n        return response;\n      } catch (err) {\n        const errorCode = (err as ServiceError).code;\n        if (\n          retryCodesGrpc.has(errorCode) ||\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (err as any).status?.code in throttleStatusCodes\n        ) {\n          console.log(`Attempt ${attempt} failed, retrying...`);\n          if (attempt < this.maxAttempts) {\n            await new Promise((resolve) =>\n              setTimeout(resolve, this.backoffTime * 1000),\n            );\n            continue;\n          }\n        }\n        throw err;\n      }\n    }\n    throw new Error(\"Max retry attempts reached\");\n  }\n\n  async makeCallPromise<\n    TRequest extends jspb.Message,\n    TResponseObject extends { status?: Status.AsObject },\n    TResponse extends {\n      toObject: (arg?: boolean) => TResponseObject;\n    },\n  >(\n    endpoint: (\n      request: TRequest,\n      metadata: grpc.Metadata,\n      options: Partial<grpc.CallOptions>,\n    ) => Promise<TResponse>,\n    requestData: TRequest,\n  ): Promise<TResponse> {\n    for (let attempt = 1; attempt <= this.maxAttempts; attempt++) {\n      try {\n        const response = await super.makeCallPromise(endpoint, requestData);\n        return response;\n      } catch (err) {\n        const errorCode = (err as ServiceError).code;\n        if (\n          retryCodesGrpc.has(errorCode) ||\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (err as any).status?.code in throttleStatusCodes\n        ) {\n          console.log(`Attempt ${attempt} failed, retrying...`);\n          if (attempt < this.maxAttempts) {\n            await new Promise((resolve) =>\n              setTimeout(resolve, this.backoffTime * 1000),\n            );\n            continue;\n          }\n        }\n        throw err;\n      }\n    }\n    throw new Error(\"Max retry attempts reached\");\n  }\n}\n\n/**\n * Create client stub that handles authorization and basic retries for\n * unavailable or throttled connections.\n * Args:\n *  authHelper: ClarifaiAuthHelper to use for auth metadata (default: from env)\n *  maxRetryAttempts: max attempts to retry RPCs with retryable failures (default: 10)\n */\nexport function createStub(\n  authHelper?: ClarifaiAuthHelper,\n  maxRetryAttempts: number = 10,\n): V2Stub {\n  // Assuming AuthorizedStub's constructor can handle a null authHelper by defaulting internally or through another mechanism\n  const stub: AuthorizedStub = new AuthorizedStub(authHelper);\n\n  if (maxRetryAttempts > 0) {\n    return new RetryStub(authHelper, maxRetryAttempts);\n  }\n\n  return stub;\n}\n","import { Message, Map as ProtobufMap } from \"google-protobuf\";\n\ntype MessageConstructor<T extends Message> = new () => T;\n\ntype AsObject<T extends Message> = ReturnType<T[\"toObject\"]>;\n\nexport type Subset<K> = {\n  [attr in keyof K]?: K[attr] extends object\n    ? Subset<K[attr]>\n    : K[attr] extends object | null\n      ? Subset<K[attr]> | null\n      : K[attr] extends object | null | undefined\n        ? Subset<K[attr]> | null | undefined\n        : K[attr];\n};\n\nconst enum PREFIX {\n  SET = \"set\",\n  GET = \"get\",\n  CLEAR = \"clear\",\n}\n\n/**\n * Based on \"from-protobuf-object\" package - except accepts data with Partial keys\n */\nexport function fromPartialProtobufObject<T extends Message>(\n  MessageType: MessageConstructor<T>,\n  data: Subset<AsObject<T>>,\n): T {\n  const instance = new MessageType();\n  // Validate Missing props removed - not needed if we are targeting to convert partial objects to protobuf objects\n  // validateMissingProps(instance, data);\n  for (const [prop, value] of Object.entries(\n    filterExtraProps(instance, data),\n  )) {\n    if (Array.isArray(value) && isProtobufMap(instance, prop)) {\n      const mapMethod = getMethod(prop, PREFIX.GET);\n      const map = callMethod(instance, mapMethod) as ProtobufMap<\n        unknown,\n        unknown\n      >;\n      const NestedType = retrieveNestedMapTypePatch(instance, prop);\n      for (const [k, v] of value) {\n        if (!isObject(v, prop)) {\n          map.set(k, v);\n          continue;\n        }\n        if (!NestedType) {\n          throw new Error(\"Unable to retrieve nested type\");\n        }\n        map.set(k, fromPartialProtobufObject(NestedType, v));\n      }\n      continue;\n    }\n    const result = getResult(instance, prop, value);\n    validateType(instance, prop, value);\n    const setter = getMethod(prop, PREFIX.SET);\n    callMethod(instance, setter, result);\n  }\n  return instance;\n}\n\nfunction getResult<T extends Message>(\n  instance: T,\n  prop: string,\n  value: unknown,\n): unknown {\n  if (value instanceof Uint8Array) {\n    return value;\n  }\n  if (Array.isArray(value)) {\n    if (value.length === 0 || !isArrayOfObjects(value, prop)) {\n      return value;\n    }\n    const NestedType = retrieveNestedRepeatedTypePatch(instance, prop);\n    if (!NestedType) {\n      throw new Error(\"Unable to retrieve nested type\");\n    }\n    return value.map((child) => fromPartialProtobufObject(NestedType, child));\n  }\n  if (isObject(value, prop)) {\n    const NestedType = retrieveNestedTypePatch(instance, prop);\n    if (!NestedType) {\n      throw new Error(\"Unable to retrieve nested type\");\n    }\n    return fromPartialProtobufObject(NestedType, value as object);\n  }\n  return value;\n}\n\nfunction callMethod<T extends object, R>(\n  obj: T,\n  key: string,\n  value?: unknown,\n): R {\n  return (obj[key as keyof T] as (value: unknown) => R)(value);\n}\n\nfunction getProp(key: string, prefix: PREFIX): string {\n  const prop = key.slice(prefix.length);\n  return prop.slice(0, 1).toLowerCase() + prop.slice(1);\n}\n\nfunction getMethod(prop: string, prefix: PREFIX): string {\n  return `${prefix}${prop[0].toUpperCase()}${prop.slice(1)}`;\n}\n\nfunction getInstancePropsFromKeys(keys: string[], prefix: PREFIX): string[] {\n  return keys\n    .filter((key) => key.startsWith(prefix))\n    .map((key) => getProp(key, prefix));\n}\n\nfunction getInstanceProps<T extends Message>(instance: T): string[] {\n  const keys = Object.keys(Object.getPrototypeOf(instance));\n  const setters = getInstancePropsFromKeys(keys, PREFIX.SET);\n  const maps = getInstancePropsFromKeys(keys, PREFIX.CLEAR).filter((prop) =>\n    isProtobufMap(instance, prop),\n  );\n  return [...setters, ...maps];\n}\n\nfunction isProtobufMap<T extends Message>(instance: T, prop: string): boolean {\n  return (\n    callMethod(instance, getMethod(prop, PREFIX.GET)) instanceof ProtobufMap\n  );\n}\n\nfunction filterExtraProps<T extends Message>(\n  instance: T,\n  data: Subset<AsObject<T>>,\n): Subset<AsObject<T>> {\n  const instanceProps = getInstanceProps(instance);\n  return Object.fromEntries(\n    Object.entries(data).filter(\n      ([key, value]) => instanceProps.includes(key) && value !== undefined,\n    ),\n  ) as Subset<AsObject<T>>;\n}\n\nfunction isObject(value: unknown, prop: string): boolean {\n  if (value === null) {\n    throw new Error(`Null value for key '${prop}'`);\n  }\n  return typeof value === \"object\";\n}\n\nfunction isArrayOfObjects(arr: unknown[], prop: string): boolean {\n  if (arr.every((item) => isObject(item, prop))) {\n    return true;\n  }\n  if (arr.every((item) => !isObject(item, prop))) {\n    return false;\n  }\n  throw new Error(`Mixed array for '${prop}'`);\n}\n\nfunction validateType<T extends Message>(\n  instance: T,\n  prop: string,\n  value: unknown,\n): void {\n  const getter = getMethod(prop, PREFIX.GET);\n  const instanceValue = callMethod(instance, getter);\n  const expectedType =\n    instanceValue !== undefined ? typeof instanceValue : \"object\";\n  const actualType = value instanceof Uint8Array ? \"string\" : typeof value;\n  if (Array.isArray(instanceValue) && !Array.isArray(value)) {\n    throw new Error(\n      `Invalid type for '${prop}' (expected array, got '${actualType}')`,\n    );\n  }\n  if (!Array.isArray(instanceValue) && Array.isArray(value)) {\n    throw new Error(\n      `Invalid type for '${prop}' (expected '${expectedType}', got array)`,\n    );\n  }\n  if (expectedType !== actualType) {\n    throw new Error(\n      `Invalid type for '${prop}' (expected '${expectedType}', got '${actualType}')`,\n    );\n  }\n}\n\nfunction retrieveNestedTypePatch<T extends Message, N extends Message>(\n  instance: T,\n  prop: string,\n): MessageConstructor<N> | null {\n  const getWrapperField = Message.getWrapperField;\n  let nestedType: MessageConstructor<Message> | null = null;\n  Message.getWrapperField = function (msg, ctor, fieldNumber, required) {\n    nestedType = ctor;\n    return getWrapperField(msg, ctor, fieldNumber, required);\n  };\n  callMethod(instance, getMethod(prop, PREFIX.GET));\n  Message.getWrapperField = getWrapperField;\n  return nestedType;\n}\n\nfunction retrieveNestedRepeatedTypePatch<T extends Message, N extends Message>(\n  instance: T,\n  prop: string,\n): MessageConstructor<N> | null {\n  const getRepeatedWrapperField = Message.getRepeatedWrapperField;\n  let nestedType: MessageConstructor<Message> | null = null;\n  Message.getRepeatedWrapperField = function (msg, ctor, fieldNumber) {\n    nestedType = ctor;\n    return getRepeatedWrapperField(msg, ctor, fieldNumber);\n  };\n  callMethod(instance, getMethod(prop, PREFIX.GET));\n  Message.getRepeatedWrapperField = getRepeatedWrapperField;\n  return nestedType;\n}\n\nfunction retrieveNestedMapTypePatch<T extends Message, N extends Message>(\n  instance: T,\n  prop: string,\n): MessageConstructor<N> | null {\n  const getMapField = Message.getMapField;\n  let nestedType: typeof Message | null = null;\n  Message.getMapField = function (msg, fieldNumber, noLazyCreate, valueCtor) {\n    nestedType = valueCtor ?? null;\n    return getMapField(msg, fieldNumber, noLazyCreate, valueCtor);\n  };\n  callMethod(instance, getMethod(prop, PREFIX.GET));\n  Message.getMapField = getMapField;\n  return nestedType;\n}\n","import {\n  GetDatasetRequest,\n  GetModelRequest,\n  GetWorkflowRequest,\n  ListConceptsRequest,\n  ListDatasetsRequest,\n  ListInstalledModuleVersionsRequest,\n  ListModelsRequest,\n  ListModulesRequest,\n  ListWorkflowsRequest,\n  MultiDatasetResponse,\n  PostDatasetsRequest,\n  PostModelsRequest,\n  SingleModelResponse,\n  SingleWorkflowResponse,\n  SingleDatasetResponse,\n  PostModulesRequest,\n  DeleteDatasetsRequest,\n  DeleteModelsRequest,\n  DeleteWorkflowsRequest,\n  DeleteModulesRequest,\n  PostWorkflowsRequest,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/service_pb\";\nimport { UserError } from \"../errors\";\nimport { ClarifaiAppUrl, ClarifaiUrlHelper } from \"../urls/helper\";\nimport { promisifyGrpcCall } from \"../utils/misc\";\nimport { AuthConfig, PaginationRequestParams } from \"../utils/types\";\nimport { Lister } from \"./lister\";\nimport {\n  Model,\n  App as GrpcApp,\n  Workflow,\n  Module,\n  InstalledModuleVersion,\n  Concept,\n  Dataset,\n  WorkflowNode,\n  ModelVersion,\n  UserAppIDSet,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/resources_pb\";\nimport { TRAINABLE_MODEL_TYPES } from \"../constants/model\";\nimport { StatusCode } from \"clarifai-nodejs-grpc/proto/clarifai/api/status/status_code_pb\";\nimport * as fs from \"fs\";\nimport * as yaml from \"js-yaml\";\nimport { validateWorkflow } from \"../workflows/validate\";\nimport { getYamlOutputInfoProto } from \"../workflows/utils\";\nimport { Model as ModelConstructor } from \"./model\";\nimport { v4 as uuid } from \"uuid\";\nimport { fromProtobufObject } from \"from-protobuf-object\";\nimport { fromPartialProtobufObject } from \"../utils/fromPartialProtobufObject\";\nimport { flatten } from \"safe-flat\";\n\nexport type AuthAppConfig = Omit<AuthConfig, \"appId\" | \"userId\"> & {\n  appId?: undefined;\n  userId?: undefined;\n};\n\nexport type AppConfig =\n  | {\n      url: ClarifaiAppUrl;\n      authConfig: AuthAppConfig;\n    }\n  | {\n      url?: undefined;\n      authConfig: AuthConfig;\n    };\n\nexport type ListDatasetsParam =\n  PaginationRequestParams<ListDatasetsRequest.AsObject>;\nexport type ListModelsParam =\n  PaginationRequestParams<ListModelsRequest.AsObject>;\nexport type ListWorkflowsParam =\n  PaginationRequestParams<ListWorkflowsRequest.AsObject>;\nexport type ListModulesParam =\n  PaginationRequestParams<ListModulesRequest.AsObject>;\nexport type ListInstalledModuleVersionsParam =\n  PaginationRequestParams<ListInstalledModuleVersionsRequest.AsObject>;\nexport type CreateDatasetParam = Omit<Partial<Dataset.AsObject>, \"id\">;\nexport type CreateModelParam = Omit<Partial<Model.AsObject>, \"id\">;\n\n/**\n * App is a class that provides access to Clarifai API endpoints related to App information.\n * @noInheritDoc\n */\nexport class App extends Lister {\n  private appInfo: GrpcApp;\n  public info: GrpcApp.AsObject;\n\n  /**\n   * Initializes an App object.\n   * @param config - The configuration object for the App.\n   * @param config.url - The URL of the app.\n   * @param config.authConfig.userId The user ID for the user to interact with.\n   * @param config.authConfig.appId The application ID associated with the user. Not required if the URL is provided.\n   * @param config.authConfig.pat A personal access token for authentication. Can also be set as an environment variable CLARIFAI_PAT.\n   * @param config.authConfig.token A session token for authentication. Accepts either a session token or a personal access token (pat). Can also be set as an environment variable CLARIFAI_SESSION_TOKEN.\n   * @param config.authConfig.base Optional. The base API URL. Defaults to \"https://api.clarifai.com\".\n   * @param config.authConfig.ui Optional. Additional UI configurations.\n   *\n   * @includeExample examples/app/index.ts\n   */\n  constructor({ url, authConfig }: AppConfig) {\n    if (url && authConfig.appId) {\n      throw new UserError(\"You can only specify one of url or app_id.\");\n    }\n\n    if (url) {\n      const [userId, appId] = ClarifaiUrlHelper.splitClarifaiAppUrl(url);\n      // @ts-expect-error - since url is parsed, we need to set appId here\n      if (userId) authConfig.userId = userId;\n      // @ts-expect-error - since url is parsed, we need to set appId here\n      if (appId) authConfig.appId = appId;\n    }\n\n    super({ authConfig: authConfig as AuthConfig });\n\n    this.appInfo = new GrpcApp();\n    this.appInfo.setUserId(authConfig.userId!);\n    this.appInfo.setId(authConfig.appId!);\n    this.info = this.appInfo.toObject();\n  }\n\n  /**\n   * Lists all the datasets for the app.\n   *\n   * @param pageNo - The page number to list.\n   * @param perPage - The number of items per page.\n   *\n   * @yields Dataset - Dataset objects for the datasets in the app.\n   *\n   * @includeExample examples/app/listDatasets.ts\n   *\n   * @remarks\n   * Defaults to 16 per page\n   */\n  async *listDataSets({\n    params = {},\n    pageNo,\n    perPage,\n  }: {\n    params?: ListDatasetsParam;\n    pageNo?: number;\n    perPage?: number;\n  } = {}): AsyncGenerator<\n    MultiDatasetResponse.AsObject[\"datasetsList\"],\n    void,\n    unknown\n  > {\n    const listDataSets = promisifyGrpcCall(\n      this.STUB.client.listDatasets,\n      this.STUB.client,\n    );\n\n    const request = fromPartialProtobufObject(ListDatasetsRequest, params);\n    request.setUserAppId(this.userAppId);\n\n    for await (const item of this.listPagesGenerator(\n      listDataSets,\n      request,\n      pageNo,\n      perPage,\n    )) {\n      yield item.toObject()?.datasetsList;\n    }\n  }\n\n  /**\n   * Lists all the available models for the user.\n   *\n   * @param params - A object of filters to apply to the list of models.\n   * @param onlyInApp - If True, only return models that are in the app.\n   * @param pageNo - The page number to list.\n   * @param perPage - The number of items per page.\n   *\n   * @includeExample examples/app/listModels.ts\n   *\n   * @remarks\n   * Defaults to 16 per page\n   */\n  async *listModels({\n    params = {},\n    onlyInApp = true,\n    pageNo,\n    perPage,\n  }: {\n    params?: ListModelsParam;\n    onlyInApp?: boolean;\n    pageNo?: number;\n    perPage?: number;\n  } = {}): AsyncGenerator<Model.AsObject[], void, unknown> {\n    const listModels = promisifyGrpcCall(\n      this.STUB.client.listModels,\n      this.STUB.client,\n    );\n\n    const request = fromPartialProtobufObject(ListModelsRequest, params);\n    request.setUserAppId(this.userAppId);\n\n    for await (const item of this.listPagesGenerator(\n      listModels,\n      request,\n      pageNo,\n      perPage,\n    )) {\n      const models = [];\n      const modelsListResponse = item.toObject();\n      for (const eachModel of modelsListResponse.modelsList) {\n        if (!eachModel.modelVersion) {\n          continue;\n        }\n        if (\n          onlyInApp &&\n          eachModel.modelVersion.appId !== this.userAppId.getAppId()\n        ) {\n          continue;\n        }\n        models.push(eachModel);\n      }\n      yield models;\n    }\n  }\n\n  /**\n   * Lists all the available workflows for the user.\n   *\n   * @param params - A object of filters to apply to the list of workflows.\n   * @param onlyInApp - If True, only return workflows that are in the app.\n   * @param pageNo - The page number to list.\n   * @param perPage - The number of items per page.\n   *\n   * @yields Workflow - Workflow objects for the workflows in the app.\n   *\n   * @includeExample examples/app/listWorkflows.ts\n   *\n   * @remarks\n   * Defaults to 16 per page\n   */\n  async *listWorkflows({\n    params = {},\n    onlyInApp = true,\n    pageNo,\n    perPage,\n  }: {\n    params?: ListWorkflowsParam;\n    onlyInApp?: boolean;\n    pageNo?: number;\n    perPage?: number;\n  } = {}): AsyncGenerator<Workflow.AsObject[], void, unknown> {\n    const request = fromPartialProtobufObject(ListWorkflowsRequest, params);\n\n    const listWorkflows = promisifyGrpcCall(\n      this.STUB.client.listWorkflows,\n      this.STUB.client,\n    );\n\n    const listWorkflowsGenerator = this.listPagesGenerator(\n      listWorkflows,\n      request,\n      pageNo,\n      perPage,\n    );\n\n    for await (const workflow of listWorkflowsGenerator) {\n      const workflows = [];\n      const workflowObject = workflow.toObject();\n      for (const eachWorkflow of workflowObject.workflowsList) {\n        if (onlyInApp && eachWorkflow.appId !== this.userAppId.getAppId()) {\n          continue;\n        }\n        workflows.push(eachWorkflow);\n      }\n      yield workflows;\n    }\n  }\n\n  /**\n   * Lists all the available modules for the user.\n   *\n   * @param params - An object of filters to apply to the list of modules.\n   * @param onlyInApp - If true, only return modules that are in the app.\n   * @param pageNo - The page number to list.\n   * @param perPage - The number of items per page.\n   *\n   * @yields Module - Module objects for the modules in the app.\n   *\n   * @includeExample examples/app/listModules.ts\n   *\n   * @remarks\n   * Defaults to 16 per page\n   */\n  async *listModules({\n    params = {},\n    onlyInApp,\n    pageNo,\n    perPage,\n  }: {\n    params?: ListModulesParam;\n    onlyInApp?: boolean;\n    pageNo?: number;\n    perPage?: number;\n  } = {}): AsyncGenerator<Module.AsObject[], void, unknown> {\n    const listModules = promisifyGrpcCall(\n      this.STUB.client.listModules,\n      this.STUB.client,\n    );\n\n    const request = fromPartialProtobufObject(ListModulesRequest, params);\n    request.setUserAppId(this.userAppId);\n\n    for await (const item of this.listPagesGenerator(\n      listModules,\n      request,\n      pageNo,\n      perPage,\n    )) {\n      const modules = [];\n      const modulesListResponse = item.toObject();\n      for (const eachModule of modulesListResponse.modulesList) {\n        if (onlyInApp && eachModule.appId !== this.userAppId.getAppId()) {\n          continue;\n        }\n        modules.push(eachModule);\n      }\n      yield modules;\n    }\n  }\n\n  /**\n   * Lists all installed module versions in the app.\n   *\n   * @param params - A dictionary of filters to apply to the list of installed module versions.\n   * @param pageNo - The page number to list.\n   * @param perPage - The number of items per page.\n   *\n   * @yields Module - Module objects for the installed module versions in the app.\n   *\n   * @includeExample examples/app/listInstalledModuleVersions.ts\n   *\n   * @remarks\n   * Defaults to 16 per page\n   */\n  async *listInstalledModuleVersions({\n    params = {},\n    pageNo,\n    perPage,\n  }: {\n    params?: ListInstalledModuleVersionsParam;\n    pageNo?: number;\n    perPage?: number;\n  } = {}): AsyncGenerator<InstalledModuleVersion.AsObject[], void, unknown> {\n    const listInstalledModuleVersions = promisifyGrpcCall(\n      this.STUB.client.listInstalledModuleVersions,\n      this.STUB.client,\n    );\n    const request = fromPartialProtobufObject(\n      ListInstalledModuleVersionsRequest,\n      params,\n    );\n    request.setUserAppId(this.userAppId);\n    for await (const item of this.listPagesGenerator(\n      listInstalledModuleVersions,\n      request,\n      pageNo,\n      perPage,\n    )) {\n      const moduleVersions = [];\n      const modulesListResponseObject = item.toObject();\n      for (const eachModule of modulesListResponseObject.installedModuleVersionsList) {\n        // @ts-expect-error - delete needed here due to debt in the backend\n        delete eachModule.deployUrl;\n        // @ts-expect-error - delete needed here due to debt in the backend\n        delete eachModule.installedModuleVersionId; // TODO: remove this after the backend fix\n        moduleVersions.push(eachModule);\n      }\n      yield moduleVersions;\n    }\n  }\n\n  /**\n   * Lists all the concepts for the app.\n   * @param page_no - The page number to list.\n   * @param per_page - The number of items per page.\n   * @yields Concepts in the app.\n   *\n   * @includeExample examples/app/listConcepts.ts\n   */\n  async *listConcepts({\n    pageNo,\n    perPage,\n  }: {\n    pageNo?: number;\n    perPage?: number;\n  } = {}): AsyncGenerator<Concept.AsObject[], void, unknown> {\n    const listConcepts = promisifyGrpcCall(\n      this.STUB.client.listConcepts,\n      this.STUB.client,\n    );\n    const request = new ListConceptsRequest();\n    request.setUserAppId(this.userAppId);\n    for await (const item of this.listPagesGenerator(\n      listConcepts,\n      request,\n      pageNo,\n      perPage,\n    )) {\n      const conceptsListResponse = item.toObject();\n      yield conceptsListResponse.conceptsList;\n    }\n  }\n\n  listTrainableModelTypes(): string[] {\n    return TRAINABLE_MODEL_TYPES;\n  }\n\n  /**\n   * Creates a dataset for the app.\n   *\n   * @param datasetId - The dataset ID for the dataset to create.\n   * @param params - Additional parameters to be passed to the Dataset.\n   *\n   * @returns A Dataset object for the specified dataset ID.\n   *\n   * @includeExample examples/app/createDataset.ts\n   */\n  async createDataset({\n    datasetId,\n    params = {},\n  }: {\n    datasetId: string;\n    params?: CreateDatasetParam;\n  }): Promise<Dataset.AsObject> {\n    const request = new PostDatasetsRequest();\n    request.setUserAppId(this.userAppId);\n\n    const newDataSet = fromPartialProtobufObject(Dataset, params);\n    newDataSet.setId(datasetId);\n\n    request.setDatasetsList([newDataSet]);\n\n    const postDatasets = promisifyGrpcCall(\n      this.STUB.client.postDatasets,\n      this.STUB.client,\n    );\n\n    const response = await this.grpcRequest(postDatasets, request);\n    const responseObject = response.toObject();\n\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n\n    console.info(\"\\nDataset created\\n%s\", responseObject.status.description);\n\n    return responseObject.datasetsList?.[0];\n  }\n\n  /**\n   * Creates a model for the app.\n   *\n   * @param modelId - The model ID for the model to create.\n   * @param params - Additional parameters to be passed to the Model.\n   *\n   * @returns A Model object for the specified model ID.\n   *\n   * @includeExample examples/app/createModel.ts\n   */\n  async createModel({\n    modelId,\n    params = {},\n  }: {\n    modelId: string;\n    params?: CreateModelParam;\n  }): Promise<Model.AsObject> {\n    const request = new PostModelsRequest();\n    request.setUserAppId(this.userAppId);\n    const newModel = fromPartialProtobufObject(Model, {\n      id: modelId,\n      ...params,\n    });\n    request.setModelsList([newModel]);\n    const postModels = promisifyGrpcCall(\n      this.STUB.client.postModels,\n      this.STUB.client,\n    );\n    const response = await this.grpcRequest(postModels, request);\n    const responseObject = response.toObject();\n    if (\n      responseObject.status?.code !== StatusCode.SUCCESS ||\n      !responseObject.model\n    ) {\n      throw new Error(responseObject.status?.description);\n    }\n    console.info(\"\\nModel created\\n%s\", responseObject.status.description);\n    return responseObject.model;\n  }\n\n  /**\n   * Creates a module for the app.\n   *\n   * @param moduleId - The module ID for the module to create.\n   * @param description - The description of the module to create.\n   * @returns A Module object for the specified module ID.\n   *\n   * @includeExample examples/app/createModule.ts\n   */\n  async createModule({\n    moduleId,\n    description,\n  }: {\n    moduleId: string;\n    description: string;\n  }): Promise<Module.AsObject> {\n    const request = new PostModulesRequest();\n    request.setUserAppId(this.userAppId);\n    const newModule = new Module();\n    newModule.setId(moduleId);\n    newModule.setDescription(description);\n    request.setModulesList([newModule]);\n    const postModules = promisifyGrpcCall(\n      this.STUB.client.postModules,\n      this.STUB.client,\n    );\n    const response = await this.grpcRequest(postModules, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n    console.info(\"\\nModule created\\n%s\", responseObject.status.description);\n    return responseObject.modulesList?.[0];\n  }\n\n  /**\n   * Creates a workflow for the app.\n   *\n   * @param configFilePath - The path to the yaml workflow config file.\n   * @param generateNewId - If true, generate a new workflow ID.\n   * @param display - If true, display the workflow nodes tree.\n   * @returns A Workflow object for the specified workflow config.\n   *\n   * @includeExample examples/app/createWorkflow.ts\n   */\n  async createWorkflow({\n    configFilePath,\n    generateNewId = false,\n    display = true,\n  }: {\n    configFilePath: string;\n    generateNewId?: boolean;\n    display?: boolean;\n  }): Promise<Workflow.AsObject> {\n    if (!fs.existsSync(configFilePath)) {\n      throw new UserError(\n        `Workflow config file not found at ${configFilePath}`,\n      );\n    }\n\n    const data = yaml.load(fs.readFileSync(configFilePath, \"utf8\"));\n\n    const validatedData = validateWorkflow(data);\n    const workflow = validatedData[\"workflow\"];\n\n    // Get all model objects from the workflow nodes.\n    const allModels: Model.AsObject[] = [];\n    for (const node of workflow.nodes) {\n      let modelObject: Model.AsObject | undefined;\n      const outputInfo = getYamlOutputInfoProto(node?.model?.outputInfo ?? {});\n      try {\n        const model = await this.model({\n          modelId: node.model.modelId,\n          modelVersionId: node.model.modelVersionId ?? \"\",\n          modelUserAppId:\n            node.model.userId && node.model.appId\n              ? {\n                  userId: node.model.userId,\n                  appId: node.model.appId,\n                }\n              : undefined,\n        });\n        modelObject = model;\n        if (model) {\n          allModels.push(model);\n        }\n      } catch (e) {\n        // model doesn't exist, create a new model from yaml config\n        if (\n          (e as { message?: string })?.message?.includes(\"Model does not exist\")\n        ) {\n          const { modelId, ...otherParams } = node.model;\n          modelObject = await this.createModel({\n            modelId,\n            params: otherParams as CreateModelParam,\n          });\n          const model = new ModelConstructor({\n            modelId: modelObject.id,\n            authConfig: {\n              pat: this.pat,\n              appId: this.userAppId.getAppId(),\n              userId: this.userAppId.getUserId(),\n            },\n          });\n          if (outputInfo) {\n            const modelVersion = new ModelVersion().setOutputInfo(outputInfo);\n            const modelWithVersion = await model.createVersion(modelVersion);\n            if (modelWithVersion) {\n              allModels.push(modelWithVersion);\n              continue;\n            }\n          } else {\n            await model.loadInfo();\n            allModels.push(model.modelInfo.toObject());\n          }\n        }\n      }\n    }\n\n    // Convert nodes to resources_pb2.WorkflowNodes.\n    const nodes: WorkflowNode.AsObject[] = [];\n    for (let i = 0; i < workflow[\"nodes\"].length; i++) {\n      const ymlNode = workflow[\"nodes\"][i];\n      const node: WorkflowNode.AsObject = {\n        id: ymlNode[\"id\"],\n        model: allModels[i],\n        // TODO: setting default values, need to check for right values to set here\n        nodeInputsList: [],\n        // TODO: setting default values, need to check for right values to set here\n        suppressOutput: false,\n      };\n      // Add node inputs if they exist, i.e. if these nodes do not connect directly to the input.\n      if (ymlNode.nodeInputs) {\n        for (const ni of ymlNode.nodeInputs) {\n          node?.nodeInputsList.push({ nodeId: ni.nodeId });\n        }\n      }\n      nodes.push(node);\n    }\n\n    let workflowId = workflow[\"id\"];\n    if (generateNewId) {\n      workflowId = uuid();\n    }\n\n    // Create the workflow.\n    const request = new PostWorkflowsRequest();\n    request.setUserAppId(this.userAppId);\n    const workflowNodesList = nodes.map((eachNode) =>\n      fromProtobufObject(WorkflowNode, eachNode),\n    );\n    request.setWorkflowsList([\n      new Workflow().setId(workflowId).setNodesList(workflowNodesList),\n    ]);\n\n    const postWorkflows = promisifyGrpcCall(\n      this.STUB.client.postWorkflows,\n      this.STUB.client,\n    );\n\n    const response = await this.grpcRequest(postWorkflows, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n    console.info(\"\\nWorkflow created\\n%s\", responseObject.status?.description);\n\n    // Display the workflow nodes tree.\n    if (display) {\n      console.table(flatten(responseObject.workflowsList?.[0]?.nodesList));\n    }\n    return responseObject.workflowsList?.[0];\n  }\n\n  /**\n   * Returns a Model object for the existing model ID.\n   *\n   * @param modelId - The model ID for the existing model.\n   * @param modelVersionId - Specific version id of the model.\n   * @param modelUserAppId - The user app ID for the model.\n   * @returns A model object for the specified model ID.\n   *\n   * @includeExample examples/app/model.ts\n   */\n  async model({\n    modelId,\n    modelVersionId,\n    modelUserAppId,\n  }: {\n    modelId: string;\n    modelVersionId?: string;\n    modelUserAppId?: {\n      userId: string;\n      appId: string;\n    };\n  }): Promise<SingleModelResponse.AsObject[\"model\"]> {\n    const request = new GetModelRequest();\n    if (modelUserAppId) {\n      request.setUserAppId(\n        new UserAppIDSet()\n          .setAppId(modelUserAppId.appId)\n          .setUserId(modelUserAppId.userId),\n      );\n    } else {\n      request.setUserAppId(this.userAppId);\n    }\n    request.setModelId(modelId);\n    if (modelVersionId) request.setVersionId(modelVersionId);\n\n    const getModel = promisifyGrpcCall(\n      this.STUB.client.getModel,\n      this.STUB.client,\n    );\n\n    const response = await this.grpcRequest(getModel, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n    return responseObject.model;\n  }\n\n  /**\n   * Returns a Workflow object for the existing workflow ID.\n   *\n   * @param workflowId - The workflow ID for a existing workflow.\n   * @returns A workflow object for the specified workflow ID.\n   *\n   * @includeExample examples/app/workflow.ts\n   */\n  async workflow({\n    workflowId,\n  }: {\n    workflowId: string;\n  }): Promise<SingleWorkflowResponse.AsObject[\"workflow\"]> {\n    const request = new GetWorkflowRequest();\n    request.setUserAppId(this.userAppId);\n    request.setWorkflowId(workflowId);\n    const getWorkflow = promisifyGrpcCall(\n      this.STUB.client.getWorkflow,\n      this.STUB.client,\n    );\n    const response = await this.grpcRequest(getWorkflow, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n    return responseObject.workflow;\n  }\n\n  /**\n   * Returns a Dataset object for the existing dataset ID.\n   *\n   * @param dataset_id - The dataset ID for the dataset to interact with.\n   * @returns A Dataset object for the existing dataset ID.\n   *\n   * @includeExample examples/app/dataset.ts\n   */\n  async dataset({\n    datasetId,\n  }: {\n    datasetId: string;\n  }): Promise<SingleDatasetResponse.AsObject[\"dataset\"]> {\n    const request = new GetDatasetRequest();\n    request.setUserAppId(this.userAppId);\n    request.setDatasetId(datasetId);\n    const getDataset = promisifyGrpcCall(\n      this.STUB.client.getDataset,\n      this.STUB.client,\n    );\n    const response = await this.grpcRequest(getDataset, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n    return responseObject.dataset;\n  }\n\n  /**\n   * Deletes a dataset for the user.\n   *\n   * @param datasetId - The dataset ID for the app to delete.\n   *\n   * @includeExample examples/app/deleteDataset.ts\n   */\n  async deleteDataset({ datasetId }: { datasetId: string }): Promise<void> {\n    const request = new DeleteDatasetsRequest();\n    request.setUserAppId(this.userAppId);\n    request.setDatasetIdsList([datasetId]);\n    const deleteDatasets = promisifyGrpcCall(\n      this.STUB.client.deleteDatasets,\n      this.STUB.client,\n    );\n    const response = await this.grpcRequest(deleteDatasets, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n    console.info(\"\\nDataset Deleted\\n%s\", responseObject.status?.description);\n  }\n\n  /**\n   * Deletes a model for the user.\n   *\n   * @param modelId - The model ID for the model to delete.\n   *\n   * @includeExample examples/app/deleteModel.ts\n   */\n  async deleteModel({ modelId }: { modelId: string }): Promise<void> {\n    const request = new DeleteModelsRequest();\n    request.setUserAppId(this.userAppId);\n    request.setIdsList([modelId]);\n    const deleteModels = promisifyGrpcCall(\n      this.STUB.client.deleteModels,\n      this.STUB.client,\n    );\n    const response = await this.grpcRequest(deleteModels, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n    console.info(\"\\nModel Deleted\\n%s\", responseObject.status?.description);\n  }\n\n  /**\n   * Deletes a workflow for the user.\n   *\n   * @param workflowId - The workflow ID for the workflow to delete.\n   *\n   * @includeExample examples/app/deleteWorkflow.ts\n   */\n  async deleteWorkflow({ workflowId }: { workflowId: string }): Promise<void> {\n    const request = new DeleteWorkflowsRequest();\n    request.setUserAppId(this.userAppId);\n    request.setIdsList([workflowId]);\n    const deleteWorkflows = promisifyGrpcCall(\n      this.STUB.client.deleteWorkflows,\n      this.STUB.client,\n    );\n    const response = await this.grpcRequest(deleteWorkflows, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n    console.info(\"\\nWorkflow Deleted\\n%s\", responseObject.status?.description);\n  }\n\n  /**\n   * Deletes a module for the user.\n   *\n   * @param moduleId - The module ID for the module to delete.\n   *\n   * @includeExample examples/app/deleteModule.ts\n   */\n  async deleteModule({ moduleId }: { moduleId: string }): Promise<void> {\n    const request = new DeleteModulesRequest();\n    request.setUserAppId(this.userAppId);\n    request.setIdsList([moduleId]);\n    const deleteModules = promisifyGrpcCall(\n      this.STUB.client.deleteModules,\n      this.STUB.client,\n    );\n    const response = await this.grpcRequest(deleteModules, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n    console.info(\"\\nModule Deleted\\n%s\", responseObject.status?.description);\n  }\n}\n","import { URL } from \"url\";\n\ninterface ClarifaiAuthHelper {\n  ui: string;\n}\n\ntype USERID = string;\ntype APPID = string;\ntype RESOURCE_TYPE = string;\ntype RESOURCEID = string;\ntype RESOURCE_VERSION_TYPE = string;\ntype RESOURCE_VERSION_ID = string;\nexport type ClarifaiUrl =\n  | `${string}://${string}/${USERID}/${APPID}/${RESOURCE_TYPE}/${RESOURCEID}/${RESOURCE_VERSION_TYPE}/${RESOURCE_VERSION_ID}`\n  | `${string}://${string}/${USERID}/${APPID}/${RESOURCE_TYPE}/${RESOURCEID}`;\nexport type ClarifaiAppUrl = `${string}://${string}/${USERID}/${APPID}`;\nexport type ClarifaiModuleUrl =\n  `${string}://${string}/${USERID}/${APPID}/modules/${RESOURCEID}/${RESOURCE_VERSION_TYPE}/${RESOURCE_VERSION_ID}`;\n\nexport class ClarifaiUrlHelper {\n  private auth: ClarifaiAuthHelper;\n  private moduleManagerImvId: string;\n\n  /**\n   * Creates an instance of ClarifaiUrlHelper.\n   * @param auth A ClarifaiAuthHelper object.\n   * @param moduleManagerImvId ID for the module manager install, default is \"module_manager_install\".\n   */\n  constructor(\n    auth: ClarifaiAuthHelper,\n    moduleManagerImvId: string = \"module_manager_install\",\n  ) {\n    this.auth = auth;\n    this.moduleManagerImvId = moduleManagerImvId;\n  }\n\n  /**\n   * Getter for the auth property.\n   */\n  getAuth(): ClarifaiAuthHelper {\n    return this.auth;\n  }\n\n  /**\n   * Constructs a URL for module UI based on given parameters.\n   * @param userId User ID.\n   * @param appId Application ID.\n   * @param moduleId Module ID.\n   * @param moduleVersionId Module Version ID.\n   * @returns A string representing the module UI URL.\n   */\n  moduleUiUrl(\n    userId: string,\n    appId: string,\n    moduleId: string,\n    moduleVersionId: string,\n  ): string {\n    return `${this.auth.ui}/${userId}/${appId}/modules/${moduleId}/versions/${moduleVersionId}`;\n  }\n\n  /**\n   * Constructs a URL for module installation UI.\n   * @param destUserId Destination User ID.\n   * @param destAppId Destination Application ID.\n   * @param moduleUrl Module URL.\n   * @returns A string representing the module install UI URL.\n   */\n  moduleInstallUiUrl(\n    destUserId: string,\n    destAppId: string,\n    moduleUrl: string,\n  ): string {\n    return `${this.auth.ui}/${destUserId}/${destAppId}/installed_module_versions/${this.moduleManagerImvId}/install?install=${moduleUrl}`;\n  }\n\n  /**\n   * Constructs a URL for IMV UI.\n   * @param destUserId Destination User ID.\n   * @param destAppId Destination Application ID.\n   * @param imvId IMV ID.\n   * @returns A string representing the IMV UI URL.\n   */\n  imvUiUrl(destUserId: string, destAppId: string, imvId: string): string {\n    return `${this.auth.ui}/${destUserId}/${destAppId}/installed_module_versions/${imvId}`;\n  }\n\n  /**\n   * Constructs a URL to the resource in the community.\n   * @param userId User ID.\n   * @param appId Application ID.\n   * @param resourceType Type of resource.\n   * @param resourceId Resource ID.\n   * @param versionId (Optional) Version of the resource.\n   * @returns A string representing the URL to the resource.\n   */\n  clarifaiUrl(\n    userId: string,\n    appId: string,\n    resourceType: string,\n    resourceId: string,\n    versionId?: string,\n  ): string {\n    const validTypes = [\n      \"modules\",\n      \"models\",\n      \"concepts\",\n      \"inputs\",\n      \"workflows\",\n      \"tasks\",\n      \"installed_module_versions\",\n    ];\n    if (!validTypes.includes(resourceType)) {\n      throw new Error(\n        `resourceType must be one of ${validTypes.join(\", \")} but was ${resourceType}`,\n      );\n    }\n    if (versionId === undefined) {\n      return `${this.auth.ui}/${userId}/${appId}/${resourceType}/${resourceId}`;\n    }\n    return `${this.auth.ui}/${userId}/${appId}/${resourceType}/${resourceId}/versions/${versionId}`;\n  }\n\n  /**\n   * Splits a Clarifai app URL into its component parts.\n   * clarifai.com uses fully qualified urls to resources.\n   * They are in the format of:\n   * https://clarifai.com/{user_id}/{app_id}\n   *\n   * @param url The Clarifai app URL.\n   * @returns A tuple containing userId and appId.\n   */\n  static splitClarifaiAppUrl(url: ClarifaiAppUrl): [string, string] {\n    const o = new URL(url);\n    const parts = o.pathname.split(\"/\").filter((part) => part.length > 0);\n    if (parts.length !== 2) {\n      throw new Error(\n        `Provided url must have 2 parts after the domain name. The current parts are: ${parts}`,\n      );\n    }\n    const [userId, appId] = parts;\n    return [userId, appId];\n  }\n\n  /**\n   * Splits a Clarifai URL into its component parts, including optional resource version.\n   * clarifai.com uses fully qualified urls to resources.\n   * They are in the format of:\n   * https://clarifai.com/{user_id}/{app_id}/{resource_type}/{resource_id}/{resource_version_type}/{resource_version_id}\n   * Those last two are optional.\n   *\n   * @param url The Clarifai URL.\n   * @returns A tuple containing userId, appId, resourceType, resourceId, and optionally resourceVersionId.\n   */\n  static splitClarifaiUrl(\n    url: ClarifaiUrl,\n  ): [string, string, string, string, string?] {\n    const o = new URL(url);\n    const parts = o.pathname.split(\"/\").filter((part) => part.length > 0);\n    if (parts.length !== 4 && parts.length !== 6) {\n      throw new Error(\n        \"Provided url must have 4 or 6 parts after the domain name.\",\n      );\n    }\n    const [userId, appId, resourceType, resourceId] = parts;\n    const resourceVersionId = parts.length === 6 ? parts[5] : undefined;\n    return [userId, appId, resourceType, resourceId, resourceVersionId];\n  }\n\n  /**\n   * Splits a module UI URL into its component IDs.\n   * Takes in a path like https://clarifai.com/zeiler/app/modules/module1/versions/2 to split it apart into it's IDs.\n   *\n   * @param install The module UI URL.\n   * @returns A tuple containing userId, appId, moduleId, and moduleVersionId.\n   */\n  static splitModuleUiUrl(\n    install: ClarifaiModuleUrl,\n  ): [string, string, string, string] {\n    const [userId, appId, resourceType, resourceId, resourceVersionId] =\n      this.splitClarifaiUrl(install);\n    if (resourceType !== \"modules\") {\n      throw new Error(\"Provided install url must be a module.\");\n    }\n    if (resourceVersionId === undefined) {\n      throw new Error(\n        \"Provided install url must have 6 parts after the domain name.\",\n      );\n    }\n    return [userId, appId, resourceId, resourceVersionId];\n  }\n}\n","export const TRAINABLE_MODEL_TYPES = [\n  \"visual-classifier\",\n  \"visual-detector\",\n  \"visual-segmenter\",\n  \"visual-embedder\",\n  \"clusterer\",\n  \"text-classifier\",\n  \"embedding-classifier\",\n  \"text-to-text\",\n];\nexport const MAX_MODEL_PREDICT_INPUTS = 128;\n","import { z } from \"zod\";\n\nconst idValidator = z\n  .string()\n  .min(1)\n  .max(48)\n  .regex(/^[0-9A-Za-z]+([-_][0-9A-Za-z]+)*$/);\n\nconst hexIdValidator = z.preprocess(\n  (val) => (typeof val === \"string\" ? val.toLowerCase() : val),\n  z\n    .string()\n    .length(32)\n    .regex(/^[0-9a-f]{32}$/),\n);\n\nconst modelDoesNotHaveModelVersionIdAndOtherFields = (\n  model: Record<string, unknown>,\n): boolean => {\n  if (model.modelVersionId && modelHasOtherFields(model)) {\n    throw new Error(\n      `model should not set modelVersionId and other model fields: ${JSON.stringify(model)}; please remove modelVersionId or other model fields.`,\n    );\n  }\n  return true;\n};\n\nconst modelHasOtherFields = (model: Record<string, unknown>): boolean => {\n  return Object.keys(model).some(\n    (key) => key !== \"modelId\" && key !== \"modelVersionId\",\n  );\n};\n\nconst workflowNodesHaveValidDependencies = <\n  T extends { id: string; nodeInputs?: K[] },\n  K extends { nodeId: string },\n>(\n  nodes: Array<T>,\n): boolean => {\n  const nodeIds = new Set();\n  for (const node of nodes) {\n    (node.nodeInputs || []).forEach((nodeInput) => {\n      if (!nodeIds.has(nodeInput.nodeId)) {\n        throw new Error(\n          `missing input '${nodeInput.nodeId}' for node '${node.id}'`,\n        );\n      }\n    });\n    nodeIds.add(node.id);\n  }\n  return true;\n};\n\nconst dataSchema = z.object({\n  workflow: z.object({\n    id: idValidator,\n    nodes: z\n      .array(\n        z.object({\n          id: z.string().min(1),\n          model: z\n            .object({\n              modelId: idValidator,\n              appId: idValidator.optional(),\n              userId: idValidator.optional(),\n              modelVersionId: hexIdValidator.optional(),\n              modelTypeId: idValidator.optional(),\n              description: z.string().optional(),\n              outputInfo: z\n                .object({\n                  params: z.record(z.any()).optional(),\n                })\n                .optional(),\n            })\n            .refine(modelDoesNotHaveModelVersionIdAndOtherFields),\n          nodeInputs: z\n            .array(\n              z.object({\n                nodeId: z.string().min(1),\n              }),\n            )\n            .optional(),\n        }),\n      )\n      .refine(workflowNodesHaveValidDependencies),\n  }),\n});\n\n// Function to validate data\nexport const validateWorkflow = (data: unknown) => {\n  return dataSchema.parse(data);\n};\n","import {\n  Model,\n  OutputInfo,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/resources_pb\";\nimport {\n  JavaScriptValue,\n  Struct,\n} from \"google-protobuf/google/protobuf/struct_pb\";\n\ninterface YamlModelOutputInfo {\n  params?: Record<string, JavaScriptValue>;\n}\n\ntype YamlModel = Record<string, unknown>;\n\nexport function getYamlOutputInfoProto(\n  yamlModelOutputInfo: YamlModelOutputInfo,\n): OutputInfo | undefined {\n  if (!yamlModelOutputInfo?.params) {\n    return undefined;\n  }\n\n  return new OutputInfo().setParams(\n    convertYamlParamsToApiParams(yamlModelOutputInfo.params),\n  );\n}\n\nfunction convertYamlParamsToApiParams(\n  yamlParams: YamlModelOutputInfo[\"params\"],\n): Struct | undefined {\n  if (!yamlParams) {\n    return undefined;\n  }\n\n  return Struct.fromJavaScript(yamlParams);\n}\n\nexport function isSameYamlModel(\n  apiModel: Model.AsObject,\n  yamlModel: YamlModel,\n): boolean {\n  const yamlModelFromApi: YamlModel = {};\n  for (const [key] of Object.entries(yamlModel)) {\n    if (key === \"outputInfo\" && apiModel.modelVersion?.outputInfo?.params) {\n      yamlModelFromApi[key] = {\n        params: apiModel.modelVersion.outputInfo.params,\n      };\n    } else {\n      // @ts-expect-error - key will be available in apiModelObject\n      yamlModelFromApi[key] = apiModel?.[key];\n    }\n  }\n  yamlModelFromApi.modelId = apiModel.id;\n\n  const ignoreKeys: Set<string> = new Set();\n\n  return isDictInDict(yamlModel, yamlModelFromApi, ignoreKeys);\n}\n\nfunction isDictInDict(\n  dictionary1: Record<string, unknown>,\n  dictionary2: Record<string, unknown>,\n  ignoreKeys?: Set<string>,\n): boolean {\n  for (const [key, value] of Object.entries(dictionary1)) {\n    if (ignoreKeys && ignoreKeys.has(key)) {\n      continue;\n    }\n    if (!(key in dictionary2)) {\n      return false;\n    }\n    if (typeof value === \"object\" && value !== null) {\n      if (typeof dictionary2[key] !== \"object\" || dictionary2[key] === null) {\n        return false;\n      }\n      return isDictInDict(\n        value as Record<string, unknown>,\n        dictionary2[key] as Record<string, unknown>,\n      );\n    } else if (value !== dictionary2[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {\n  DeleteModelVersionRequest,\n  GetModelRequest,\n  ListModelTypesRequest,\n  ListModelVersionsRequest,\n  MultiModelVersionResponse,\n  MultiOutputResponse,\n  PostModelOutputsRequest,\n  PostModelVersionsRequest,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/service_pb\";\nimport { UserError } from \"../errors\";\nimport { ClarifaiUrl, ClarifaiUrlHelper } from \"../urls/helper\";\nimport { BackoffIterator, promisifyGrpcCall } from \"../utils/misc\";\nimport { AuthConfig } from \"../utils/types\";\nimport { Lister } from \"./lister\";\nimport {\n  Model as GrpcModel,\n  Input as GrpcInput,\n  ModelVersion,\n  OutputConfig,\n  OutputInfo,\n  UserAppIDSet,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/resources_pb\";\nimport { StatusCode } from \"clarifai-nodejs-grpc/proto/clarifai/api/status/status_code_pb\";\nimport {\n  MAX_MODEL_PREDICT_INPUTS,\n  TRAINABLE_MODEL_TYPES,\n} from \"../constants/model\";\nimport {\n  findAndReplaceKey,\n  responseToModelParams,\n  responseToParamInfo,\n  responseToTemplates,\n} from \"../utils/modelTrain\";\nimport * as fs from \"fs\";\nimport * as yaml from \"js-yaml\";\nimport { Input } from \"./input\";\nimport {\n  JavaScriptValue,\n  Struct,\n} from \"google-protobuf/google/protobuf/struct_pb\";\n\ninterface BaseModelConfig {\n  modelVersion?: { id: string };\n}\n\ninterface ModelConfigWithUrl extends BaseModelConfig {\n  url: ClarifaiUrl;\n  modelId?: undefined;\n  authConfig?: Omit<AuthConfig, \"userId\" | \"appId\">;\n  modelUserAppId?: undefined;\n}\n\ninterface ModelConfigWithModelId extends BaseModelConfig {\n  url?: undefined;\n  modelId: string;\n  authConfig?: AuthConfig;\n  modelUserAppId?: {\n    userId: string;\n    appId: string;\n  };\n}\n\ntype ModelConfig = ModelConfigWithUrl | ModelConfigWithModelId;\n\nconst isModelConfigWithUrl = (\n  config: ModelConfig,\n): config is ModelConfigWithUrl => {\n  return (config as ModelConfigWithUrl).url !== undefined;\n};\n\n/**\n * Model is a class that provides access to Clarifai API endpoints related to Model information.\n * @noInheritDoc\n */\nexport class Model extends Lister {\n  private appId: string;\n  private id: string;\n  private modelUserAppId: UserAppIDSet | undefined;\n  private modelVersion: { id: string } | undefined;\n  public modelInfo: GrpcModel;\n  private trainingParams: Record<string, unknown>;\n\n  /**\n   * Initializes a Model object.\n   *\n   * @param url - The URL to initialize the model object.\n   * @param modelId - The Model ID to interact with.\n   * @param modelVersion - The Model Version to interact with.\n   * @param authConfig - Authentication configuration options.\n   * @param authConfig.baseURL - Base API URL. Default is \"https://api.clarifai.com\".\n   * @param authConfig.pat - A personal access token for authentication. Can be set as env var CLARIFAI_PAT.\n   * @param authConfig.token - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN.\n   *\n   * @includeExample examples/model/index.ts\n   */\n  constructor(config: ModelConfig) {\n    const { modelId, modelVersion, modelUserAppId } = config;\n    if (config.url && config.modelId) {\n      throw new UserError(\"You can only specify one of url or model_id.\");\n    }\n    if (config.url && modelUserAppId) {\n      throw new UserError(\"You can only specify one of url or modelUserAppId.\");\n    }\n    if (!config.url && !config.modelId) {\n      throw new UserError(\"You must specify one of url or model_id.\");\n    }\n\n    let _authConfig: AuthConfig,\n      _destructuredModelId: string = \"\",\n      _destructuredModelVersionId: string | undefined = undefined;\n    if (isModelConfigWithUrl(config)) {\n      const { url } = config;\n      const [userId, appId] = ClarifaiUrlHelper.splitClarifaiUrl(url);\n      [, , , _destructuredModelId, _destructuredModelVersionId] =\n        ClarifaiUrlHelper.splitClarifaiUrl(url);\n      _authConfig = config.authConfig\n        ? {\n            ...config.authConfig,\n            userId,\n            appId,\n          }\n        : {\n            userId,\n            appId,\n            pat: process.env.CLARIFAI_PAT!,\n          };\n    } else {\n      // if authconfig is undefined, we pick the values from env\n      _authConfig = config.authConfig || {\n        pat: process.env.CLARIFAI_PAT!,\n        userId: process.env.CLARIFAI_USER_ID!,\n        appId: process.env.CLARIFAI_APP_ID!,\n      };\n    }\n\n    super({ authConfig: _authConfig });\n    this.appId = _authConfig.appId;\n    this.modelVersion =\n      modelVersion ||\n      (_destructuredModelVersionId\n        ? { id: _destructuredModelVersionId }\n        : undefined);\n    this.id = modelId || _destructuredModelId;\n    this.modelInfo = new GrpcModel();\n    const grpcModelVersion = new ModelVersion();\n    if (this.modelVersion) {\n      grpcModelVersion.setId(this.modelVersion.id);\n    }\n    this.modelInfo.setAppId(this.appId);\n    this.modelInfo.setId(this.id);\n    if (this.modelVersion) {\n      this.modelInfo.setModelVersion(grpcModelVersion);\n    }\n    this.trainingParams = {};\n    this.modelUserAppId = new UserAppIDSet()\n      .setAppId(_authConfig.appId)\n      .setUserId(_authConfig.userId);\n  }\n\n  /**\n   * Loads the current model info.\n   * Usually called internally by other methods, to ensure the model info is loaded with latest data.\n   */\n  async loadInfo() {\n    const getModel = promisifyGrpcCall(\n      this.STUB.client.getModel,\n      this.STUB.client,\n    );\n    const request = new GetModelRequest();\n    if (this.modelUserAppId) {\n      request.setUserAppId(this.modelUserAppId);\n    } else {\n      request.setUserAppId(this.userAppId);\n    }\n    request.setModelId(this.id);\n    if (this.modelVersion?.id) request.setVersionId(this.modelVersion.id);\n\n    const response = await this.grpcRequest(getModel, request);\n    const responseObject = response.toObject();\n\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(\n        `Failed to get model: ${responseObject.status} : ${responseObject.status?.description}`,\n      );\n    }\n\n    this.modelInfo = new GrpcModel();\n    if (responseObject.model?.id) {\n      this.modelInfo.setId(responseObject.model?.id);\n    }\n    if (responseObject.model?.appId) {\n      this.modelInfo.setAppId(responseObject.model?.id);\n    }\n    const grpcModelVersion = new ModelVersion();\n    if (responseObject.model?.modelVersion?.id) {\n      grpcModelVersion.setId(responseObject.model?.modelVersion?.id);\n    }\n    this.modelInfo.setModelVersion(grpcModelVersion);\n  }\n\n  /**\n   * Lists all the training templates for the model type.\n   * @returns - A promise that resolves to a list of training templates for the model type.\n   *\n   * @includeExample examples/model/listTrainingTemplates.ts\n   */\n  async listTrainingTemplates(): Promise<string[]> {\n    if (!this.modelInfo.getModelTypeId()) {\n      await this.loadInfo();\n    }\n    if (!TRAINABLE_MODEL_TYPES.includes(this.modelInfo.getModelTypeId())) {\n      throw new Error(\n        `Model type ${this.modelInfo.getModelTypeId()} is not trainable`,\n      );\n    }\n\n    const request = new ListModelTypesRequest();\n    if (this.modelUserAppId) {\n      request.setUserAppId(this.modelUserAppId);\n    } else {\n      request.setUserAppId(this.userAppId);\n    }\n\n    const listModelTypes = promisifyGrpcCall(\n      this.STUB.client.listModelTypes,\n      this.STUB.client,\n    );\n\n    const response = await this.grpcRequest(listModelTypes, request);\n    const responseObject = response.toObject();\n\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.toString());\n    }\n\n    const templates = responseToTemplates(\n      responseObject,\n      this.modelInfo.getModelTypeId(),\n    );\n\n    return templates;\n  }\n\n  /**\n   * Returns the model params for the model type as object & also writes to a yaml file\n   * @param template - The training template to use for the model type.\n   * @param saveTo - The file path to save the yaml file.\n   * @returns - A promise that resolves to the model params for the model type.\n   *\n   * @includeExample examples/model/getParams.ts\n   */\n  async getParams(\n    template: string | null = null,\n    saveTo: string = \"params.yaml\",\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<Record<string, any>> {\n    if (!this.modelInfo.getModelTypeId()) {\n      await this.loadInfo();\n    }\n    if (!TRAINABLE_MODEL_TYPES.includes(this.modelInfo.getModelTypeId())) {\n      throw new Error(\n        `Model type ${this.modelInfo.getModelTypeId()} is not trainable`,\n      );\n    }\n    if (\n      template === null &&\n      ![\"clusterer\", \"embedding-classifier\"].includes(\n        this.modelInfo.getModelTypeId(),\n      )\n    ) {\n      throw new Error(\n        `Template should be provided for ${this.modelInfo.getModelTypeId()} model type`,\n      );\n    }\n    if (\n      template !== null &&\n      [\"clusterer\", \"embedding-classifier\"].includes(\n        this.modelInfo.getModelTypeId(),\n      )\n    ) {\n      throw new Error(\n        `Template should not be provided for ${this.modelInfo.getModelTypeId()} model type`,\n      );\n    }\n\n    const request = new ListModelTypesRequest();\n    if (this.modelUserAppId) {\n      request.setUserAppId(this.modelUserAppId);\n    } else {\n      request.setUserAppId(this.userAppId);\n    }\n\n    const listModelTypes = promisifyGrpcCall(\n      this.STUB.client.listModelTypes,\n      this.STUB.client,\n    );\n\n    const response = await this.grpcRequest(listModelTypes, request);\n    const responseObject = response.toObject();\n\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.toString());\n    }\n\n    const params = responseToModelParams(\n      responseObject,\n      this.modelInfo.getModelTypeId(),\n      template,\n    );\n\n    // yaml file\n    if (!saveTo.endsWith(\".yaml\")) {\n      throw new Error(\"File extension should be .yaml\");\n    }\n\n    fs.writeFileSync(saveTo, yaml.dump(params, { noRefs: true }));\n\n    this.trainingParams = { ...this.trainingParams, ...params };\n\n    return params;\n  }\n\n  /**\n   * Updates the model params for the model.\n   * @param modelParams - The model params to update.\n   *\n   * @includeExample examples/model/updateParams.ts\n   */\n  updateParams(modelParams: Record<string, unknown>): void {\n    if (!TRAINABLE_MODEL_TYPES.includes(this.modelInfo.getModelTypeId())) {\n      throw new UserError(\n        `Model type ${this.modelInfo.getModelTypeId()} is not trainable`,\n      );\n    }\n    if (Object.keys(this.trainingParams).length === 0) {\n      throw new UserError(\n        `Run 'model.getParams' to get the params for the ${this.modelInfo.getModelTypeId()} model type`,\n      );\n    }\n    const allKeys = [\n      ...Object.keys(this.trainingParams),\n      ...Object.values(this.trainingParams)\n        .filter((value) => typeof value === \"object\")\n        .flatMap((value) => Object.keys(value as Record<string, unknown>)),\n    ];\n    if (!Object.keys(modelParams).every((key) => allKeys.includes(key))) {\n      throw new UserError(\"Invalid params\");\n    }\n    for (const [key, value] of Object.entries(modelParams)) {\n      findAndReplaceKey(this.trainingParams, key, value);\n    }\n  }\n\n  /**\n   * Returns the param info for the model.\n   *\n   * @includeExample examples/model/getParamInfo.ts\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async getParamInfo(param: string): Promise<Record<string, any>> {\n    if (!TRAINABLE_MODEL_TYPES.includes(this.modelInfo.getModelTypeId())) {\n      throw new UserError(\n        `Model type ${this.modelInfo.getModelTypeId()} is not trainable`,\n      );\n    }\n    if (Object.keys(this.trainingParams).length === 0) {\n      throw new UserError(\n        `Run 'model.getParams' to get the params for the ${this.modelInfo.getModelTypeId()} model type`,\n      );\n    }\n\n    const allKeys = [\n      ...Object.keys(this.trainingParams),\n      ...Object.values(this.trainingParams)\n        .filter((value) => typeof value === \"object\")\n        .flatMap((value) => Object.keys(value as Record<string, unknown>)),\n    ];\n    if (!allKeys.includes(param)) {\n      throw new UserError(\n        `Invalid param: '${param}' for model type '${this.modelInfo.getModelTypeId()}'`,\n      );\n    }\n    const template =\n      // @ts-expect-error - train_params isn't typed yet\n      this.trainingParams?.[\"train_params\"]?.[\"template\"] ?? null;\n\n    const request = new ListModelTypesRequest();\n    if (this.modelUserAppId) {\n      request.setUserAppId(this.modelUserAppId);\n    } else {\n      request.setUserAppId(this.userAppId);\n    }\n\n    const listModelTypes = promisifyGrpcCall(\n      this.STUB.client.listModelTypes,\n      this.STUB.client,\n    );\n\n    const response = await this.grpcRequest(listModelTypes, request);\n    const responseObject = response.toObject();\n\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.toString());\n    }\n    const paramInfo = responseToParamInfo(\n      responseObject,\n      this.modelInfo.getModelTypeId(),\n      param,\n      template,\n    );\n\n    if (!paramInfo) {\n      throw new Error(\"Failed to fetch params info\");\n    }\n\n    return paramInfo;\n  }\n\n  /**\n   * Deletes a model version for the Model.\n   *\n   * @param versionId - The version ID to delete.\n   *\n   * @includeExample examples/model/deleteVersion.ts\n   */\n  async deleteVersion(versionId: string): Promise<void> {\n    const request = new DeleteModelVersionRequest();\n    if (this.modelUserAppId) {\n      request.setUserAppId(this.modelUserAppId);\n    } else {\n      request.setUserAppId(this.userAppId);\n    }\n    request.setModelId(this.id);\n    request.setVersionId(versionId);\n\n    const deleteModelVersion = promisifyGrpcCall(\n      this.STUB.client.deleteModelVersion,\n      this.STUB.client,\n    );\n\n    const response = await this.grpcRequest(deleteModelVersion, request);\n\n    const responseObject = response.toObject();\n\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.toString());\n    }\n  }\n\n  /**\n   * Creates a model version for the Model.\n   *\n   * @includeExample examples/model/createVersion.ts\n   */\n  async createVersion(\n    modelVersion: ModelVersion,\n  ): Promise<GrpcModel.AsObject | undefined> {\n    if (this.modelInfo.getModelTypeId() in TRAINABLE_MODEL_TYPES) {\n      throw new UserError(\n        `${this.modelInfo.getModelTypeId()} is a trainable model type. Use 'model.train()' to train the model`,\n      );\n    }\n\n    const request = new PostModelVersionsRequest();\n    if (this.modelUserAppId) {\n      request.setUserAppId(this.modelUserAppId);\n    } else {\n      request.setUserAppId(this.userAppId);\n    }\n    request.setModelId(this.id);\n    request.setModelVersionsList([modelVersion]);\n\n    const postModelVersions = promisifyGrpcCall(\n      this.STUB.client.postModelVersions,\n      this.STUB.client,\n    );\n\n    const response = await this.grpcRequest(postModelVersions, request);\n\n    const responseObject = response.toObject();\n\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n\n    return responseObject.model;\n  }\n\n  /**\n   * Lists all the versions for the model.\n   *\n   * @includeExample examples/model/listVersions.ts\n   *\n   * @remarks\n   * Defaults to 16 per page if pageNo is not specified\n   */\n  async *listVersions({\n    pageNo,\n    perPage,\n  }: {\n    pageNo?: number;\n    perPage?: number;\n  } = {}): AsyncGenerator<\n    MultiModelVersionResponse.AsObject[\"modelVersionsList\"],\n    void,\n    void\n  > {\n    const request = new ListModelVersionsRequest();\n    if (this.modelUserAppId) {\n      request.setUserAppId(this.modelUserAppId);\n    } else {\n      request.setUserAppId(this.userAppId);\n    }\n    request.setModelId(this.id);\n\n    const listModelVersions = promisifyGrpcCall(\n      this.STUB.client.listModelVersions,\n      this.STUB.client,\n    );\n\n    const allModelVersionsInfo = this.listPagesGenerator(\n      listModelVersions,\n      request,\n      perPage,\n      pageNo,\n    );\n\n    for await (const modelVersionInfo of allModelVersionsInfo) {\n      yield modelVersionInfo.toObject().modelVersionsList;\n    }\n  }\n\n  /**\n   * Predicts the model based on the given inputs.\n   * Use the `Input` module to create the input objects.\n   *\n   * @param inputs - The inputs to predict, must be less than 128.\n   * @param inferenceParams - The inference params to override.\n   * @param outputConfig - The output config to override.\n   *  min_value (number) - The minimum value of the prediction confidence to filter.\n   *  max_concepts (number) - The maximum number of concepts to return.\n   *  select_concepts (Concept[]) - The concepts to select.\n   *  sample_ms (number) - The number of milliseconds to sample.\n   * @returns - A promise that resolves to the model prediction.\n   *\n   * @includeExample examples/model/predict.ts\n   */\n  async predict({\n    inputs,\n    inferenceParams,\n    outputConfig,\n  }: {\n    inputs: GrpcInput[];\n    inferenceParams?: Record<string, JavaScriptValue>;\n    outputConfig?: OutputConfig;\n  }): Promise<MultiOutputResponse.AsObject[\"outputsList\"]> {\n    if (!Array.isArray(inputs)) {\n      throw new Error(\n        \"Invalid inputs, inputs must be an array of Input objects.\",\n      );\n    }\n    if (inputs.length > MAX_MODEL_PREDICT_INPUTS) {\n      throw new Error(`Too many inputs. Max is ${MAX_MODEL_PREDICT_INPUTS}.`);\n    }\n\n    this.overrideModelVersion({ inferenceParams, outputConfig });\n    const requestInputs: GrpcInput[] = [];\n    for (const input of inputs) {\n      requestInputs.push(input);\n    }\n\n    const request = new PostModelOutputsRequest();\n    if (this.modelUserAppId) {\n      request.setUserAppId(this.modelUserAppId);\n    } else {\n      request.setUserAppId(this.userAppId);\n    }\n    request.setModelId(this.id);\n    if (this.modelVersion && this.modelVersion.id)\n      request.setVersionId(this.modelVersion.id);\n    request.setInputsList(requestInputs);\n    request.setModel(this.modelInfo);\n\n    const startTime = Date.now();\n    const backoffIterator = new BackoffIterator();\n    return new Promise<MultiOutputResponse.AsObject[\"outputsList\"]>(\n      (resolve, reject) => {\n        const makeRequest = () => {\n          const postModelOutputs = promisifyGrpcCall(\n            this.STUB.client.postModelOutputs,\n            this.STUB.client,\n          );\n          this.grpcRequest(postModelOutputs, request)\n            .then((response) => {\n              const responseObject = response.toObject();\n              if (\n                responseObject.status?.code === StatusCode.MODEL_DEPLOYING &&\n                Date.now() - startTime < 600000\n              ) {\n                console.log(\n                  `${this.id} model is still deploying, please wait...`,\n                );\n                setTimeout(makeRequest, backoffIterator.next().value * 1000);\n              } else if (responseObject.status?.code !== StatusCode.SUCCESS) {\n                reject(\n                  new Error(\n                    `Model Predict failed with response ${responseObject.status?.toString()}`,\n                  ),\n                );\n              } else {\n                resolve(response.toObject().outputsList);\n              }\n            })\n            .catch((error) => {\n              reject(\n                new Error(`Model Predict failed with error: ${error.message}`),\n              );\n            });\n        };\n        makeRequest();\n      },\n    );\n  }\n\n  /**\n   * Predicts the model based on the given inputs.\n   * Inputs can be provided as a URL.\n   * @param url - The URL of the input.\n   * @param inputType - The type of the input. Can be \"image\", \"text\", \"video\", or \"audio\".\n   * @param inferenceParams - The inference params to override.\n   * @param outputConfig - The output config to override.\n   * @returns - A promise that resolves to the model prediction.\n   */\n  predictByUrl({\n    url,\n    inputType,\n    inferenceParams,\n    outputConfig,\n  }: {\n    url: string;\n    inputType: \"image\" | \"text\" | \"video\" | \"audio\";\n    inferenceParams?: Record<string, JavaScriptValue>;\n    outputConfig?: OutputConfig;\n  }): Promise<MultiOutputResponse.AsObject[\"outputsList\"]> {\n    let inputProto: GrpcInput;\n    if (inputType === \"image\") {\n      inputProto = Input.getInputFromUrl({ inputId: \"\", imageUrl: url });\n    } else if (inputType === \"text\") {\n      inputProto = Input.getInputFromUrl({ inputId: \"\", textUrl: url });\n    } else if (inputType === \"video\") {\n      inputProto = Input.getInputFromUrl({ inputId: \"\", videoUrl: url });\n    } else if (inputType === \"audio\") {\n      inputProto = Input.getInputFromUrl({ inputId: \"\", audioUrl: url });\n    } else {\n      throw new Error(\n        `Got input type ${inputType} but expected one of image, text, video, audio.`,\n      );\n    }\n\n    return this.predict({\n      inputs: [inputProto],\n      inferenceParams,\n      outputConfig,\n    });\n  }\n\n  /**\n   * Predicts the model based on the given inputs.\n   * Inputs can be provided as a filepath which can be read.\n   * @param filepath - The filepath of the input.\n   * @param inputType - The type of the input. Can be \"image\", \"text\", \"video\", or \"audio\".\n   * @param inferenceParams - The inference params to override.\n   * @param outputConfig - The output config to override.\n   * @returns - A promise that resolves to the model prediction.\n   */\n  predictByFilepath({\n    filepath,\n    inputType,\n    inferenceParams,\n    outputConfig,\n  }: {\n    filepath: string;\n    inputType: \"image\" | \"text\" | \"video\" | \"audio\";\n    inferenceParams?: Record<string, JavaScriptValue>;\n    outputConfig?: OutputConfig;\n  }): Promise<MultiOutputResponse.AsObject[\"outputsList\"]> {\n    if (!fs.existsSync(filepath)) {\n      throw new Error(\"Invalid filepath.\");\n    }\n\n    const fileBuffer = fs.readFileSync(filepath);\n\n    return this.predictByBytes({\n      inputBytes: fileBuffer,\n      inputType,\n      inferenceParams,\n      outputConfig,\n    });\n  }\n\n  /**\n   * Predicts the model based on the given inputs.\n   * Inputs can be provided as a Buffer.\n   * @param inputBytes - Input as a buffer.\n   * @param inputType - The type of the input. Can be \"image\", \"text\", \"video\", or \"audio\".\n   * @param inferenceParams - The inference params to override.\n   * @param outputConfig - The output config to override.\n   * @returns - A promise that resolves to the model prediction.\n   */\n  predictByBytes({\n    inputBytes,\n    inputType,\n    inferenceParams,\n    outputConfig,\n  }: {\n    inputBytes: Buffer;\n    inputType: \"image\" | \"text\" | \"video\" | \"audio\";\n    inferenceParams?: Record<string, JavaScriptValue>;\n    outputConfig?: OutputConfig;\n  }): Promise<MultiOutputResponse.AsObject[\"outputsList\"]> {\n    if (!(inputBytes instanceof Buffer)) {\n      throw new Error(\"Invalid bytes.\");\n    }\n\n    let inputProto: GrpcInput;\n    if (inputType === \"image\") {\n      inputProto = Input.getInputFromBytes({\n        inputId: \"\",\n        imageBytes: inputBytes,\n      });\n    } else if (inputType === \"text\") {\n      inputProto = Input.getInputFromBytes({\n        inputId: \"\",\n        textBytes: inputBytes,\n      });\n    } else if (inputType === \"video\") {\n      inputProto = Input.getInputFromBytes({\n        inputId: \"\",\n        videoBytes: inputBytes,\n      });\n    } else if (inputType === \"audio\") {\n      inputProto = Input.getInputFromBytes({\n        inputId: \"\",\n        audioBytes: inputBytes,\n      });\n    } else {\n      throw new Error(\n        `Got input type ${inputType} but expected one of image, text, video, audio.`,\n      );\n    }\n\n    return this.predict({\n      inputs: [inputProto],\n      inferenceParams,\n      outputConfig,\n    });\n  }\n\n  /**\n   * Overrides the model version.\n   *\n   * @param inferenceParams - The inference params to override.\n   * @param outputConfig - The output config to override.\n   *   min_value (number) - The minimum value of the prediction confidence to filter.\n   *   max_concepts (number) - The maximum number of concepts to return.\n   *   select_concepts (Concept[]) - The concepts to select.\n   *   sample_ms (number) - The number of milliseconds to sample.\n   */\n  private overrideModelVersion({\n    inferenceParams,\n    outputConfig,\n  }: {\n    inferenceParams?: Record<string, JavaScriptValue>;\n    outputConfig?: OutputConfig;\n  }): void {\n    let currentModelVersion = this.modelInfo.getModelVersion();\n    if (!currentModelVersion) {\n      currentModelVersion = new ModelVersion();\n    }\n    let currentOutputInfo = currentModelVersion?.getOutputInfo();\n    if (!currentOutputInfo) {\n      currentOutputInfo = new OutputInfo();\n    }\n    if (outputConfig) {\n      const newOutputInfo = currentOutputInfo.setOutputConfig(outputConfig);\n      currentModelVersion?.setOutputInfo(newOutputInfo);\n      this.modelInfo.setModelVersion(currentModelVersion);\n    }\n    const updatedModelVersion = this.modelInfo.getModelVersion();\n    const updatedOutputInfo = updatedModelVersion?.getOutputInfo();\n    if (updatedOutputInfo && inferenceParams) {\n      const params = Struct.fromJavaScript(inferenceParams);\n      updatedOutputInfo.setParams(params);\n      updatedModelVersion?.setOutputInfo(updatedOutputInfo);\n      this.modelInfo.setModelVersion(updatedModelVersion);\n    }\n  }\n}\n","import { MultiModelTypeResponse } from \"clarifai-nodejs-grpc/proto/clarifai/api/service_pb\";\nimport { writeFileSync } from \"fs\";\n\n/**\n * Converts the response from the API to a list of templates for the given model type id.\n */\nexport function responseToTemplates(\n  response: MultiModelTypeResponse.AsObject,\n  modelTypeId: string,\n): string[] {\n  let templates: string[] = [];\n  for (const modelType of response.modelTypesList) {\n    if (modelType.id === modelTypeId) {\n      for (const modelTypeField of modelType.modelTypeFieldsList) {\n        if (modelTypeField.path.split(\".\").pop() === \"template\") {\n          templates = modelTypeField.modelTypeEnumOptionsList.map(\n            (template) => template.id,\n          );\n        }\n      }\n    }\n  }\n  return templates;\n}\n\n/**\n * Converts the response from the API to a dictionary of model params for the given model type id.\n */\nexport function responseToModelParams(\n  response: MultiModelTypeResponse.AsObject,\n  modelTypeId: string,\n  template: string | null = null,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): Record<string, any> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const params: Record<string, any> = {};\n  if (modelTypeId !== \"clusterer\") {\n    params[\"dataset_id\"] = \"\";\n    params[\"dataset_version_id\"] = \"\";\n  }\n  if (![\"clusterer\", \"text-to-text\"].includes(modelTypeId)) {\n    params[\"concepts\"] = [];\n  }\n  params[\"train_params\"] = {};\n\n  for (const modelType of response.modelTypesList) {\n    if (modelType.id === modelTypeId) {\n      for (const modelTypeField of modelType.modelTypeFieldsList) {\n        const pathParts = modelTypeField.path.split(\".\");\n        if (\n          pathParts[0] === \"'eval_info'\" ||\n          pathParts[1] === \"dataset\" ||\n          pathParts[1] === \"data\" ||\n          pathParts[pathParts.length - 1] === \"dataset_id\" ||\n          pathParts[pathParts.length - 1] === \"dataset_version_id\" ||\n          modelTypeField.internalOnly\n        ) {\n          continue;\n        }\n        if (pathParts[pathParts.length - 1] !== \"template\") {\n          if (pathParts[0] === \"train_info\" || pathParts[0] === \"input_info\") {\n            params[\"train_params\"][pathParts[pathParts.length - 1]] =\n              modelTypeField.defaultValue ?? null;\n          }\n          if (pathParts[0] === \"output_info\") {\n            params[\"inference_params\"] = {};\n            params[\"inference_params\"][pathParts[pathParts.length - 1]] =\n              modelTypeField.defaultValue ?? null;\n          }\n        } else {\n          if (modelTypeField.modelTypeEnumOptionsList) {\n            const allTemplates = modelTypeField.modelTypeEnumOptionsList.map(\n              (template) => template.id,\n            );\n            if (!allTemplates.includes(template!)) {\n              throw new Error(\n                `Invalid template ${template} for model type ${modelTypeId}. Valid templates are ${allTemplates}`,\n              );\n            }\n            for (const modelTypeEnum of modelTypeField.modelTypeEnumOptionsList) {\n              if (modelTypeEnum.id === template) {\n                params[\"train_params\"][\"template\"] = modelTypeEnum.id;\n                for (const modelTypeEnumField of modelTypeEnum.modelTypeFieldsList) {\n                  if (modelTypeEnumField.internalOnly) {\n                    continue;\n                  }\n                  params[\"train_params\"][\n                    modelTypeEnumField.path.split(\".\").pop()!\n                  ] = modelTypeEnumField.defaultValue ?? null;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  if (\"custom_config\" in params[\"train_params\"]) {\n    const filePath = params[\"train_params\"][\"template\"] + \".py\";\n    writeFileSync(filePath, params[\"train_params\"][\"custom_config\"]);\n    params[\"train_params\"][\"custom_config\"] = filePath;\n  }\n  return params;\n}\n\n/** Finds and replaces the target key with the replacement value in the nested dictionary. */\nexport function findAndReplaceKey(\n  nestedDict: Record<string, unknown>,\n  targetKey: string,\n  replacementValue: unknown,\n): void {\n  Object.entries(nestedDict).forEach(([key, value]) => {\n    if (key === targetKey) {\n      nestedDict[key] = replacementValue;\n    } else if (\n      typeof value === \"object\" &&\n      value !== null &&\n      !Array.isArray(value)\n    ) {\n      findAndReplaceKey(\n        value as Record<string, unknown>,\n        targetKey,\n        replacementValue,\n      );\n    }\n  });\n}\n\n/**\n * Converts the response from the API to a dictionary of model param info for the given model type id.\n */\nexport function responseToParamInfo(\n  response: MultiModelTypeResponse.AsObject,\n  modelTypeId: string,\n  param: string,\n  template: string | null = null,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): Record<string, any> | void {\n  for (const modelType of response.modelTypesList) {\n    if (modelType.id === modelTypeId) {\n      // iterate through the model type fields\n      for (const modelTypeField of modelType.modelTypeFieldsList) {\n        if (modelTypeField.path.split(\".\").pop() === param) {\n          if (param === \"template\") {\n            // @ts-expect-error placehoder needs to be deleted\n            delete modelTypeField.placeholder;\n            // @ts-expect-error modelTypeEnumOptionsList needs to be deleted\n            delete modelTypeField.modelTypeEnumOptionsList;\n            return modelTypeField;\n          }\n          // @ts-expect-error params have to be attached to modelTypeField\n          modelTypeField.param = modelTypeField.path.split(\".\").pop();\n          // @ts-expect-error placehoder needs to be deleted\n          delete modelTypeField.placeholder;\n          return modelTypeField;\n        }\n        // checking the template model type fields\n        if (modelTypeField.path.split(\".\").pop() === \"template\") {\n          for (const modelTypeEnum of modelTypeField.modelTypeEnumOptionsList) {\n            if (modelTypeEnum.id === template) {\n              // iterate through the template fields\n              for (const modelTypeEnumField of modelTypeEnum.modelTypeFieldsList) {\n                if (modelTypeEnumField.path.split(\".\").pop() === param) {\n                  // @ts-expect-error params have to be attached to modelTypeEnumField\n                  modelTypeEnumField.param = modelTypeEnumField.path\n                    .split(\".\")\n                    .pop();\n                  // @ts-expect-error placehoder needs to be deleted\n                  delete modelTypeEnumField.placeholder;\n                  return modelTypeEnumField;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import {\n  Annotation,\n  Audio,\n  BoundingBox,\n  Concept,\n  Data,\n  Geo,\n  GeoPoint,\n  Input as GrpcInput,\n  Image,\n  Point,\n  Polygon,\n  Region,\n  RegionInfo,\n  Text,\n  Video,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/resources_pb\";\nimport { AuthConfig, Polygon as PolygonType } from \"../utils/types\";\nimport { Lister } from \"./lister\";\nimport { Buffer } from \"buffer\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { z } from \"zod\";\nimport {\n  JavaScriptValue,\n  Struct,\n} from \"google-protobuf/google/protobuf/struct_pb\";\nimport { parse } from \"csv-parse\";\nimport { finished } from \"stream/promises\";\nimport { v4 as uuid } from \"uuid\";\nimport {\n  CancelInputsAddJobRequest,\n  DeleteInputsRequest,\n  GetInputsAddJobRequest,\n  ListInputsRequest,\n  PatchInputsRequest,\n  PostAnnotationsRequest,\n  PostInputsRequest,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/service_pb\";\nimport { BackoffIterator, promisifyGrpcCall } from \"../utils/misc\";\nimport { StatusCode } from \"clarifai-nodejs-grpc/proto/clarifai/api/status/status_code_pb\";\nimport os from \"os\";\nimport chunk from \"lodash/chunk\";\nimport { Status } from \"clarifai-nodejs-grpc/proto/clarifai/api/status/status_pb\";\nimport async from \"async\";\nimport { MAX_RETRIES } from \"../constants/dataset\";\nimport { EventEmitter } from \"events\";\n\ninterface CSVRecord {\n  inputid: string;\n  input: string;\n  concepts: string;\n  metadata: string;\n  geopoints: string;\n}\n\ninterface UploadEvents {\n  start: ProgressEvent;\n  progress: ProgressEvent;\n  error: ErrorEvent;\n  end: ProgressEvent;\n}\n\ninterface ProgressEvent {\n  current: number;\n  total: number;\n}\n\ninterface ErrorEvent {\n  error: Error;\n}\n\ntype BulkUploadEventEmitter<T> = EventEmitter & {\n  emit<K extends keyof T>(event: K, payload: T[K]): boolean;\n  on<K extends keyof T>(event: K, listener: (payload: T[K]) => void): void;\n};\n\nexport type InputBulkUpload = BulkUploadEventEmitter<UploadEvents>;\n\n/**\n * Inputs is a class that provides access to Clarifai API endpoints related to Input information.\n * @noInheritDoc\n */\nexport class Input extends Lister {\n  private numOfWorkers: number = Math.min(os.cpus().length, 10);\n\n  /**\n   * Initializes an input object.\n   *\n   * @param params - The parameters for the Input object.\n   * @param params.userId - A user ID for authentication.\n   * @param params.appId - An app ID for the application to interact with.\n   * @param params.baseUrl - Base API url. Default \"https://api.clarifai.com\"\n   * @param params.pat - A personal access token for authentication. Can be set as env var CLARIFAI_PAT\n   * @param params.token - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN\n   *\n   * @includeExample examples/input/index.ts\n   */\n  constructor({ authConfig }: { authConfig?: AuthConfig }) {\n    super({ authConfig });\n  }\n\n  /**\n   * Create input proto for image data type.\n   *\n   * @param inputId - The input ID for the input to create.\n   * @param datasetId - The dataset ID for the dataset to add the input to.\n   * @param imagePb - The image proto to be used for the input.\n   * @param videoPb - The video proto to be used for the input.\n   * @param audioPb - The audio proto to be used for the input.\n   * @param textPb - The text proto to be used for the input.\n   * @param geoInfo - A list of longitude and latitude for the geo point.\n   * @param labels - A list of labels for the input.\n   * @param metadata - A Struct of metadata for the input.\n   * @returns - An Input object for the specified input ID.\n   */\n  private static getProto({\n    inputId,\n    datasetId = null,\n    imagePb = null,\n    videoPb = null,\n    audioPb = null,\n    textPb = null,\n    geoInfo = null,\n    labels = null,\n    metadata = null,\n  }: {\n    inputId: string;\n    datasetId?: string | null;\n    imagePb?:\n      | { base64: string; url?: undefined }\n      | { url: string; base64?: undefined }\n      | null;\n    videoPb?: { base64: string } | null;\n    audioPb?: { base64: string } | null;\n    textPb?: { raw: string } | null;\n    geoInfo?: GeoPoint.AsObject | null;\n    labels?: string[] | null;\n    metadata?: Record<string, JavaScriptValue> | null;\n  }): GrpcInput {\n    const geoInfoSchema = z\n      .array(\n        z.object({\n          latitude: z.number(),\n          longitude: z.number(),\n        }),\n      )\n      .or(z.null());\n\n    const labelsSchema = z.array(z.string()).or(z.null());\n\n    const metaDataSchema = z.record(z.string(), z.unknown()).or(z.null());\n\n    try {\n      geoInfoSchema.parse(geoInfo);\n    } catch {\n      throw new Error(\"geoInfo must be a list of longitude and latitude\");\n    }\n\n    try {\n      labelsSchema.parse(labels);\n    } catch {\n      throw new Error(\"labels must be a list of strings\");\n    }\n\n    try {\n      metaDataSchema.parse(metadata);\n    } catch {\n      throw new Error(\"metadata must be a valid object\");\n    }\n\n    const metadataStruct = metadata\n      ? Struct.fromJavaScript(metadata)\n      : undefined;\n\n    const geoPb = geoInfo\n      ? new Geo().setGeoPoint(\n          new GeoPoint()\n            .setLatitude(geoInfo.latitude)\n            .setLongitude(geoInfo.longitude),\n        )\n      : undefined;\n\n    const concepts =\n      labels?.map((_label) => {\n        return new Concept()\n          .setId(`id-${_label.replace(/\\s/g, \"\")}`)\n          .setName(_label)\n          .setValue(1);\n      }) ?? [];\n\n    const input = new GrpcInput().setId(inputId).setData(\n      new Data()\n        .setImage(\n          imagePb\n            ? imagePb.base64\n              ? new Image().setBase64(imagePb.base64)\n              : imagePb.url\n                ? new Image().setUrl(imagePb.url)\n                : undefined\n            : undefined,\n        )\n        .setVideo(videoPb ? new Video().setBase64(videoPb.base64) : undefined)\n        .setAudio(audioPb ? new Audio().setBase64(audioPb.base64) : undefined)\n        .setText(textPb ? new Text().setRaw(textPb.raw) : undefined)\n        .setGeo(geoPb)\n        .setConceptsList(concepts)\n        .setMetadata(metadataStruct),\n    );\n    if (datasetId) {\n      input.setDatasetIdsList([datasetId]);\n    }\n    return input;\n  }\n\n  /**\n   * Creates an input proto from bytes.\n   *\n   * @param inputId - The input ID for the input to create.\n   * @param imageBytes - The bytes for the image as `Uint8Array` or `null`.\n   * @param videoBytes - The bytes for the video as `Uint8Array` or `null`.\n   * @param audioBytes - The bytes for the audio as `Uint8Array` or `null`.\n   * @param textBytes - The bytes for the text as `Uint8Array` or `null`.\n   * @param datasetId - The dataset ID for the dataset to add the input to, can be `null`.\n   * @returns An `Input` object for the specified input ID.\n   *\n   * @includeExample examples/input/getInputFromBytes.ts\n   */\n  static getInputFromBytes({\n    inputId,\n    imageBytes = null,\n    videoBytes = null,\n    audioBytes = null,\n    textBytes = null,\n    datasetId = null,\n    geoInfo = null,\n    labels = null,\n    metadata = null,\n  }: {\n    inputId: string;\n    imageBytes?: Uint8Array | null;\n    videoBytes?: Uint8Array | null;\n    audioBytes?: Uint8Array | null;\n    textBytes?: Uint8Array | null;\n    datasetId?: string | null;\n    geoInfo?: GeoPoint.AsObject | null;\n    labels?: string[] | null;\n    metadata?: Record<string, JavaScriptValue> | null;\n  }): GrpcInput {\n    if (!(imageBytes || videoBytes || audioBytes || textBytes)) {\n      throw new Error(\n        \"At least one of image_bytes, video_bytes, audio_bytes, text_bytes must be provided.\",\n      );\n    }\n    const imagePb = imageBytes\n      ? { base64: Buffer.from(imageBytes).toString(\"base64\") }\n      : null;\n    const videoPb = videoBytes\n      ? { base64: Buffer.from(videoBytes).toString(\"base64\") }\n      : null;\n    const audioPb = audioBytes\n      ? { base64: Buffer.from(audioBytes).toString(\"base64\") }\n      : null;\n    const textPb = textBytes\n      ? { raw: Buffer.from(textBytes).toString(\"utf-8\") }\n      : null;\n    return this.getProto({\n      inputId,\n      datasetId,\n      imagePb,\n      videoPb,\n      audioPb,\n      textPb,\n      geoInfo,\n      labels,\n      metadata,\n    });\n  }\n\n  /**\n   * Create input proto from files.\n   *\n   * @param inputId - The input ID for the input to create.\n   * @param imageFile - The file path for the image.\n   * @param videoFile - The file path for the video.\n   * @param audioFile - The file path for the audio.\n   * @param textFile - The file path for the text.\n   * @param datasetId - The dataset ID for the dataset to add the input to.\n   * @returns - An Input object for the specified input ID.\n   *\n   * @includeExample examples/input/getInputFromFile.ts\n   */\n  static getInputFromFile({\n    inputId,\n    imageFile = null,\n    videoFile = null,\n    audioFile = null,\n    textFile = null,\n    datasetId = null,\n    geoInfo = null,\n    labels = null,\n    metadata = null,\n  }: {\n    inputId: string;\n    imageFile?: string | null;\n    videoFile?: string | null;\n    audioFile?: string | null;\n    textFile?: string | null;\n    datasetId?: string | null;\n    geoInfo?: GeoPoint.AsObject | null;\n    labels?: string[] | null;\n    metadata?: Record<string, JavaScriptValue> | null;\n  }): GrpcInput {\n    if (!(imageFile || videoFile || audioFile || textFile)) {\n      throw new Error(\n        \"At least one of imageFile, videoFile, audioFile, textFile must be provided.\",\n      );\n    }\n    const imagePb = imageFile\n      ? { base64: Buffer.from(fs.readFileSync(imageFile)).toString(\"base64\") }\n      : null;\n    const videoPb = videoFile\n      ? { base64: Buffer.from(fs.readFileSync(videoFile)).toString(\"base64\") }\n      : null;\n    const audioPb = audioFile\n      ? { base64: Buffer.from(fs.readFileSync(audioFile)).toString(\"base64\") }\n      : null;\n    const textPb = textFile\n      ? { raw: fs.readFileSync(textFile, \"utf-8\") }\n      : null;\n    return this.getProto({\n      inputId,\n      datasetId,\n      imagePb,\n      videoPb,\n      audioPb,\n      textPb,\n      geoInfo,\n      labels,\n      metadata,\n    });\n  }\n\n  /**\n   * Upload input from URL.\n   *\n   * @param inputId - The input ID for the input to create.\n   * @param imageUrl - The URL for the image.\n   * @param videoUrl - The URL for the video.\n   * @param audioUrl - The URL for the audio.\n   * @param textUrl - The URL for the text.\n   * @param datasetId - The dataset ID for the dataset to add the input to.\n   * @returns - Job ID for the upload request.\n   *\n   * @includeExample examples/input/getInputFromUrl.ts\n   */\n  static getInputFromUrl({\n    inputId,\n    imageUrl = null,\n    videoUrl = null,\n    audioUrl = null,\n    textUrl = null,\n    datasetId = null,\n    geoInfo = null,\n    labels = null,\n    metadata = null,\n  }: {\n    inputId: string;\n    imageUrl?: string | null;\n    videoUrl?: string | null;\n    audioUrl?: string | null;\n    textUrl?: string | null;\n    datasetId?: string | null;\n    geoInfo?: GeoPoint.AsObject | null;\n    labels?: string[] | null;\n    metadata?: Record<string, JavaScriptValue> | null;\n  }): GrpcInput {\n    if (!(imageUrl || videoUrl || audioUrl || textUrl)) {\n      throw new Error(\n        \"At least one of imageUrl, videoUrl, audioUrl, textUrl must be provided.\",\n      );\n    }\n    const imagePb = imageUrl ? new Image().setUrl(imageUrl) : null;\n    const videoPb = videoUrl ? new Video().setUrl(videoUrl) : null;\n    const audioPb = audioUrl ? new Audio().setUrl(audioUrl) : null;\n    const textPb = textUrl ? new Text().setUrl(textUrl) : null;\n    const concepts =\n      labels?.map((_label) => {\n        return new Concept()\n          .setId(`id-${_label.replace(/\\s/g, \"\")}`)\n          .setName(_label)\n          .setValue(1);\n      }) ?? [];\n    const metadataStruct = metadata\n      ? Struct.fromJavaScript(metadata)\n      : undefined;\n\n    const input = new GrpcInput().setId(inputId).setData(\n      new Data()\n        .setImage(imagePb ? imagePb : undefined)\n        .setVideo(videoPb ? videoPb : undefined)\n        .setAudio(audioPb ? audioPb : undefined)\n        .setText(textPb ? textPb : undefined)\n        .setGeo(\n          geoInfo\n            ? new Geo().setGeoPoint(\n                new GeoPoint()\n                  .setLatitude(geoInfo.latitude)\n                  .setLongitude(geoInfo.longitude),\n              )\n            : undefined,\n        )\n        .setConceptsList(concepts)\n        .setMetadata(metadataStruct),\n    );\n    if (datasetId) {\n      input.setDatasetIdsList([datasetId]);\n    }\n    return input;\n  }\n\n  /**\n   * Upload image inputs from folder.\n   *\n   * @param folderPath - The path to the folder containing the images.\n   * @param datasetId - The dataset ID for the dataset to add the input to.\n   * @param labels - A boolean indicating whether to use the folder name as a label.\n   *\n   * @includeExample examples/input/getImageInputsFromFolder.ts\n   */\n  static getImageInputsFromFolder({\n    folderPath,\n    datasetId = null,\n    labels = false,\n  }: {\n    folderPath: string;\n    datasetId?: string | null;\n    labels?: boolean;\n  }): GrpcInput[] {\n    const inputProtos: GrpcInput[] = [];\n    const folderName = folderPath.split(\"/\").pop()!;\n    const labelList = labels ? [folderName] : null;\n    fs.readdirSync(folderPath).forEach((filename) => {\n      const extension = filename.split(\".\").pop();\n      if (\n        extension &&\n        [\"jpg\", \"jpeg\", \"png\", \"tiff\", \"webp\"].includes(extension.toLowerCase())\n      ) {\n        const inputId = filename.split(\".\")[0];\n        const imageBytes = fs.readFileSync(path.join(folderPath, filename));\n        const imagePb = { base64: Buffer.from(imageBytes).toString(\"base64\") };\n        const inputProto = Input.getProto({\n          inputId,\n          datasetId,\n          imagePb,\n          labels: labelList,\n        });\n        inputProtos.push(inputProto);\n      }\n    });\n    return inputProtos;\n  }\n\n  /**\n   * Create input proto for text data type from raw text.\n   *\n   * @param inputId - The input ID for the input to create.\n   * @param rawText - The raw text input.\n   * @param datasetId - The dataset ID for the dataset to add the input to.\n   * @returns - An Input object for the specified input ID.\n   *\n   * @includeExample examples/input/getTextInput.ts\n   */\n  static getTextInput({\n    inputId,\n    rawText,\n    datasetId = null,\n    geoInfo = null,\n    labels = null,\n    metadata = null,\n  }: {\n    inputId: string;\n    rawText: string;\n    datasetId?: string | null;\n    geoInfo?: GeoPoint.AsObject | null;\n    labels?: string[] | null;\n    metadata?: Record<string, JavaScriptValue> | null;\n  }): GrpcInput {\n    const textPb = rawText ? { raw: rawText } : null;\n    return this.getProto({\n      inputId,\n      datasetId,\n      textPb,\n      geoInfo,\n      labels,\n      metadata,\n    });\n  }\n\n  /**\n   * Create input proto for text and image from bytes or url\n   *\n   * @param inputId - The input ID for the input to create.\n   * @param rawText - The raw text input.\n   * @param datasetId - The dataset ID for the dataset to add the input to.\n   * @param textBytes - The bytes for the text as `Uint8Array` or `Buffer`.\n   * @param imageUrl - The URL for the image.\n   * @param imageBytes - The bytes for the image as `Uint8Array` or `Buffer`.\n   * @returns - An Input object for the specified input ID.\n   */\n  static getMultimodalInput({\n    inputId,\n    rawText = null,\n    textBytes = null,\n    imageUrl = null,\n    imageBytes = null,\n    datasetId = null,\n    labels = null,\n  }: {\n    inputId: string;\n    rawText?: string | null;\n    textBytes?: Uint8Array | null;\n    imageUrl?: string | null;\n    imageBytes?: Uint8Array | null;\n    datasetId?: string | null;\n    labels?: string[] | null;\n  }): GrpcInput {\n    if ((imageBytes && imageUrl) || (!imageBytes && !imageUrl)) {\n      throw new Error(\n        \"Please supply only one of imageBytes or imageUrl, and not both.\",\n      );\n    }\n    if ((textBytes && rawText) || (!textBytes && !rawText)) {\n      throw new Error(\n        \"Please supply only one of textBytes or rawText, and not both.\",\n      );\n    }\n\n    const imagePb = imageBytes\n      ? { base64: Buffer.from(imageBytes).toString(\"base64\") }\n      : imageUrl\n        ? { url: imageUrl }\n        : null;\n    const textPb = textBytes\n      ? { raw: Buffer.from(textBytes).toString(\"utf-8\") }\n      : rawText\n        ? { raw: rawText }\n        : null;\n\n    return Input.getProto({\n      inputId,\n      datasetId,\n      imagePb,\n      textPb,\n      labels,\n    });\n  }\n\n  /**\n   * Create Input proto from CSV File. Supported columns are:\n   * 'inputid', 'input', 'concepts', 'metadata', 'geopoints'\n   *\n   * @param csvPath - The path to the CSV file.\n   * @param inputType - The type of input to create. Can be \"text\", \"image\", \"video\", or \"audio\".\n   * @param csvType - The type of CSV file. Can be \"raw\", \"url\", or \"file\".\n   * @param datasetId - The dataset ID for the dataset to add the input to.\n   * @param labels - A boolean indicating whether to generate labels from concepts list.\n   *\n   * @returns - An array of Input objects for the specified input ID.\n   */\n  static async getInputsFromCsv({\n    csvPath,\n    inputType = \"text\",\n    csvType = \"raw\",\n    datasetId = null,\n    labels = true,\n  }: {\n    csvPath: string;\n    inputType: \"image\" | \"text\" | \"video\" | \"audio\";\n    csvType: \"raw\" | \"url\" | \"file\";\n    datasetId?: string | null;\n    labels: boolean;\n  }): Promise<GrpcInput[]> {\n    const inputProtos: GrpcInput[] = [];\n    const csvData = await fs.promises.readFile(csvPath, \"utf8\");\n    const parser = parse(csvData, { columns: true });\n    const records: Array<CSVRecord> = [];\n    parser.on(\"readable\", function () {\n      let record;\n      while ((record = parser.read()) !== null) {\n        // individual record\n        records.push(record);\n      }\n    });\n    await finished(parser);\n\n    for (const record of records) {\n      const { inputid, input, concepts, metadata, geopoints, ...otherColumns } =\n        record;\n\n      if (Object.keys(otherColumns).length > 0) {\n        throw new Error(\n          `CSV file may have 'inputid', 'input', 'concepts', 'metadata', 'geopoints' columns. Does not support: '${Object.keys(otherColumns).join(\", \")}'`,\n        );\n      }\n\n      const inputLabels = labels ? concepts.split(\",\") : null;\n\n      let inputMetadata = null;\n      if (metadata) {\n        try {\n          // TODO: Test CSV parsing of json values with actual test cases\n          const metadataDict = JSON.parse(metadata.replace(/'/g, '\"'));\n          inputMetadata = { fields: metadataDict };\n        } catch (error) {\n          throw new Error(\"metadata column in CSV file should be a valid JSON\");\n        }\n      }\n\n      let inputGeoInfo = null;\n      if (geopoints) {\n        const geoPoints = geopoints.split(\",\");\n        if (geoPoints.length === 2) {\n          inputGeoInfo = {\n            latitude: parseFloat(geoPoints[0]),\n            longitude: parseFloat(geoPoints[1]),\n          };\n        } else {\n          throw new Error(\n            \"geopoints column in CSV file should have longitude,latitude\",\n          );\n        }\n      }\n\n      const inputId = inputid || uuid();\n      const text = inputType === \"text\" ? input : null;\n      const image = inputType === \"image\" ? input : null;\n      const video = inputType === \"video\" ? input : null;\n      const audio = inputType === \"audio\" ? input : null;\n\n      if (csvType === \"raw\") {\n        inputProtos.push(\n          Input.getTextInput({\n            inputId,\n            rawText: text as string,\n            datasetId,\n            labels: inputLabels,\n            metadata: inputMetadata,\n            geoInfo: inputGeoInfo,\n          }),\n        );\n      } else if (csvType === \"url\") {\n        inputProtos.push(\n          Input.getInputFromUrl({\n            inputId,\n            imageUrl: image,\n            textUrl: text,\n            audioUrl: audio,\n            videoUrl: video,\n            datasetId,\n            labels: inputLabels,\n            metadata: inputMetadata,\n            geoInfo: inputGeoInfo,\n          }),\n        );\n      } else {\n        inputProtos.push(\n          Input.getInputFromFile({\n            inputId,\n            imageFile: image,\n            textFile: text,\n            audioFile: audio,\n            videoFile: video,\n            datasetId,\n            labels: inputLabels,\n            metadata: inputMetadata,\n            geoInfo: inputGeoInfo,\n          }),\n        );\n      }\n    }\n\n    return inputProtos;\n  }\n\n  static getTextInputsFromFolder({\n    folderPath,\n    datasetId = null,\n    labels = false,\n  }: {\n    folderPath: string;\n    datasetId: string | null;\n    labels: boolean;\n  }): GrpcInput[] {\n    const inputProtos: GrpcInput[] = [];\n    const labelList = labels ? [folderPath.split(\"/\").pop()!] : null;\n    const files = fs.readdirSync(folderPath);\n    for (const filename of files) {\n      if (filename.split(\".\").pop() !== \"txt\") {\n        continue;\n      }\n      const inputId = filename.split(\".\")[0];\n      const rawText = fs.readFileSync(path.join(folderPath, filename), \"utf8\");\n      const textPb = { raw: rawText };\n      inputProtos.push(\n        Input.getProto({\n          inputId,\n          datasetId,\n          textPb,\n          labels: labelList,\n        }),\n      );\n    }\n    return inputProtos;\n  }\n\n  static getBboxProto({\n    inputId,\n    label,\n    bbox,\n  }: {\n    inputId: string;\n    label: string;\n    bbox: number[];\n  }): Annotation {\n    const bboxSchema = z.array(z.number()).length(4);\n    try {\n      bboxSchema.parse(bbox);\n    } catch {\n      throw new Error(\"bbox must be an array of coordinates\");\n    }\n    const [xMin, yMin, xMax, yMax] = bbox;\n    const inputAnnotProto = new Annotation().setInputId(inputId).setData(\n      new Data().setRegionsList([\n        new Region()\n          .setRegionInfo(\n            new RegionInfo().setBoundingBox(\n              new BoundingBox()\n                .setTopRow(yMin)\n                .setLeftCol(xMin)\n                .setBottomRow(yMax)\n                .setRightCol(xMax),\n            ),\n          )\n          .setData(\n            new Data().setConceptsList([\n              new Concept()\n                .setId(`id-${label.replace(/\\s/g, \"\")}`)\n                .setName(label)\n                .setValue(1),\n            ]),\n          ),\n      ]),\n    );\n    return inputAnnotProto;\n  }\n\n  static getMaskProto({\n    inputId,\n    label,\n    polygons,\n  }: {\n    inputId: string;\n    label: string;\n    polygons: PolygonType[];\n  }): Annotation {\n    const polygonsSchema = z.array(z.array(z.tuple([z.number(), z.number()])));\n    try {\n      polygonsSchema.parse(polygons);\n    } catch {\n      throw new Error(\"polygons must be a list of points\");\n    }\n    const regions = polygons.map((points) => {\n      return new Region()\n        .setRegionInfo(\n          new RegionInfo().setPolygon(\n            new Polygon().setPointsList(\n              points.map((point) => {\n                return new Point()\n                  .setRow(point[1])\n                  .setCol(point[0])\n                  .setVisibility(Point.Visibility[\"VISIBLE\"]);\n              }),\n            ),\n          ),\n        )\n        .setData(\n          new Data().setConceptsList([\n            new Concept()\n              .setId(`id-${label.replace(/\\s/g, \"\")}`)\n              .setName(label)\n              .setValue(1),\n          ]),\n        );\n    });\n    const inputMaskProto = new Annotation()\n      .setInputId(inputId)\n      .setData(new Data().setRegionsList(regions));\n    return inputMaskProto;\n  }\n\n  async uploadInputs({\n    inputs,\n    showLog = true,\n  }: {\n    inputs: GrpcInput[];\n    showLog?: boolean;\n  }): Promise<string> {\n    if (!Array.isArray(inputs)) {\n      throw new Error(\"inputs must be an array of Input objects\");\n    }\n    const inputJobId = uuid(); // generate a unique id for this job\n    const request = new PostInputsRequest()\n      .setUserAppId(this.userAppId)\n      .setInputsList(inputs)\n      .setInputsAddJobId(inputJobId);\n\n    const postInputs = promisifyGrpcCall(\n      this.STUB.client.postInputs,\n      this.STUB.client,\n    );\n\n    const response = await this.grpcRequest(postInputs, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      if (showLog) {\n        console.warn(responseObject.status?.description);\n      }\n      throw new Error(\n        `Inputs upload failed with response ${responseObject.status?.description}`,\n      );\n    } else {\n      if (showLog) {\n        console.info(\n          \"\\nInputs Uploaded\\n%s\",\n          responseObject.status?.description,\n        );\n      }\n    }\n    return inputJobId;\n  }\n\n  uploadFromUrl({\n    inputId,\n    imageUrl = null,\n    videoUrl = null,\n    audioUrl = null,\n    textUrl = null,\n    datasetId = null,\n    geoInfo = null,\n    labels = null,\n    metadata = null,\n  }: {\n    inputId: string;\n    imageUrl?: string | null;\n    videoUrl?: string | null;\n    audioUrl?: string | null;\n    textUrl?: string | null;\n    datasetId?: string | null;\n    geoInfo?: GeoPoint.AsObject | null;\n    labels?: string[] | null;\n    metadata?: Record<string, JavaScriptValue> | null;\n  }): Promise<string> {\n    const inputPb = Input.getInputFromUrl({\n      inputId,\n      imageUrl,\n      videoUrl,\n      audioUrl,\n      textUrl,\n      datasetId,\n      geoInfo,\n      labels,\n      metadata,\n    });\n    return this.uploadInputs({ inputs: [inputPb] });\n  }\n\n  uploadFromFile({\n    inputId,\n    imageFile = null,\n    videoFile = null,\n    audioFile = null,\n    textFile = null,\n    datasetId = null,\n    geoInfo = null,\n    labels = null,\n    metadata = null,\n  }: {\n    inputId: string;\n    imageFile?: string | null;\n    videoFile?: string | null;\n    audioFile?: string | null;\n    textFile?: string | null;\n    datasetId?: string | null;\n    geoInfo?: GeoPoint.AsObject | null;\n    labels?: string[] | null;\n    metadata?: Record<string, JavaScriptValue> | null;\n  }): Promise<string> {\n    const inputProto = Input.getInputFromFile({\n      inputId,\n      imageFile,\n      videoFile,\n      audioFile,\n      textFile,\n      datasetId,\n      geoInfo,\n      labels,\n      metadata,\n    });\n    return this.uploadInputs({ inputs: [inputProto] });\n  }\n\n  uploadFromBytes({\n    inputId,\n    imageBytes = null,\n    videoBytes = null,\n    audioBytes = null,\n    textBytes = null,\n    datasetId = null,\n    geoInfo = null,\n    labels = null,\n    metadata = null,\n  }: {\n    inputId: string;\n    imageBytes?: Uint8Array | null;\n    videoBytes?: Uint8Array | null;\n    audioBytes?: Uint8Array | null;\n    textBytes?: Uint8Array | null;\n    datasetId?: string | null;\n    geoInfo?: GeoPoint.AsObject | null;\n    labels?: string[] | null;\n    metadata?: Record<string, JavaScriptValue> | null;\n  }): Promise<string> {\n    const inputProto = Input.getInputFromBytes({\n      inputId,\n      imageBytes,\n      videoBytes,\n      audioBytes,\n      textBytes,\n      datasetId,\n      geoInfo,\n      labels,\n      metadata,\n    });\n    return this.uploadInputs({ inputs: [inputProto] });\n  }\n\n  uploadText({\n    inputId,\n    rawText,\n    datasetId = null,\n  }: {\n    inputId: string;\n    rawText: string;\n    datasetId?: string | null;\n  }): Promise<string> {\n    const inputPb = Input.getProto({\n      inputId,\n      datasetId,\n      textPb: { raw: rawText },\n    });\n    return this.uploadInputs({ inputs: [inputPb] });\n  }\n\n  async patchInputs({\n    inputs,\n    action = \"merge\",\n  }: {\n    inputs: GrpcInput[];\n    action?: string;\n  }): Promise<string> {\n    if (!Array.isArray(inputs)) {\n      throw new Error(\"inputs must be an array of Input objects\");\n    }\n    const requestId = uuid(); // generate a unique id for this job\n    const request = new PatchInputsRequest()\n      .setUserAppId(this.userAppId)\n      .setInputsList(inputs)\n      .setAction(action);\n    const patchInputs = promisifyGrpcCall(\n      this.STUB.client.patchInputs,\n      this.STUB.client,\n    );\n    const response = await this.grpcRequest(patchInputs, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      console.warn(\n        `Patch inputs failed, status: ${responseObject.status?.description}`,\n      );\n      throw Error(\n        `Patch inputs failed, status: ${responseObject.status?.description}`,\n      );\n    }\n    console.info(\n      \"\\nPatch Inputs Successful\\n%s\",\n      responseObject.status?.description,\n    );\n    return requestId;\n  }\n\n  async uploadAnnotations({\n    batchAnnot,\n    showLog = true,\n  }: {\n    batchAnnot: Annotation[];\n    showLog?: boolean;\n  }): Promise<Annotation[]> {\n    const retryUpload: Annotation[] = []; // those that fail to upload are stored for retries\n    const request = new PostAnnotationsRequest()\n      .setUserAppId(this.userAppId)\n      .setAnnotationsList(batchAnnot);\n\n    const postAnnotations = promisifyGrpcCall(\n      this.STUB.client.postAnnotations,\n      this.STUB.client,\n    );\n\n    const response = await this.grpcRequest(postAnnotations, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      console.warn(\n        `Post annotations failed, status: ${responseObject.status?.description}`,\n      );\n      retryUpload.push(...batchAnnot);\n    } else {\n      if (showLog) {\n        console.info(\"\\nAnnotations Uploaded\\n%s\", responseObject.status);\n      }\n    }\n    return retryUpload;\n  }\n\n  bulkUpload({\n    inputs,\n    batchSize: providedBatchSize = 128,\n    uploadProgressEmitter,\n  }: {\n    inputs: GrpcInput[];\n    batchSize?: number;\n    uploadProgressEmitter?: InputBulkUpload;\n  }): Promise<void> {\n    const batchSize = Math.min(128, providedBatchSize);\n    const chunkedInputs = chunk(inputs, batchSize);\n\n    let currentProgress = 0;\n    const total = chunkedInputs.length;\n    uploadProgressEmitter?.emit(\"start\", { current: currentProgress, total });\n\n    return new Promise<void>((resolve, reject) => {\n      async.mapLimit(\n        chunkedInputs,\n        this.numOfWorkers,\n        (batchInputs, callback) => {\n          this.uploadBatch({ inputs: batchInputs })\n            .then((failedInputs) => {\n              this.retryUploads({\n                failedInputs,\n              }).finally(() => {\n                currentProgress++;\n                uploadProgressEmitter?.emit(\"progress\", {\n                  current: currentProgress,\n                  total,\n                });\n                callback(null, failedInputs);\n              });\n            })\n            .catch((err) => {\n              callback(err);\n            });\n        },\n        (err) => {\n          if (err) {\n            console.error(\"Error processing batches\", err);\n            uploadProgressEmitter?.emit(\"error\");\n            reject(err);\n          }\n          uploadProgressEmitter?.emit(\"end\", { current: total, total });\n          console.log(\"All inputs processed\");\n          resolve();\n        },\n      );\n    });\n  }\n\n  private async uploadBatch({\n    inputs,\n  }: {\n    inputs: GrpcInput[];\n  }): Promise<GrpcInput[]> {\n    const inputJobId = await this.uploadInputs({ inputs, showLog: false });\n    await this.waitForInputs({ inputJobId });\n    const failedInputs = await this.deleteFailedInputs({ inputs });\n    return failedInputs;\n  }\n\n  private async waitForInputs({\n    inputJobId,\n  }: {\n    inputJobId: string;\n  }): Promise<boolean> {\n    const backoffIterator = new BackoffIterator({\n      count: 10,\n    });\n    let maxRetries = 10;\n    const startTime = Date.now();\n    const thirtyMinutes = 60 * 30 * 1000;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const getInputsAddJobRequest = new GetInputsAddJobRequest()\n        .setUserAppId(this.userAppId)\n        .setId(inputJobId);\n\n      const getInputsAddJob = promisifyGrpcCall(\n        this.STUB.client.getInputsAddJob,\n        this.STUB.client,\n      );\n\n      const response = await this.grpcRequest(\n        getInputsAddJob,\n        getInputsAddJobRequest,\n      );\n\n      if (Date.now() - startTime > thirtyMinutes || maxRetries === 0) {\n        const cancelInputsAddJobRequest = new CancelInputsAddJobRequest()\n          .setUserAppId(this.userAppId)\n          .setId(inputJobId);\n\n        const cancelInputsAddJob = promisifyGrpcCall(\n          this.STUB.client.cancelInputsAddJob,\n          this.STUB.client,\n        );\n\n        // 30 minutes timeout\n        await this.grpcRequest(cancelInputsAddJob, cancelInputsAddJobRequest); // Cancel Job\n        return false;\n      }\n\n      const responseObject = response.toObject();\n\n      if (responseObject.status?.code !== StatusCode.SUCCESS) {\n        maxRetries -= 1;\n        console.warn(\n          `Get input job failed, status: ${responseObject.status?.description}\\n`,\n        );\n        continue;\n      }\n      if (\n        responseObject.inputsAddJob?.progress?.inProgressCount === 0 &&\n        responseObject.inputsAddJob.progress.pendingCount === 0\n      ) {\n        return true;\n      } else {\n        await new Promise((resolve) => {\n          setTimeout(resolve, backoffIterator.next().value * 300);\n        });\n      }\n    }\n  }\n\n  private async deleteFailedInputs({\n    inputs,\n  }: {\n    inputs: GrpcInput[];\n  }): Promise<GrpcInput[]> {\n    const inputIds = inputs.map((input) => input.getId());\n    const successStatus = new Status().setCode(\n      StatusCode.INPUT_DOWNLOAD_SUCCESS, // Status code for successful download\n    );\n    const request = new ListInputsRequest();\n    request.setIdsList(inputIds);\n    request.setPerPage(inputIds.length);\n    request.setUserAppId(this.userAppId);\n    request.setStatus(successStatus);\n\n    const listInputs = promisifyGrpcCall(\n      this.STUB.client.listInputs,\n      this.STUB.client,\n    );\n\n    const response = await this.grpcRequest(listInputs, request);\n    const responseObject = response.toObject();\n    const successInputs = responseObject.inputsList || [];\n\n    const successInputIds = successInputs.map((input) => input.id);\n    const failedInputs = inputs.filter(\n      (input) => !successInputIds.includes(input.getId()),\n    );\n\n    const deleteInputs = promisifyGrpcCall(\n      this.STUB.client.deleteInputs,\n      this.STUB.client,\n    );\n\n    const deleteInputsRequest = new DeleteInputsRequest()\n      .setUserAppId(this.userAppId)\n      .setIdsList(failedInputs.map((input) => input.getId()));\n\n    // Delete failed inputs\n    await this.grpcRequest(deleteInputs, deleteInputsRequest);\n\n    return failedInputs;\n  }\n\n  private async retryUploads({\n    failedInputs,\n  }: {\n    failedInputs: GrpcInput[];\n  }): Promise<void> {\n    for (let retry = 0; retry < MAX_RETRIES; retry++) {\n      if (failedInputs.length > 0) {\n        console.log(\n          `Retrying upload for ${failedInputs.length} Failed inputs..\\n`,\n        );\n        failedInputs = await this.uploadBatch({ inputs: failedInputs });\n      }\n    }\n    if (failedInputs.length > 0) {\n      console.log(`Failed to upload ${failedInputs.length} inputs..\\n`);\n    }\n  }\n}\n","export const DATASET_UPLOAD_TASKS = [\n  \"visual_classification\",\n  \"text_classification\",\n  \"visual_detection\",\n  \"visual_segmentation\",\n  \"visual_captioning\",\n];\n\nexport const TASK_TO_ANNOTATION_TYPE = {\n  visual_classification: {\n    concepts: \"labels\",\n  },\n  text_classification: {\n    concepts: \"labels\",\n  },\n  visual_captioning: {\n    concepts: \"labels\",\n  },\n  visual_detection: {\n    bboxes: \"bboxes\",\n  },\n  visual_segmentation: {\n    polygons: \"polygons\",\n  },\n};\n\nexport const MAX_RETRIES = 2;\n","import {\n  DEFAULT_SEARCH_ALGORITHM,\n  DEFAULT_SEARCH_METRIC,\n  DEFAULT_TOP_K,\n} from \"../constants/search\";\nimport { Lister } from \"./lister\";\nimport { AuthConfig } from \"../utils/types\";\nimport {\n  Annotation,\n  Audio,\n  Concept,\n  Data,\n  Filter,\n  Geo,\n  GeoLimit,\n  GeoPoint,\n  Input as GrpcInput,\n  Image,\n  Query,\n  Rank,\n  Text,\n  Video,\n  Search as GrpcSearch,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/resources_pb\";\nimport { Input } from \"./input\";\nimport { UserError } from \"../errors\";\nimport { getSchema } from \"../schema/search\";\nimport { z } from \"zod\";\nimport {\n  JavaScriptValue,\n  Struct,\n} from \"google-protobuf/google/protobuf/struct_pb\";\nimport { promisifyGrpcCall } from \"../utils/misc\";\nimport { Status } from \"clarifai-nodejs-grpc/proto/clarifai/api/status/status_pb\";\nimport { grpc } from \"clarifai-nodejs-grpc\";\nimport {\n  MultiSearchResponse,\n  Pagination,\n  PostAnnotationsSearchesRequest,\n  PostInputsSearchesRequest,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/service_pb\";\nimport { StatusCode } from \"clarifai-nodejs-grpc/proto/clarifai/api/status/status_code_pb\";\n\ntype FilterType = z.infer<ReturnType<typeof getSchema>>;\ntype SupportedAlgorithm = \"nearest_neighbor\" | \"brute_force\";\ntype SupportedMetric = \"cosine\" | \"euclidean\";\n\n/**\n * @noInheritDoc\n */\nexport class Search extends Lister {\n  private topK: number;\n  private metricDistance: \"COSINE_DISTANCE\" | \"EUCLIDEAN_DISTANCE\";\n  private dataProto: Data;\n  private inputProto: GrpcInput;\n  private algorithm: SupportedAlgorithm;\n\n  constructor({\n    topK = DEFAULT_TOP_K,\n    metric = DEFAULT_SEARCH_METRIC,\n    authConfig,\n    algorithm = DEFAULT_SEARCH_ALGORITHM,\n  }: {\n    topK?: number;\n    metric?: SupportedMetric;\n    authConfig?: AuthConfig;\n    algorithm?: SupportedAlgorithm;\n  }) {\n    super({ pageSize: 1000, authConfig });\n\n    if (metric !== \"cosine\" && metric !== \"euclidean\") {\n      throw new UserError(\"Metric should be either cosine or euclidean\");\n    }\n\n    if (algorithm !== \"nearest_neighbor\" && algorithm !== \"brute_force\") {\n      throw new UserError(\n        \"Algorithm should be either nearest_neighbor or brute_force\",\n      );\n    }\n\n    this.topK = topK;\n    this.algorithm = algorithm;\n    this.metricDistance = (\n      {\n        cosine: \"COSINE_DISTANCE\",\n        euclidean: \"EUCLIDEAN_DISTANCE\",\n      } as const\n    )[metric];\n    this.dataProto = new Data();\n    this.inputProto = new GrpcInput();\n  }\n\n  private getAnnotProto(args: FilterType[0]): Annotation {\n    if (Object.keys(args).length === 0) {\n      return new Annotation();\n    }\n\n    this.dataProto = new Data();\n    for (const [key, value] of Object.entries(args) as [\n      keyof FilterType[0],\n      FilterType[0][keyof FilterType[0]],\n    ][]) {\n      if (key === \"imageBytes\") {\n        const imageProto = Input.getInputFromBytes({\n          inputId: \"\",\n          imageBytes: value as Uint8Array,\n        })\n          .getData()\n          ?.getImage();\n        this.dataProto.setImage(imageProto);\n      } else if (key === \"imageUrl\") {\n        const imageProto = Input.getInputFromUrl({\n          inputId: \"\",\n          imageUrl: value as string,\n        })\n          .getData()\n          ?.getImage();\n        this.dataProto.setImage(imageProto);\n      } else if (key === \"concepts\") {\n        if (value) {\n          const conceptsList = [];\n          for (const concept of (value as FilterType[0][\"concepts\"])!) {\n            const conceptProto = new Concept();\n            if (concept.id) conceptProto.setId(concept.id);\n            if (concept.name) conceptProto.setName(concept.name);\n            if (concept.value) conceptProto.setValue(concept.value);\n            if (concept.language) conceptProto.setLanguage(concept.language);\n            conceptsList.push(conceptProto);\n          }\n          this.dataProto.setConceptsList(conceptsList);\n        }\n      } else if (key === \"textRaw\") {\n        const textProto = Input.getInputFromBytes({\n          inputId: \"\",\n          textBytes: Buffer.from(value as string, \"utf-8\"),\n        })\n          .getData()\n          ?.getText();\n        this.dataProto.setText(textProto);\n      } else if (key === \"metadata\") {\n        const metadataStruct = Struct.fromJavaScript(\n          value as Record<string, JavaScriptValue>,\n        );\n        this.dataProto.setMetadata(metadataStruct);\n      } else if (key === \"geoPoint\") {\n        if (value) {\n          const { longitude, latitude, geoLimit } =\n            (value as FilterType[0][\"geoPoint\"])!;\n          const geoPointProto = this.getGeoPointProto(\n            longitude,\n            latitude,\n            geoLimit,\n          );\n          this.dataProto.setGeo(geoPointProto);\n        }\n      } else {\n        throw new UserError(\n          `arguments contain key that is not supported: ${key}`,\n        );\n      }\n    }\n    const annotation = new Annotation();\n    annotation.setData(this.dataProto);\n    return annotation;\n  }\n\n  private getInputProto(args: FilterType[0]): GrpcInput {\n    if (Object.keys(args).length === 0) {\n      return new GrpcInput();\n    }\n\n    this.inputProto = new GrpcInput();\n    this.dataProto = new Data();\n    for (const [key, value] of Object.entries(args) as [\n      keyof FilterType[0],\n      FilterType[0][keyof FilterType[0]],\n    ][]) {\n      if (key === \"inputTypes\") {\n        for (const inputType of (value as FilterType[0][\"inputTypes\"])! ?? []) {\n          if (inputType === \"image\") {\n            this.dataProto.setImage(new Image());\n          } else if (inputType === \"text\") {\n            this.dataProto.setText(new Text());\n          } else if (inputType === \"audio\") {\n            this.dataProto.setAudio(new Audio());\n          } else if (inputType === \"video\") {\n            this.dataProto.setVideo(new Video());\n          }\n        }\n        this.inputProto.setData(this.dataProto);\n      } else if (key === \"inputDatasetIds\") {\n        this.inputProto.setDatasetIdsList(value as string[]);\n      } else if (key === \"inputStatusCode\") {\n        const statusCode = new Status().setCode(value as number);\n        this.inputProto.setStatus(statusCode);\n      } else {\n        throw new UserError(`args contain key that is not supported: ${key}`);\n      }\n    }\n    return this.inputProto;\n  }\n\n  private getGeoPointProto(\n    longitude: number,\n    latitude: number,\n    geoLimit: number,\n  ): Geo {\n    const geo = new Geo();\n    const geoPoint = new GeoPoint();\n    geoPoint.setLongitude(longitude);\n    geoPoint.setLatitude(latitude);\n    const geoLimitConstructor = new GeoLimit();\n    geoLimitConstructor.setType(\"withinKilometers\");\n    geoLimitConstructor.setValue(geoLimit);\n    geo.setGeoPoint(geoPoint);\n    geo.setGeoLimit(geoLimitConstructor);\n    return geo;\n  }\n\n  private async *listAllPagesGenerator<\n    T extends PostInputsSearchesRequest | PostAnnotationsSearchesRequest,\n  >({\n    endpoint,\n    requestData,\n    page = 1,\n    perPage,\n  }: {\n    endpoint: (\n      request: T,\n      metadata: grpc.Metadata,\n      options: Partial<grpc.CallOptions>,\n    ) => Promise<MultiSearchResponse>;\n    requestData: T;\n    page?: number;\n    perPage?: number;\n  }): AsyncGenerator<MultiSearchResponse.AsObject, void, void> {\n    const maxPages = Math.ceil(this.topK / this.defaultPageSize);\n    let totalHits = 0;\n    while (page) {\n      if (!perPage) {\n        if (page === maxPages) {\n          perPage = this.topK - totalHits;\n        } else {\n          perPage = this.defaultPageSize;\n        }\n      }\n\n      const pagination = new Pagination();\n      pagination.setPage(page);\n      pagination.setPerPage(perPage);\n      requestData.setPagination(pagination);\n\n      // @ts-expect-error - endpoint type is a generic & causes type error here\n      const response = await this.grpcRequest(endpoint, requestData);\n      const responseObject = response.toObject();\n      if (responseObject.status?.code !== StatusCode.SUCCESS) {\n        if (\n          responseObject.status?.details.includes(\n            \"page * perPage cannot exceed\",\n          )\n        ) {\n          const msg = `Your topK is set to ${this.topK}. The current pagination settings exceed the limit. Please reach out to support@clarifai.com to request an increase for your use case.\\nreqId: ${responseObject.status?.reqId}`;\n          throw new UserError(msg);\n        } else {\n          throw new Error(\n            `Listing failed with response ${responseObject.status?.description}`,\n          );\n        }\n      }\n\n      if (\n        !(\"hitsList\" in responseObject) ||\n        responseObject.hitsList.length === 0\n      ) {\n        yield responseObject;\n        break;\n      }\n      page += 1;\n      totalHits += perPage;\n      yield responseObject;\n    }\n  }\n\n  query({\n    ranks = [{}],\n    filters = [{}],\n    page,\n    perPage,\n  }: {\n    ranks?: FilterType;\n    filters?: FilterType;\n    page?: number;\n    perPage?: number;\n  }): AsyncGenerator<MultiSearchResponse.AsObject, void, void> {\n    try {\n      getSchema().parse(ranks);\n      getSchema().parse(filters);\n    } catch (err) {\n      throw new UserError(`Invalid rank or filter input: ${err}`);\n    }\n\n    const rankAnnotProto: Annotation[] = [];\n    for (const rankObject of ranks) {\n      rankAnnotProto.push(this.getAnnotProto(rankObject));\n    }\n    const allRanks = rankAnnotProto.map((rankAnnot) => {\n      const rank = new Rank();\n      rank.setAnnotation(rankAnnot);\n      return rank;\n    });\n\n    if (\n      filters.length &&\n      Object.keys(filters[0]).some((k) => k.includes(\"input\"))\n    ) {\n      const filtersInputProto: GrpcInput[] = [];\n      for (const filterDict of filters) {\n        filtersInputProto.push(this.getInputProto(filterDict));\n      }\n      const allFilters = filtersInputProto.map((filterInput) => {\n        const filter = new Filter();\n        filter.setInput(filterInput);\n        return filter;\n      });\n\n      const query = new Query();\n      query.setRanksList(allRanks);\n      query.setFiltersList(allFilters);\n\n      const search = new GrpcSearch();\n      search.setQuery(query);\n      search.setAlgorithm(this.algorithm);\n      search.setMetric(GrpcSearch[\"Metric\"][this.metricDistance]);\n\n      const postInputsSearches = promisifyGrpcCall(\n        this.STUB.client.postInputsSearches,\n        this.STUB.client,\n      );\n      const request = new PostInputsSearchesRequest();\n      request.setUserAppId(this.userAppId);\n      request.setSearchesList([search]);\n\n      return this.listAllPagesGenerator({\n        endpoint: postInputsSearches,\n        requestData: request,\n        page,\n        perPage,\n      });\n    }\n\n    const filtersAnnotProto: Annotation[] = [];\n    for (const filterDict of filters) {\n      filtersAnnotProto.push(this.getAnnotProto(filterDict));\n    }\n    const allFilters = filtersAnnotProto.map((filterAnnot) => {\n      const filter = new Filter();\n      filter.setAnnotation(filterAnnot);\n      return filter;\n    });\n\n    const query = new Query();\n    query.setRanksList(allRanks);\n    query.setFiltersList(allFilters);\n\n    const search = new GrpcSearch();\n    search.setQuery(query);\n    search.setAlgorithm(this.algorithm);\n    search.setMetric(GrpcSearch[\"Metric\"][this.metricDistance]);\n\n    const postAnnotationsSearches = promisifyGrpcCall(\n      this.STUB.client.postAnnotationsSearches,\n      this.STUB.client,\n    );\n    const request = new PostAnnotationsSearchesRequest();\n    request.setUserAppId(this.userAppId);\n    request.setSearchesList([search]);\n\n    return this.listAllPagesGenerator({\n      endpoint: postAnnotationsSearches,\n      requestData: request,\n      page,\n      perPage,\n    });\n  }\n}\n","export const DEFAULT_TOP_K = 10;\nexport const DEFAULT_SEARCH_METRIC = \"euclidean\";\nexport const DEFAULT_SEARCH_ALGORITHM = \"nearest_neighbor\";\n","import { z } from \"zod\";\n\n/**\n * Initialize the schema for rank and filter.\n * This schema validates:\n * - Rank and filter must be a list\n * - Each item in the list must be a dict\n * - The dict can contain these optional keys:\n *   - 'image_url': Valid URL string\n *   - 'text_raw': Non-empty string\n *   - 'metadata': Dict\n *   - 'image_bytes': Bytes\n *   - 'geo_point': Dict with 'longitude', 'latitude' and 'geo_limit' as float, float and int respectively\n *   - 'concepts': List where each item is a concept dict\n * - Concept dict requires at least one of:\n *   - 'name': Non-empty string with dashes/underscores\n *   - 'id': Non-empty string\n *   - 'language': Non-empty string\n *   - 'value': 0 or 1 integer\n * - 'input_types': List of 'image', 'video', 'text' or 'audio'\n * - 'input_dataset_ids': List of strings\n * - 'input_status_code': Integer\n *\n * @returns The schema for rank and filter, defining the structure and validation rules for each item.\n */\nexport function getSchema(): z.ZodSchema<\n  Array<{\n    imageUrl?: string;\n    textRaw?: string;\n    metadata?: Record<string, unknown>;\n    imageBytes?: unknown; // Note: TypeScript doesn't have a dedicated 'bytes' type, so 'unknown' is used\n    geoPoint?: {\n      longitude: number;\n      latitude: number;\n      geoLimit: number;\n    };\n    concepts?: Array<{\n      value?: number;\n      id?: string;\n      language?: string;\n      name?: string;\n    }>;\n    inputTypes?: Array<\"image\" | \"video\" | \"text\" | \"audio\">;\n    inputDatasetIds?: string[];\n    inputStatusCode?: number;\n  }>\n> {\n  // Schema for a single concept\n  const conceptSchema = z\n    .object({\n      value: z.number().min(0).max(1).optional(),\n      id: z.string().min(1).optional(),\n      language: z.string().min(1).optional(),\n      name: z\n        .string()\n        .min(1)\n        .regex(/^[0-9A-Za-z]+([-_][0-9A-Za-z]+)*$/) // Non-empty string with dashes/underscores\n        .optional(),\n    })\n    .strict();\n\n  // Schema for a rank or filter item\n  const rankFilterItemSchema = z\n    .object({\n      imageUrl: z.string().url().optional(),\n      textRaw: z.string().min(1).optional(),\n      metadata: z.record(z.unknown()).optional(),\n      imageBytes: z.unknown().optional(),\n      geoPoint: z\n        .object({\n          longitude: z.number(),\n          latitude: z.number(),\n          geoLimit: z.number().int(),\n        })\n        .strict()\n        .optional(),\n      concepts: z.array(conceptSchema).min(1).optional(),\n\n      // input filters\n      inputTypes: z\n        .array(z.enum([\"image\", \"video\", \"text\", \"audio\"]))\n        .optional(),\n      inputDatasetIds: z.array(z.string()).optional(),\n      inputStatusCode: z.number().optional(),\n    })\n    .strict();\n\n  // Schema for rank and filter args\n  return z.array(rankFilterItemSchema);\n}\n","import { AuthConfig } from \"../utils/types\";\nimport { Lister } from \"./lister\";\nimport { UserError } from \"../errors\";\nimport { ClarifaiUrl, ClarifaiUrlHelper } from \"../urls/helper\";\nimport {\n  Input as GrpcInput,\n  OutputConfig as GrpcOutputConfig,\n  WorkflowState,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/resources_pb\";\nimport { MAX_WORKFLOW_PREDICT_INPUTS } from \"../constants/workflow\";\nimport {\n  GetWorkflowRequest,\n  ListWorkflowVersionsRequest,\n  MultiWorkflowVersionResponse,\n  PostWorkflowResultsRequest,\n  PostWorkflowResultsResponse,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/service_pb\";\nimport { BackoffIterator, promisifyGrpcCall } from \"../utils/misc\";\nimport { StatusCode } from \"clarifai-nodejs-grpc/proto/clarifai/api/status/status_code_pb\";\nimport { Input } from \"./input\";\nimport { Exporter } from \"../workflows/export\";\nimport { fromPartialProtobufObject } from \"../utils/fromPartialProtobufObject\";\n\ntype OutputConfig = { minValue: number };\n\ntype WorkflowConfig =\n  | {\n      url: ClarifaiUrl;\n      workflowId?: undefined;\n      workflowVersion?: undefined;\n      outputConfig?: OutputConfig;\n      authConfig?: Omit<AuthConfig, \"userId\" | \"appId\"> & {\n        appId?: undefined;\n        userId?: undefined;\n      };\n    }\n  | {\n      url?: undefined;\n      workflowId: string;\n      workflowVersion?: { id: string };\n      outputConfig?: OutputConfig;\n      authConfig?: AuthConfig;\n    };\n\n/**\n * @noInheritDoc\n */\nexport class Workflow extends Lister {\n  private versionId: string;\n  public id: string;\n  public appId: string;\n  private outputConfig: OutputConfig;\n\n  constructor({\n    url,\n    workflowId,\n    workflowVersion = { id: \"\" },\n    outputConfig = { minValue: 0 },\n    authConfig = {},\n  }: WorkflowConfig) {\n    if (url && workflowId) {\n      throw new UserError(\"You can only specify one of url or workflow_id.\");\n    }\n    if (!url && !workflowId) {\n      throw new UserError(\"You must specify one of url or workflow_id.\");\n    }\n    if (url) {\n      const [userId, appId, , _workflowId, workflowVersionId] =\n        ClarifaiUrlHelper.splitClarifaiUrl(url);\n      if (workflowVersionId) workflowVersion.id = workflowVersionId;\n      authConfig.userId = userId;\n      authConfig.appId = appId;\n      workflowId = _workflowId;\n    }\n\n    super({ authConfig: authConfig as AuthConfig });\n    this.id = workflowId || \"\";\n    this.versionId = workflowVersion.id;\n    this.outputConfig = outputConfig;\n    this.appId = authConfig.appId || process.env.CLARIFAI_APP_ID!;\n  }\n\n  async predict({\n    inputs,\n    workflowStateId,\n  }: {\n    inputs: GrpcInput[];\n    workflowStateId?: WorkflowState.AsObject[\"id\"];\n  }): Promise<PostWorkflowResultsResponse.AsObject> {\n    if (inputs.length > MAX_WORKFLOW_PREDICT_INPUTS) {\n      throw new UserError(\n        `Too many inputs. Max is ${MAX_WORKFLOW_PREDICT_INPUTS}.`,\n      );\n    }\n\n    const request = new PostWorkflowResultsRequest();\n    request.setUserAppId(this.userAppId);\n    request.setWorkflowId(this.id);\n    request.setVersionId(this.versionId);\n    request.setInputsList(inputs);\n    const outputConfig = fromPartialProtobufObject(\n      GrpcOutputConfig,\n      this.outputConfig,\n    );\n    request.setOutputConfig(outputConfig);\n\n    if (workflowStateId) {\n      const workflowState = new WorkflowState();\n      workflowState.setId(workflowStateId);\n      request.setWorkflowState(workflowState);\n    }\n\n    const startTime = Date.now();\n    const backoffIterator = new BackoffIterator();\n    const postWorkflowResults = promisifyGrpcCall(\n      this.STUB.client.postWorkflowResults,\n      this.STUB.client,\n    );\n\n    return new Promise((resolve, reject) => {\n      const makeRequest = () => {\n        this.grpcRequest(postWorkflowResults, request)\n          .then((response) => {\n            const responseObject = response.toObject();\n            if (\n              responseObject.status?.code === StatusCode.MODEL_DEPLOYING &&\n              Date.now() - startTime < 600000\n            ) {\n              console.log(\n                `${this.id} Workflow is still deploying, please wait...`,\n              );\n              setTimeout(makeRequest, backoffIterator.next().value * 1000);\n            } else if (responseObject.status?.code !== StatusCode.SUCCESS) {\n              reject(\n                new Error(\n                  `Workflow Predict failed with response ${responseObject.status?.description}`,\n                ),\n              );\n            } else {\n              resolve(response.toObject());\n            }\n          })\n          .catch((error) => {\n            reject(\n              new Error(`Model Predict failed with error: ${error.message}`),\n            );\n          });\n      };\n\n      makeRequest();\n    });\n  }\n\n  predictByBytes(\n    inputBytes: Buffer,\n    inputType: \"image\" | \"text\" | \"video\" | \"audio\",\n  ): Promise<PostWorkflowResultsResponse.AsObject> {\n    if (![\"image\", \"text\", \"video\", \"audio\"].includes(inputType)) {\n      throw new UserError(\n        \"Invalid input type. It should be image, text, video, or audio.\",\n      );\n    }\n    if (!Buffer.isBuffer(inputBytes)) {\n      throw new UserError(\"Invalid bytes.\");\n    }\n\n    let inputProto = new GrpcInput();\n    if (inputType === \"image\") {\n      inputProto = Input.getInputFromBytes({\n        inputId: \"\",\n        imageBytes: inputBytes,\n      });\n    } else if (inputType === \"text\") {\n      inputProto = Input.getInputFromBytes({\n        inputId: \"\",\n        textBytes: inputBytes,\n      });\n    } else if (inputType === \"video\") {\n      inputProto = Input.getInputFromBytes({\n        inputId: \"\",\n        videoBytes: inputBytes,\n      });\n    } else if (inputType === \"audio\") {\n      inputProto = Input.getInputFromBytes({\n        inputId: \"\",\n        audioBytes: inputBytes,\n      });\n    }\n\n    return this.predict({ inputs: [inputProto] });\n  }\n\n  predictByUrl(\n    url: string,\n    inputType: \"image\" | \"text\" | \"video\" | \"audio\",\n  ): Promise<PostWorkflowResultsResponse.AsObject> {\n    if (![\"image\", \"text\", \"video\", \"audio\"].includes(inputType)) {\n      throw new UserError(\n        \"Invalid input type. It should be image, text, video, or audio.\",\n      );\n    }\n    let inputProto = new GrpcInput();\n    if (inputType === \"image\") {\n      inputProto = Input.getInputFromUrl({ inputId: \"\", imageUrl: url });\n    } else if (inputType === \"text\") {\n      inputProto = Input.getInputFromUrl({ inputId: \"\", textUrl: url });\n    } else if (inputType === \"video\") {\n      inputProto = Input.getInputFromUrl({ inputId: \"\", videoUrl: url });\n    } else if (inputType === \"audio\") {\n      inputProto = Input.getInputFromUrl({ inputId: \"\", audioUrl: url });\n    }\n    return this.predict({ inputs: [inputProto] });\n  }\n\n  async *listVersions({\n    pageNo,\n    perPage,\n  }: {\n    pageNo?: number;\n    perPage?: number;\n  }): AsyncGenerator<MultiWorkflowVersionResponse.AsObject, void, void> {\n    const request = new ListWorkflowVersionsRequest();\n    request.setUserAppId(this.userAppId);\n    request.setWorkflowId(this.id);\n\n    const listWorkflowVersions = promisifyGrpcCall(\n      this.STUB.client.listWorkflowVersions,\n      this.STUB.client,\n    );\n\n    const workflowVersionsGenerator = this.listPagesGenerator(\n      listWorkflowVersions,\n      request,\n      perPage,\n      pageNo,\n    );\n\n    for await (const workflowVersionInfo of workflowVersionsGenerator) {\n      const workflowVersion = workflowVersionInfo.toObject();\n      yield workflowVersion;\n    }\n  }\n\n  /**\n   * Exports the workflow to a yaml file.\n   *\n   * @param outPath - The path to save the yaml file to.\n   *\n   * @example\n   * ```typescript\n   * import { Workflow } from \"./workflow\";\n   *\n   * const workflow = new Workflow(\"https://clarifai.com/clarifai/main/workflows/Demographics\");\n   * await workflow.export(\"out_path.yml\");\n   * ```\n   */\n  async exportWorkflow(outPath: string): Promise<void> {\n    const request = new GetWorkflowRequest();\n    request.setUserAppId(this.userAppId);\n    request.setWorkflowId(this.id);\n\n    const getWorkflow = promisifyGrpcCall(\n      this.STUB.client.getWorkflow,\n      this.STUB.client,\n    );\n\n    const response = await this.grpcRequest(getWorkflow, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(\n        `Workflow Export failed with response ${response.getStatus()?.toString()}`,\n      );\n    }\n\n    const exporter = new Exporter(responseObject);\n    exporter.parse();\n    exporter.export(outPath);\n  }\n}\n","export const MAX_WORKFLOW_PREDICT_INPUTS = 32;\n","import { SingleWorkflowResponse } from \"clarifai-nodejs-grpc/proto/clarifai/api/service_pb\";\nimport * as fs from \"fs\";\nimport * as yaml from \"js-yaml\";\n\nconst VALID_YAML_KEYS = [\n  \"workflow\",\n  \"id\",\n  \"nodes\",\n  \"nodesList\",\n  \"nodeInputs\",\n  \"nodeInputsList\",\n  \"nodeId\",\n  \"model\",\n];\n\nexport class Exporter {\n  private wf?: SingleWorkflowResponse.AsObject;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private wf_dict?: Record<string, any>;\n\n  constructor(workflow: SingleWorkflowResponse.AsObject) {\n    this.wf = workflow;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public parse(): Record<string, any> {\n    if (Array.isArray(this.wf)) {\n      this.wf = this.wf[0];\n    }\n    const wf = {\n      workflow: this.wf,\n    };\n    const clean_wf = cleanUpUnusedKeys(wf);\n    this.wf_dict = clean_wf;\n    return clean_wf;\n  }\n\n  public export(out_path: string): void {\n    const yamlString = yaml.dump(this.wf_dict?.[\"workflow\"], {\n      flowLevel: -1,\n      replacer: (_key, val) => {\n        if (Array.isArray(val) && val.length === 0) {\n          return undefined;\n        }\n        return val;\n      },\n    });\n    fs.writeFileSync(\n      out_path,\n      yamlString.replace(new RegExp(\"sList\", \"g\"), \"s\"),\n    );\n  }\n\n  public close(): void {\n    delete this.wf;\n    delete this.wf_dict;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction cleanUpUnusedKeys(wf: Record<string, any>): Record<string, any> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const new_wf: Record<string, any> = {};\n  for (const [key, val] of Object.entries(wf)) {\n    if (!VALID_YAML_KEYS.includes(key)) {\n      continue;\n    }\n    if (key === \"model\") {\n      new_wf[\"model\"] = {\n        modelId: wf[\"model\"][\"id\"],\n        modelVersionId: wf[\"model\"][\"modelVersion\"][\"id\"],\n      };\n      // If the model is not from clarifai main, add the app_id and user_id to the model dict.\n      if (\n        wf[\"model\"][\"userId\"] !== \"clarifai\" &&\n        wf[\"model\"][\"appId\"] !== \"main\"\n      ) {\n        new_wf[\"model\"] = {\n          ...new_wf[\"model\"],\n          appId: wf[\"model\"][\"appId\"],\n          userId: wf[\"model\"][\"userId\"],\n        };\n      }\n    } else if (Array.isArray(val)) {\n      const new_list = val.map((i) => cleanUpUnusedKeys(i));\n      new_wf[key] = new_list;\n    } else if (typeof val === \"object\") {\n      new_wf[key] = cleanUpUnusedKeys(val);\n    } else {\n      new_wf[key] = val;\n    }\n  }\n  return new_wf;\n}\n","import {\n  DatasetVersion,\n  Dataset as GrpcDataset,\n  Input as GrpcInput,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/resources_pb\";\nimport { UserError } from \"../errors\";\nimport { ClarifaiUrl, ClarifaiUrlHelper } from \"../urls/helper\";\nimport { AuthConfig } from \"../utils/types\";\nimport { Lister } from \"./lister\";\nimport { Input, InputBulkUpload } from \"./input\";\nimport {\n  DeleteDatasetVersionsRequest,\n  ListDatasetVersionsRequest,\n  PostDatasetVersionsRequest,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/service_pb\";\nimport {\n  JavaScriptValue,\n  Struct,\n} from \"google-protobuf/google/protobuf/struct_pb\";\nimport { promisifyGrpcCall } from \"../utils/misc\";\nimport { StatusCode } from \"clarifai-nodejs-grpc/proto/clarifai/api/status/status_code_pb\";\n\ntype DatasetConfig =\n  | {\n      authConfig?: AuthConfig;\n      datasetId: string;\n      datasetVersionId?: string;\n      url?: undefined;\n    }\n  | {\n      authConfig?: AuthConfig;\n      datasetId?: undefined;\n      datasetVersionId?: undefined;\n      url: ClarifaiUrl;\n    };\n\nexport class Dataset extends Lister {\n  private info: GrpcDataset = new GrpcDataset();\n  private batchSize: number = 128;\n  private input: Input;\n\n  constructor({ authConfig, datasetId, url, datasetVersionId }: DatasetConfig) {\n    if (url && datasetId) {\n      throw new UserError(\"You can only specify one of url or dataset_id.\");\n    }\n    if (url) {\n      const [userId, appId, , _datasetId, _datasetVersionId] =\n        ClarifaiUrlHelper.splitClarifaiUrl(url);\n      if (authConfig) authConfig.userId = userId;\n      if (authConfig) authConfig.appId = appId;\n      datasetId = _datasetId;\n      datasetVersionId = _datasetVersionId;\n    }\n\n    super({ authConfig });\n    this.info.setId(datasetId!);\n    this.info.setVersion(new DatasetVersion().setId(datasetVersionId!));\n    this.input = new Input({ authConfig });\n  }\n\n  async createVersion({\n    id,\n    description,\n    metadata = {},\n  }: {\n    id: string;\n    description: string;\n    metadata?: Record<string, JavaScriptValue>;\n  }): Promise<DatasetVersion.AsObject> {\n    const request = new PostDatasetVersionsRequest();\n    request.setUserAppId(this.userAppId);\n    request.setDatasetId(this.info.getId());\n    const datasetVersion = new DatasetVersion();\n    datasetVersion.setId(id);\n    datasetVersion.setDescription(description);\n    datasetVersion.setMetadata(Struct.fromJavaScript(metadata));\n    request.setDatasetVersionsList([datasetVersion]);\n\n    const postDatasetVersions = promisifyGrpcCall(\n      this.STUB.client.postDatasetVersions,\n      this.STUB.client,\n    );\n\n    const response = await this.grpcRequest(postDatasetVersions, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n    console.info(\"\\nDataset Version created\\n%s\", response.getStatus());\n\n    return responseObject.datasetVersionsList[0];\n  }\n\n  async deleteVersion(versionId: string): Promise<void> {\n    const request = new DeleteDatasetVersionsRequest();\n    request.setUserAppId(this.userAppId);\n    request.setDatasetId(this.info.getId());\n    request.setDatasetVersionIdsList([versionId]);\n\n    const deleteDatasetVersions = promisifyGrpcCall(\n      this.STUB.client.deleteDatasetVersions,\n      this.STUB.client,\n    );\n    const response = await this.grpcRequest(deleteDatasetVersions, request);\n    const responseObject = response.toObject();\n    if (responseObject.status?.code !== StatusCode.SUCCESS) {\n      throw new Error(responseObject.status?.description);\n    }\n    console.info(\"\\nDataset Version Deleted\\n%s\", response.getStatus());\n  }\n\n  async *listVersions(\n    pageNo?: number,\n    perPage?: number,\n  ): AsyncGenerator<DatasetVersion.AsObject[], void, unknown> {\n    const request = new ListDatasetVersionsRequest();\n    request.setUserAppId(this.userAppId);\n    request.setDatasetId(this.info.getId());\n\n    const listDatasetVersions = promisifyGrpcCall(\n      this.STUB.client.listDatasetVersions,\n      this.STUB.client,\n    );\n\n    const listDatasetVersionsGenerator = this.listPagesGenerator(\n      listDatasetVersions,\n      request,\n      pageNo,\n      perPage,\n    );\n\n    for await (const versions of listDatasetVersionsGenerator) {\n      yield versions.toObject().datasetVersionsList;\n    }\n  }\n\n  async uploadFromFolder({\n    folderPath,\n    inputType,\n    labels = false,\n    batchSize = this.batchSize,\n    uploadProgressEmitter,\n  }: {\n    folderPath: string;\n    inputType: \"image\" | \"text\";\n    labels?: boolean;\n    batchSize?: number;\n    uploadProgressEmitter?: InputBulkUpload;\n  }): Promise<void> {\n    if ([\"image\", \"text\"].indexOf(inputType) === -1) {\n      throw new UserError(\"Invalid input type\");\n    }\n    let inputProtos: GrpcInput[] = [];\n    if (inputType === \"image\") {\n      inputProtos = Input.getImageInputsFromFolder({\n        folderPath: folderPath,\n        datasetId: this.info.getId(),\n        labels: labels,\n      });\n    }\n    if (inputType === \"text\") {\n      inputProtos = Input.getTextInputsFromFolder({\n        folderPath: folderPath,\n        datasetId: this.info.getId(),\n        labels: labels,\n      });\n    }\n    await this.input.bulkUpload({\n      inputs: inputProtos,\n      batchSize: batchSize,\n      uploadProgressEmitter,\n    });\n  }\n\n  async uploadFromCSV({\n    csvPath,\n    inputType = \"text\",\n    csvType,\n    labels = true,\n    batchSize = 128,\n    uploadProgressEmitter,\n  }: {\n    csvPath: string;\n    inputType?: \"image\" | \"text\" | \"video\" | \"audio\";\n    csvType: \"raw\" | \"url\" | \"file\";\n    labels?: boolean;\n    batchSize?: number;\n    uploadProgressEmitter?: InputBulkUpload;\n  }): Promise<void> {\n    if (![\"image\", \"text\", \"video\", \"audio\"].includes(inputType)) {\n      throw new UserError(\n        \"Invalid input type, it should be image, text, audio, or video\",\n      );\n    }\n    if (![\"raw\", \"url\", \"file\"].includes(csvType)) {\n      throw new UserError(\n        \"Invalid csv type, it should be raw, url, or file_path\",\n      );\n    }\n    if (!csvPath.endsWith(\".csv\")) {\n      throw new UserError(\"csvPath should be a csv file\");\n    }\n    if (csvType === \"raw\" && inputType !== \"text\") {\n      throw new UserError(\"Only text input type is supported for raw csv type\");\n    }\n    batchSize = Math.min(128, batchSize);\n    const inputProtos = await Input.getInputsFromCsv({\n      csvPath: csvPath,\n      inputType: inputType,\n      csvType: csvType,\n      datasetId: this.info.getId(),\n      labels: labels,\n    });\n    await this.input.bulkUpload({\n      inputs: inputProtos,\n      batchSize: batchSize,\n      uploadProgressEmitter,\n    });\n  }\n}\n","import { v4 as uuidv4 } from \"uuid\";\nimport { App, AuthAppConfig } from \"./app\";\nimport { Workflow } from \"./workflow\";\nimport * as fs from \"fs\";\nimport yaml from \"js-yaml\";\nimport {\n  JavaScriptValue,\n  Struct,\n} from \"google-protobuf/google/protobuf/struct_pb\";\nimport { Model } from \"./model\";\nimport { User } from \"./user\";\nimport { MAX_UPLOAD_BATCH_SIZE } from \"../constants/rag\";\nimport { UserError } from \"../errors\";\nimport { AuthConfig } from \"../utils/types\";\nimport { ClarifaiAppUrl, ClarifaiUrl, ClarifaiUrlHelper } from \"../urls/helper\";\nimport {\n  ModelVersion,\n  OutputInfo,\n} from \"clarifai-nodejs-grpc/proto/clarifai/api/resources_pb\";\nimport { validateWorkflow } from \"../workflows/validate\";\nimport {\n  Message,\n  convertMessagesToStr,\n  formatAssistantMessage,\n  loadDocuments,\n  splitDocument,\n} from \"../rag/utils\";\nimport { Input } from \"./input\";\nimport compact from \"lodash/compact\";\n\nconst DEFAULT_RAG_PROMPT_TEMPLATE =\n  \"Context information is below:\\n{data.hits}\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: {data.text.raw}\\nAnswer: \";\n\ntype UrlAuthConfig = Omit<AuthConfig, \"userId\" | \"appId\"> & {\n  appId?: undefined;\n  userId?: undefined;\n};\n\ntype RAGConfigWithURL = {\n  workflowUrl: ClarifaiUrl;\n  workflow?: undefined;\n  authConfig?: UrlAuthConfig;\n};\n\ntype RAGConfigWithWorkflow = {\n  workflowUrl?: undefined;\n  workflow: Workflow;\n  authConfig?: AuthConfig;\n};\n\ntype RAGConfig = RAGConfigWithURL | RAGConfigWithWorkflow;\n\ntype workflowSchema = ReturnType<typeof validateWorkflow>;\n\nconst authConfigGuard = (\n  authConfig: AuthConfig | UrlAuthConfig | undefined,\n): authConfig is AuthConfig => {\n  if (authConfig?.appId && authConfig?.userId) {\n    return true;\n  }\n  return false;\n};\n\nexport class RAG {\n  private authConfig: AuthConfig;\n\n  public promptWorkflow: Workflow;\n\n  public app: App;\n\n  constructor({ workflowUrl, workflow, authConfig }: RAGConfig) {\n    this.validateInputs(workflowUrl, workflow, authConfig);\n    if (!authConfig || authConfigGuard(authConfig)) {\n      const targetAuthConfig: AuthConfig = authConfig ?? {};\n      this.authConfig = targetAuthConfig;\n      this.promptWorkflow = workflow as Workflow;\n    } else {\n      console.info(\"workflow_url:%s\", workflowUrl);\n      const [userId, appId, , ,] = ClarifaiUrlHelper.splitClarifaiUrl(\n        workflowUrl as ClarifaiUrl,\n      );\n      const w = new Workflow({\n        url: workflowUrl as ClarifaiUrl,\n        authConfig: authConfig,\n      });\n      const targetAuthConfig: AuthConfig = { ...authConfig, appId, userId };\n      this.authConfig = targetAuthConfig;\n      this.promptWorkflow = w;\n    }\n    this.app = new App({ authConfig: this.authConfig });\n  }\n\n  private validateInputs(\n    workflowUrl?: string,\n    workflow?: Workflow,\n    authConfig?: AuthConfig | UrlAuthConfig,\n  ) {\n    if (workflowUrl && workflow) {\n      throw new UserError(\n        \"Only one of workflowUrl or workflow can be specified.\",\n      );\n    }\n    if (!workflowUrl && !workflow) {\n      throw new UserError(\"One of workflowUrl or workflow must be specified.\");\n    }\n    if (workflowUrl && (authConfig?.userId || authConfig?.appId)) {\n      throw new UserError(\n        \"userId and appId should not be specified in authConfig when using workflowUrl.\",\n      );\n    }\n  }\n\n  static async setup({\n    authConfig,\n    appUrl,\n    llmUrl = \"https://clarifai.com/mistralai/completion/models/mistral-7B-Instruct\",\n    baseWorkflow = \"Text\",\n    workflowYamlFilename = \"prompter_wf.yaml\",\n    promptTemplate = DEFAULT_RAG_PROMPT_TEMPLATE,\n    workflowId,\n    minScore = 0.95,\n    maxResults = 5,\n  }: {\n    authConfig?:\n      | (Omit<AuthConfig, \"appId\"> & { appId?: undefined })\n      | AuthAppConfig;\n    appUrl?: ClarifaiAppUrl;\n    llmUrl?: ClarifaiUrl;\n    baseWorkflow?: string;\n    workflowYamlFilename?: string;\n    promptTemplate?: string;\n    workflowId?: string;\n    minScore?: number;\n    maxResults?: number;\n  }): Promise<RAG> {\n    const { userId, appId: appIdFromConfig } = authConfig ?? {};\n\n    // Since user ID & App ID can be generated in different ways, we need to keep track of the generated ones\n    let targetAppId: string = \"\",\n      targetUserId: string = \"\";\n\n    if (userId && appUrl) {\n      throw new UserError(\"Must provide one of userId or appUrl, not both.\");\n    }\n\n    if (appIdFromConfig && appUrl) {\n      throw new UserError(\"Must provide one of appId or appUrl, not both.\");\n    }\n\n    if (!userId && !appUrl) {\n      throw new UserError(\n        \"userId or appUrl must be provided. The userId can be found at https://clarifai.com/settings.\",\n      );\n    }\n\n    const [llmUserId, llmAppId, resourceType, llmId] =\n      ClarifaiUrlHelper.splitClarifaiUrl(llmUrl);\n\n    if (resourceType !== \"models\") {\n      throw new UserError(\"llmUrl must be a model URL.\");\n    }\n\n    const nowTs = Date.now().toString();\n\n    let app: App;\n\n    if (userId && !appUrl) {\n      const generatedAppId = `rag_app_${nowTs}`;\n\n      // User ID is present, construct the authconfig using the generated APP ID\n      const userAuthConfig: AuthConfig = {\n        ...(authConfig as Omit<AuthConfig, \"appId\"> & { appId?: undefined }),\n        appId: generatedAppId,\n      };\n\n      const user = new User(userAuthConfig);\n      await user.createApp({\n        appId: generatedAppId,\n        baseWorkflow: baseWorkflow,\n      });\n      app = new App({\n        authConfig: userAuthConfig,\n      });\n\n      targetAppId = generatedAppId;\n      targetUserId = userId;\n    }\n\n    if (!userId && appUrl) {\n      app = new App({\n        url: appUrl,\n        authConfig: authConfig as AuthAppConfig,\n      });\n      const [userIdFromAppUrl, appIdFromAppUrl] =\n        ClarifaiUrlHelper.splitClarifaiAppUrl(appUrl);\n      targetAppId = appIdFromAppUrl;\n      targetUserId = userIdFromAppUrl;\n    }\n\n    let targetAuthConfig: AuthConfig;\n\n    if (authConfig) {\n      targetAuthConfig = {\n        ...authConfig,\n        appId: targetAppId,\n        userId: targetUserId,\n      };\n    } else {\n      targetAuthConfig = {\n        appId: targetAppId,\n        userId: targetUserId,\n        pat: process.env.CLARIFAI_PAT!,\n      };\n    }\n\n    const params = Struct.fromJavaScript({\n      min_score: minScore,\n      max_results: maxResults,\n      prompt_template: promptTemplate,\n    });\n\n    const outputInfo = new OutputInfo().setParams(params);\n\n    const modelId = workflowId\n      ? `prompter-${workflowId}-${nowTs}`\n      : `rag-prompter-${nowTs}`;\n\n    // @ts-expect-error - app has been assigned but not picked up by typescript\n    const prompterModelObj = await app.createModel({\n      modelId,\n      params: {\n        modelTypeId: \"rag-prompter\",\n      },\n    });\n    const prompterModel = new Model({\n      authConfig: targetAuthConfig,\n      modelId: prompterModelObj.id,\n    });\n    const prompterModelWithVersion = await prompterModel.createVersion(\n      new ModelVersion().setOutputInfo(outputInfo),\n    );\n    if (!prompterModelWithVersion?.id) {\n      throw new Error(\"Prompter model version creation failed.\");\n    }\n\n    workflowId = workflowId ? workflowId : `rag-wf-${nowTs}`;\n    const workflowObject: workflowSchema = {\n      workflow: {\n        id: workflowId,\n        nodes: [\n          {\n            id: \"rag-prompter\",\n            model: {\n              modelId: prompterModelWithVersion.id,\n              modelVersionId: prompterModelWithVersion?.modelVersion?.id,\n            },\n          },\n          {\n            id: \"llm\",\n            model: {\n              modelId: llmId,\n              userId: llmUserId,\n              appId: llmAppId,\n            },\n            nodeInputs: [\n              {\n                nodeId: \"rag-prompter\",\n              },\n            ],\n          },\n        ],\n      },\n    };\n    const workflowYaml = yaml.dump(workflowObject, { noRefs: true });\n    fs.writeFileSync(workflowYamlFilename, workflowYaml);\n    // @ts-expect-error - app has been assigned but not picked up by typescript\n    const wf = await app.createWorkflow({\n      configFilePath: workflowYamlFilename,\n    });\n    const workflow = new Workflow({\n      workflowId: wf.id,\n      authConfig: targetAuthConfig,\n    });\n    return new RAG({ workflow, authConfig: targetAuthConfig });\n  }\n\n  async upload({\n    filePath,\n    folderPath,\n    url,\n    batchSize = 128,\n    chunkSize = 1024,\n    chunkOverlap = 200,\n    datasetId,\n    metadata,\n  }: {\n    filePath?: string;\n    folderPath?: string;\n    url?: string;\n    batchSize?: number;\n    chunkSize?: number;\n    chunkOverlap?: number;\n    datasetId?: string;\n    metadata?: Record<string, JavaScriptValue>;\n  }): Promise<void> {\n    if (batchSize > MAX_UPLOAD_BATCH_SIZE) {\n      throw new UserError(\n        `batch_size cannot be greater than ${MAX_UPLOAD_BATCH_SIZE}`,\n      );\n    }\n\n    if (\n      (filePath && (folderPath || url)) ||\n      (folderPath && (filePath || url)) ||\n      (url && (filePath || folderPath))\n    ) {\n      throw new UserError(\n        \"Only one of file_path, folder_path, or url can be specified.\",\n      );\n    }\n\n    const documents = await loadDocuments({\n      filePath,\n      folderPath,\n      url,\n    });\n\n    const textChunks: string[] = [];\n    const metadataList: Array<Record<string, JavaScriptValue>> = [];\n    let docI = 0;\n\n    for (const doc of documents) {\n      const curTextChunks = compact(\n        splitDocument({\n          text: doc.text,\n          chunkSize,\n          chunkOverlap,\n        }),\n      );\n      textChunks.push(...curTextChunks);\n      metadataList.push(...Array(curTextChunks.length).fill(doc.metadata));\n      if (textChunks.length > batchSize) {\n        for (let idx = 0; idx < textChunks.length; idx += batchSize) {\n          if (idx + batchSize > textChunks.length) {\n            continue;\n          }\n          const batchTexts = textChunks.slice(idx, idx + batchSize);\n          const batchIds = Array(batchSize)\n            .fill(null)\n            .map(() => uuidv4());\n          const batchMetadatas = metadataList.slice(idx, idx + batchSize);\n          const metaList = batchMetadatas.map((meta) => {\n            const metaStruct = {\n              ...(meta ? meta : {}),\n              ...(metadata && typeof metadata === \"object\" ? metadata : {}),\n              docChunkNo: docI,\n            };\n            docI += 1;\n            return metaStruct;\n          });\n          const inputBatch = batchTexts.map((text: string, i: number) => {\n            return Input.getTextInput({\n              inputId: batchIds[i],\n              rawText: text,\n              datasetId: datasetId,\n              metadata: metaList[i],\n            });\n          });\n          await new Input({ authConfig: this.authConfig }).uploadInputs({\n            inputs: inputBatch,\n          });\n          textChunks.splice(idx, batchSize);\n          metadataList.splice(idx, batchSize);\n        }\n      }\n    }\n\n    if (textChunks.length > 0) {\n      const batchSize = textChunks.length;\n      const batchIds = Array(batchSize)\n        .fill(null)\n        .map(() => uuidv4());\n      const batchMetadatas = metadataList.slice(0, batchSize);\n      const metaList = batchMetadatas.map((meta) => {\n        const metaStruct = {\n          ...meta,\n          ...(metadata && typeof metadata === \"object\" ? metadata : {}),\n          docChunkNo: docI,\n        };\n        docI += 1;\n        return metaStruct;\n      });\n      const inputBatch = textChunks.map((text: string, i: number) => {\n        return Input.getTextInput({\n          inputId: batchIds[i],\n          rawText: text,\n          datasetId: datasetId,\n          metadata: metaList[i],\n        });\n      });\n      await new Input({ authConfig: this.authConfig }).uploadInputs({\n        inputs: inputBatch,\n      });\n      textChunks.splice(0, batchSize);\n      metadataList.splice(0, batchSize);\n    }\n  }\n\n  async chat({\n    messages,\n    clientManageState = true, // TODO: change to false once Server Side state management is implemented\n  }: {\n    messages: Message[];\n    clientManageState?: boolean;\n  }): Promise<Message[]> {\n    if (!clientManageState) {\n      throw new Error(\n        \"Server side state management is not supported yet - work in progress\",\n      );\n    }\n\n    const singlePrompt = convertMessagesToStr(messages);\n    const inputProto = Input.getTextInput({\n      inputId: uuidv4(),\n      rawText: singlePrompt,\n    });\n    const response = await this.promptWorkflow.predict({\n      inputs: [inputProto],\n    });\n    const outputsList = response.resultsList?.[0]?.outputsList;\n    const output = outputsList[outputsList.length - 1];\n    messages.push(formatAssistantMessage(output?.data?.text?.raw ?? \"\"));\n    return messages;\n  }\n}\n","export const MAX_UPLOAD_BATCH_SIZE = 128;\n","import {\n  SimpleDirectoryReader,\n  DocxReader,\n  PDFReader,\n  TextFileReader,\n  SentenceSplitter,\n} from \"llamaindex\";\nimport axios from \"axios\";\nimport tmp from \"tmp\";\nimport * as fs from \"fs\";\n\nexport interface Message {\n  role: string;\n  content: string;\n}\n\n// Custom type for the function response\ntype DownloadResponse = {\n  filePath: string;\n  mimeType?: string;\n};\n\n// Function to download a file and store it in a temporary file, and return MIME type\nasync function downloadFileToTemp(url: string): Promise<DownloadResponse> {\n  try {\n    // Create a temporary file\n    const tempFile = tmp.fileSync({ postfix: \".tmp\" });\n    console.log(`Temporary file created at: ${tempFile.name}`);\n\n    // Fetch the file using axios\n    const response = await axios({\n      method: \"get\",\n      url: url,\n      responseType: \"stream\",\n    });\n\n    const mimeType = response?.headers?.[\"Content-Type\"]\n      ?.toString()\n      ?.toLowerCase();\n\n    // Stream the file content to the temporary file\n    response.data.pipe(fs.createWriteStream(tempFile.name));\n\n    return new Promise((resolve, reject) => {\n      response.data.on(\"end\", () => {\n        resolve({ filePath: tempFile.name, mimeType });\n      });\n\n      response.data.on(\"error\", (err: Error) => {\n        // Clean up the temporary file in case of an error\n        tempFile.removeCallback();\n        reject(err);\n      });\n    });\n  } catch (error) {\n    throw new Error(`Failed to download the file: ${error}`);\n  }\n}\n\nexport function convertMessagesToStr(messages: Message[]): string {\n  let finalStr = \"\";\n  for (const msg of messages) {\n    if (\"role\" in msg && \"content\" in msg) {\n      const role = msg.role || \"\";\n      const content = msg.content || \"\";\n      finalStr += `\\n\\n${role}: ${content}`;\n    }\n  }\n  return finalStr;\n}\n\nexport function formatAssistantMessage(rawText: string): Message {\n  return { role: \"assistant\", content: rawText };\n}\n\nexport async function loadDocuments({\n  filePath,\n  folderPath,\n  url,\n}: {\n  filePath?: string;\n  folderPath?: string;\n  url?: string;\n}) {\n  if (!filePath && !folderPath && !url) {\n    throw new Error(\"No input source provided.\");\n  }\n\n  // Load document from file\n  if (filePath) {\n    const fileExtension = filePath.slice(filePath.lastIndexOf(\".\"));\n    switch (fileExtension) {\n      case \".pdf\":\n        return await new PDFReader().loadData(filePath);\n      case \".docx\":\n        return await new DocxReader().loadData(filePath);\n      case \".txt\":\n        return await new TextFileReader().loadData(filePath);\n      default:\n        throw new Error(\n          \"Unsupported file type. Only .pdf, .docx, and .txt files are supported.\",\n        );\n    }\n  }\n\n  // Load all documents from a folder\n  if (folderPath) {\n    const reader = new SimpleDirectoryReader();\n    return await reader.loadData({\n      directoryPath: folderPath,\n      fileExtToReader: {\n        pdf: new PDFReader(),\n        docx: new DocxReader(),\n        txt: new TextFileReader(),\n      },\n    });\n  }\n\n  // Load document from a URL\n  if (url) {\n    const downloadResponse = await downloadFileToTemp(url);\n    let { mimeType: contentType } = downloadResponse;\n    const { filePath } = downloadResponse;\n\n    if (!contentType) {\n      contentType = url.split(\".\").pop()?.toLowerCase() ?? \"\";\n    }\n\n    if (contentType === \"txt\" || /text\\/plain/.test(contentType)) {\n      return await new TextFileReader().loadData(filePath);\n    } else if (\n      contentType === \"docx\" ||\n      /application\\/vnd\\.openxmlformats-officedocument\\.wordprocessingml\\.document/.test(\n        contentType,\n      )\n    ) {\n      return await new DocxReader().loadData(filePath);\n    } else if (contentType === \"pdf\" || /application\\/pdf/.test(contentType)) {\n      return await new PDFReader().loadData(filePath);\n    }\n  }\n\n  throw new Error(\"No documents loaded.\");\n}\n\nexport function splitDocument({\n  text,\n  chunkSize,\n  chunkOverlap,\n  options = {},\n}: {\n  text: string;\n  chunkSize: number;\n  chunkOverlap: number;\n  options?: Omit<\n    NonNullable<ConstructorParameters<typeof SentenceSplitter>[0]>,\n    \"chunkSize\" | \"chunkOverlap\"\n  >;\n}): string[] {\n  const textParser = new SentenceSplitter({\n    ...options,\n    chunkSize,\n    chunkOverlap,\n  });\n  const textChunks = textParser.splitText(text);\n  return textChunks;\n}\n"],"names":[],"version":3,"file":"main.js.map"}