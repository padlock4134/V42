"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    callTool: function() {
        return callTool;
    },
    consumeAsyncIterable: function() {
        return consumeAsyncIterable;
    },
    createReadableStream: function() {
        return createReadableStream;
    }
});
const _CallbackManager = require("../internal/settings/CallbackManager.js");
const _utils = require("../internal/utils.js");
async function callTool(tool, toolCall) {
    if (!tool) {
        const output = `Tool ${toolCall.name} does not exist.`;
        return {
            tool,
            input: toolCall.input,
            output,
            isError: true
        };
    }
    const call = tool.call;
    let output;
    if (!call) {
        output = `Tool ${tool.metadata.name} (remote:${toolCall.name}) does not have a implementation.`;
        return {
            tool,
            input: toolCall.input,
            output,
            isError: true
        };
    }
    try {
        let input = toolCall.input;
        if (typeof input === "string") {
            input = JSON.parse(input);
        }
        (0, _CallbackManager.getCallbackManager)().dispatchEvent("llm-tool-call", {
            payload: {
                toolCall: {
                    ...toolCall
                }
            }
        });
        output = await call.call(tool, input);
        const toolOutput = {
            tool,
            input: toolCall.input,
            output,
            isError: false
        };
        (0, _CallbackManager.getCallbackManager)().dispatchEvent("llm-tool-result", {
            payload: {
                toolCall: {
                    ...toolCall
                },
                toolResult: {
                    ...toolOutput
                }
            }
        });
        return toolOutput;
    } catch (e) {
        output = (0, _utils.prettifyError)(e);
    }
    return {
        tool,
        input: toolCall.input,
        output,
        isError: true
    };
}
async function consumeAsyncIterable(input) {
    if ((0, _utils.isAsyncIterable)(input)) {
        const result = {
            content: "",
            // only assistant will give streaming response
            role: "assistant",
            options: {}
        };
        for await (const chunk of input){
            result.content += chunk.delta;
            if (chunk.options) {
                result.options = {
                    ...result.options,
                    ...chunk.options
                };
            }
        }
        return result;
    } else {
        return input;
    }
}
function createReadableStream(asyncIterable) {
    return new ReadableStream({
        async start (controller) {
            for await (const chunk of asyncIterable){
                controller.enqueue(chunk);
            }
            controller.close();
        }
    });
}
