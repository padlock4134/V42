"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Settings: function() {
        return Settings;
    },
    embedModelFromSettingsOrContext: function() {
        return embedModelFromSettingsOrContext;
    },
    llmFromSettingsOrContext: function() {
        return llmFromSettingsOrContext;
    },
    nodeParserFromSettingsOrContext: function() {
        return nodeParserFromSettingsOrContext;
    },
    promptHelperFromSettingsOrContext: function() {
        return promptHelperFromSettingsOrContext;
    }
});
const _OpenAIEmbedding = require("./embeddings/OpenAIEmbedding.js");
const _openai = require("./llm/openai.js");
const _PromptHelper = require("./PromptHelper.js");
const _SimpleNodeParser = require("./nodeParsers/SimpleNodeParser.js");
const _env = require("@llamaindex/env");
const _CallbackManager = require("./internal/settings/CallbackManager.js");
/**
 * @internal
 */ class GlobalSettings {
    #prompt = {};
    #llm = null;
    #promptHelper = null;
    #embedModel = null;
    #nodeParser = null;
    #chunkSize;
    #chunkOverlap;
    #llmAsyncLocalStorage = new _env.AsyncLocalStorage();
    #promptHelperAsyncLocalStorage = new _env.AsyncLocalStorage();
    #embedModelAsyncLocalStorage = new _env.AsyncLocalStorage();
    #nodeParserAsyncLocalStorage = new _env.AsyncLocalStorage();
    #chunkSizeAsyncLocalStorage = new _env.AsyncLocalStorage();
    #chunkOverlapAsyncLocalStorage = new _env.AsyncLocalStorage();
    #promptAsyncLocalStorage = new _env.AsyncLocalStorage();
    get debug() {
        const debug = (0, _env.getEnv)("DEBUG");
        return (0, _env.getEnv)("NODE_ENV") === "development" && Boolean(debug) && debug?.includes("llamaindex");
    }
    get llm() {
        if (this.#llm === null) {
            this.#llm = new _openai.OpenAI();
        }
        return this.#llmAsyncLocalStorage.getStore() ?? this.#llm;
    }
    set llm(llm) {
        this.#llm = llm;
    }
    withLLM(llm, fn) {
        return this.#llmAsyncLocalStorage.run(llm, fn);
    }
    get promptHelper() {
        if (this.#promptHelper === null) {
            this.#promptHelper = new _PromptHelper.PromptHelper();
        }
        return this.#promptHelperAsyncLocalStorage.getStore() ?? this.#promptHelper;
    }
    set promptHelper(promptHelper) {
        this.#promptHelper = promptHelper;
    }
    withPromptHelper(promptHelper, fn) {
        return this.#promptHelperAsyncLocalStorage.run(promptHelper, fn);
    }
    get embedModel() {
        if (this.#embedModel === null) {
            this.#embedModel = new _OpenAIEmbedding.OpenAIEmbedding();
        }
        return this.#embedModelAsyncLocalStorage.getStore() ?? this.#embedModel;
    }
    set embedModel(embedModel) {
        this.#embedModel = embedModel;
    }
    withEmbedModel(embedModel, fn) {
        return this.#embedModelAsyncLocalStorage.run(embedModel, fn);
    }
    get nodeParser() {
        if (this.#nodeParser === null) {
            this.#nodeParser = new _SimpleNodeParser.SimpleNodeParser({
                chunkSize: this.#chunkSize,
                chunkOverlap: this.#chunkOverlap
            });
        }
        return this.#nodeParserAsyncLocalStorage.getStore() ?? this.#nodeParser;
    }
    set nodeParser(nodeParser) {
        this.#nodeParser = nodeParser;
    }
    withNodeParser(nodeParser, fn) {
        return this.#nodeParserAsyncLocalStorage.run(nodeParser, fn);
    }
    get callbackManager() {
        return (0, _CallbackManager.getCallbackManager)();
    }
    set callbackManager(callbackManager) {
        (0, _CallbackManager.setCallbackManager)(callbackManager);
    }
    withCallbackManager(callbackManager, fn) {
        return (0, _CallbackManager.withCallbackManager)(callbackManager, fn);
    }
    set chunkSize(chunkSize) {
        this.#chunkSize = chunkSize;
    }
    get chunkSize() {
        return this.#chunkSizeAsyncLocalStorage.getStore() ?? this.#chunkSize;
    }
    withChunkSize(chunkSize, fn) {
        return this.#chunkSizeAsyncLocalStorage.run(chunkSize, fn);
    }
    get chunkOverlap() {
        return this.#chunkOverlapAsyncLocalStorage.getStore() ?? this.#chunkOverlap;
    }
    set chunkOverlap(chunkOverlap) {
        this.#chunkOverlap = chunkOverlap;
    }
    withChunkOverlap(chunkOverlap, fn) {
        return this.#chunkOverlapAsyncLocalStorage.run(chunkOverlap, fn);
    }
    get prompt() {
        return this.#promptAsyncLocalStorage.getStore() ?? this.#prompt;
    }
    set prompt(prompt) {
        this.#prompt = prompt;
    }
    withPrompt(prompt, fn) {
        return this.#promptAsyncLocalStorage.run(prompt, fn);
    }
}
const llmFromSettingsOrContext = (serviceContext)=>{
    if (serviceContext?.llm) {
        return serviceContext.llm;
    }
    return Settings.llm;
};
const nodeParserFromSettingsOrContext = (serviceContext)=>{
    if (serviceContext?.nodeParser) {
        return serviceContext.nodeParser;
    }
    return Settings.nodeParser;
};
const embedModelFromSettingsOrContext = (serviceContext)=>{
    if (serviceContext?.embedModel) {
        return serviceContext.embedModel;
    }
    return Settings.embedModel;
};
const promptHelperFromSettingsOrContext = (serviceContext)=>{
    if (serviceContext?.promptHelper) {
        return serviceContext.promptHelper;
    }
    return Settings.promptHelper;
};
const Settings = new GlobalSettings();
