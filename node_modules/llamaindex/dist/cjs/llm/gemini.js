"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GEMINI_MODEL: function() {
        return GEMINI_MODEL;
    },
    GEMINI_MODEL_INFO_MAP: function() {
        return GEMINI_MODEL_INFO_MAP;
    },
    Gemini: function() {
        return Gemini;
    },
    GeminiSession: function() {
        return GeminiSession;
    },
    GeminiSessionStore: function() {
        return GeminiSessionStore;
    }
});
const _generativeai = require("@google/generative-ai");
const _env = require("@llamaindex/env");
const _base = require("./base.js");
const _utils = require("./utils.js");
function applyDecs2203RFactory() {
    function createAddInitializerMethod(initializers, decoratorFinishedRef) {
        return function addInitializer(initializer) {
            assertNotFinished(decoratorFinishedRef, "addInitializer");
            assertCallable(initializer, "An initializer");
            initializers.push(initializer);
        };
    }
    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {
        var kindStr;
        switch(kind){
            case 1:
                kindStr = "accessor";
                break;
            case 2:
                kindStr = "method";
                break;
            case 3:
                kindStr = "getter";
                break;
            case 4:
                kindStr = "setter";
                break;
            default:
                kindStr = "field";
        }
        var ctx = {
            kind: kindStr,
            name: isPrivate ? "#" + name : name,
            static: isStatic,
            private: isPrivate,
            metadata: metadata
        };
        var decoratorFinishedRef = {
            v: false
        };
        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);
        var get, set;
        if (kind === 0) {
            if (isPrivate) {
                get = desc.get;
                set = desc.set;
            } else {
                get = function() {
                    return this[name];
                };
                set = function(v) {
                    this[name] = v;
                };
            }
        } else if (kind === 2) {
            get = function() {
                return desc.value;
            };
        } else {
            if (kind === 1 || kind === 3) {
                get = function() {
                    return desc.get.call(this);
                };
            }
            if (kind === 1 || kind === 4) {
                set = function(v) {
                    desc.set.call(this, v);
                };
            }
        }
        ctx.access = get && set ? {
            get: get,
            set: set
        } : get ? {
            get: get
        } : {
            set: set
        };
        try {
            return dec(value, ctx);
        } finally{
            decoratorFinishedRef.v = true;
        }
    }
    function assertNotFinished(decoratorFinishedRef, fnName) {
        if (decoratorFinishedRef.v) {
            throw new Error("attempted to call " + fnName + " after decoration was finished");
        }
    }
    function assertCallable(fn, hint) {
        if (typeof fn !== "function") {
            throw new TypeError(hint + " must be a function");
        }
    }
    function assertValidReturnValue(kind, value) {
        var type = typeof value;
        if (kind === 1) {
            if (type !== "object" || value === null) {
                throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");
            }
            if (value.get !== undefined) {
                assertCallable(value.get, "accessor.get");
            }
            if (value.set !== undefined) {
                assertCallable(value.set, "accessor.set");
            }
            if (value.init !== undefined) {
                assertCallable(value.init, "accessor.init");
            }
        } else if (type !== "function") {
            var hint;
            if (kind === 0) {
                hint = "field";
            } else if (kind === 10) {
                hint = "class";
            } else {
                hint = "method";
            }
            throw new TypeError(hint + " decorators must return a function or void 0");
        }
    }
    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {
        var decs = decInfo[0];
        var desc, init, value;
        if (isPrivate) {
            if (kind === 0 || kind === 1) {
                desc = {
                    get: decInfo[3],
                    set: decInfo[4]
                };
            } else if (kind === 3) {
                desc = {
                    get: decInfo[3]
                };
            } else if (kind === 4) {
                desc = {
                    set: decInfo[3]
                };
            } else {
                desc = {
                    value: decInfo[3]
                };
            }
        } else if (kind !== 0) {
            desc = Object.getOwnPropertyDescriptor(base, name);
        }
        if (kind === 1) {
            value = {
                get: desc.get,
                set: desc.set
            };
        } else if (kind === 2) {
            value = desc.value;
        } else if (kind === 3) {
            value = desc.get;
        } else if (kind === 4) {
            value = desc.set;
        }
        var newValue, get, set;
        if (typeof decs === "function") {
            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);
            if (newValue !== void 0) {
                assertValidReturnValue(kind, newValue);
                if (kind === 0) {
                    init = newValue;
                } else if (kind === 1) {
                    init = newValue.init;
                    get = newValue.get || value.get;
                    set = newValue.set || value.set;
                    value = {
                        get: get,
                        set: set
                    };
                } else {
                    value = newValue;
                }
            }
        } else {
            for(var i = decs.length - 1; i >= 0; i--){
                var dec = decs[i];
                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);
                if (newValue !== void 0) {
                    assertValidReturnValue(kind, newValue);
                    var newInit;
                    if (kind === 0) {
                        newInit = newValue;
                    } else if (kind === 1) {
                        newInit = newValue.init;
                        get = newValue.get || value.get;
                        set = newValue.set || value.set;
                        value = {
                            get: get,
                            set: set
                        };
                    } else {
                        value = newValue;
                    }
                    if (newInit !== void 0) {
                        if (init === void 0) {
                            init = newInit;
                        } else if (typeof init === "function") {
                            init = [
                                init,
                                newInit
                            ];
                        } else {
                            init.push(newInit);
                        }
                    }
                }
            }
        }
        if (kind === 0 || kind === 1) {
            if (init === void 0) {
                init = function(instance, init) {
                    return init;
                };
            } else if (typeof init !== "function") {
                var ownInitializers = init;
                init = function(instance, init) {
                    var value = init;
                    for(var i = 0; i < ownInitializers.length; i++){
                        value = ownInitializers[i].call(instance, value);
                    }
                    return value;
                };
            } else {
                var originalInitializer = init;
                init = function(instance, init) {
                    return originalInitializer.call(instance, init);
                };
            }
            ret.push(init);
        }
        if (kind !== 0) {
            if (kind === 1) {
                desc.get = value.get;
                desc.set = value.set;
            } else if (kind === 2) {
                desc.value = value;
            } else if (kind === 3) {
                desc.get = value;
            } else if (kind === 4) {
                desc.set = value;
            }
            if (isPrivate) {
                if (kind === 1) {
                    ret.push(function(instance, args) {
                        return value.get.call(instance, args);
                    });
                    ret.push(function(instance, args) {
                        return value.set.call(instance, args);
                    });
                } else if (kind === 2) {
                    ret.push(value);
                } else {
                    ret.push(function(instance, args) {
                        return value.call(instance, args);
                    });
                }
            } else {
                Object.defineProperty(base, name, desc);
            }
        }
    }
    function applyMemberDecs(Class, decInfos, metadata) {
        var ret = [];
        var protoInitializers;
        var staticInitializers;
        var existingProtoNonFields = new Map();
        var existingStaticNonFields = new Map();
        for(var i = 0; i < decInfos.length; i++){
            var decInfo = decInfos[i];
            if (!Array.isArray(decInfo)) continue;
            var kind = decInfo[1];
            var name = decInfo[2];
            var isPrivate = decInfo.length > 3;
            var isStatic = kind >= 5;
            var base;
            var initializers;
            if (isStatic) {
                base = Class;
                kind = kind - 5;
                staticInitializers = staticInitializers || [];
                initializers = staticInitializers;
            } else {
                base = Class.prototype;
                protoInitializers = protoInitializers || [];
                initializers = protoInitializers;
            }
            if (kind !== 0 && !isPrivate) {
                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;
                var existingKind = existingNonFields.get(name) || 0;
                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {
                    throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: " + name);
                } else if (!existingKind && kind > 2) {
                    existingNonFields.set(name, kind);
                } else {
                    existingNonFields.set(name, true);
                }
            }
            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);
        }
        pushInitializers(ret, protoInitializers);
        pushInitializers(ret, staticInitializers);
        return ret;
    }
    function pushInitializers(ret, initializers) {
        if (initializers) {
            ret.push(function(instance) {
                for(var i = 0; i < initializers.length; i++){
                    initializers[i].call(instance);
                }
                return instance;
            });
        }
    }
    function applyClassDecs(targetClass, classDecs, metadata) {
        if (classDecs.length > 0) {
            var initializers = [];
            var newClass = targetClass;
            var name = targetClass.name;
            for(var i = classDecs.length - 1; i >= 0; i--){
                var decoratorFinishedRef = {
                    v: false
                };
                try {
                    var nextNewClass = classDecs[i](newClass, {
                        kind: "class",
                        name: name,
                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),
                        metadata
                    });
                } finally{
                    decoratorFinishedRef.v = true;
                }
                if (nextNewClass !== undefined) {
                    assertValidReturnValue(10, nextNewClass);
                    newClass = nextNewClass;
                }
            }
            return [
                defineMetadata(newClass, metadata),
                function() {
                    for(var i = 0; i < initializers.length; i++){
                        initializers[i].call(newClass);
                    }
                }
            ];
        }
    }
    function defineMetadata(Class, metadata) {
        return Object.defineProperty(Class, Symbol.metadata || Symbol.for("Symbol.metadata"), {
            configurable: true,
            enumerable: true,
            value: metadata
        });
    }
    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {
        if (parentClass !== void 0) {
            var parentMetadata = parentClass[Symbol.metadata || Symbol.for("Symbol.metadata")];
        }
        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);
        var e = applyMemberDecs(targetClass, memberDecs, metadata);
        if (!classDecs.length) defineMetadata(targetClass, metadata);
        return {
            e: e,
            get c () {
                return applyClassDecs(targetClass, classDecs, metadata);
            }
        };
    };
}
function _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {
    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);
}
var _initProto;
var GEMINI_MODEL;
(function(GEMINI_MODEL) {
    GEMINI_MODEL["GEMINI_PRO"] = "gemini-pro";
    GEMINI_MODEL["GEMINI_PRO_VISION"] = "gemini-pro-vision";
    GEMINI_MODEL["EMBEDDING_001"] = "embedding-001";
    GEMINI_MODEL["AQA"] = "aqa";
    GEMINI_MODEL["GEMINI_PRO_LATEST"] = "gemini-1.5-pro-latest";
})(GEMINI_MODEL || (GEMINI_MODEL = {}));
const GEMINI_MODEL_INFO_MAP = {
    ["gemini-pro"]: {
        contextWindow: 30720
    },
    ["gemini-pro-vision"]: {
        contextWindow: 12288
    },
    ["embedding-001"]: {
        contextWindow: 2048
    },
    ["aqa"]: {
        contextWindow: 7168
    },
    ["gemini-1.5-pro-latest"]: {
        contextWindow: 10 ** 6
    }
};
const SUPPORT_TOOL_CALL_MODELS = [
    "gemini-pro",
    "gemini-pro-vision",
    "embedding-001",
    "aqa"
];
const DEFAULT_GEMINI_PARAMS = {
    model: "gemini-pro",
    temperature: 0.1,
    topP: 1,
    maxTokens: undefined
};
class GeminiSession {
    gemini;
    constructor(options){
        if (!options.apiKey) {
            options.apiKey = (0, _env.getEnv)("GOOGLE_API_KEY");
        }
        if (!options.apiKey) {
            throw new Error("Set Google API Key in GOOGLE_API_KEY env variable");
        }
        this.gemini = new _generativeai.GoogleGenerativeAI(options.apiKey);
    }
}
class GeminiSessionStore {
    static sessions = [];
    static sessionMatched(o1, o2) {
        return o1.apiKey === o2.apiKey;
    }
    static get(options = {}) {
        let session = this.sessions.find((session)=>this.sessionMatched(session.options, options))?.session;
        if (!session) {
            session = new GeminiSession(options);
            this.sessions.push({
                session,
                options
            });
        }
        return session;
    }
}
/**
 * Helper class providing utility functions for Gemini
 */ class GeminiHelper {
    // Gemini only has user and model roles. Put the rest in user role.
    static ROLES_TO_GEMINI = {
        user: "user",
        system: "user",
        assistant: "user",
        memory: "user"
    };
    static ROLES_FROM_GEMINI = {
        user: "user",
        model: "assistant"
    };
    static mergeNeighboringSameRoleMessages(messages) {
        // Gemini does not support multiple messages of the same role in a row, so we merge them
        const mergedMessages = [];
        let i = 0;
        while(i < messages.length){
            const currentMessage = messages[i];
            // Initialize merged content with current message content
            const mergedContent = [
                currentMessage.content
            ];
            // Check if the next message exists and has the same role
            while(i + 1 < messages.length && this.ROLES_TO_GEMINI[messages[i + 1].role] === this.ROLES_TO_GEMINI[currentMessage.role]){
                i++;
                const nextMessage = messages[i];
                mergedContent.push(nextMessage.content);
            }
            // Create a new ChatMessage object with merged content
            const mergedMessage = {
                role: currentMessage.role,
                content: mergedContent.join("\n")
            };
            mergedMessages.push(mergedMessage);
            i++;
        }
        return mergedMessages;
    }
    static messageContentToGeminiParts(content) {
        if (typeof content === "string") {
            return [
                {
                    text: content
                }
            ];
        }
        const parts = [];
        const imageContents = content.filter((i)=>i.type === "image_url");
        parts.push(...imageContents.map((i)=>({
                fileData: {
                    mimeType: i.type,
                    fileUri: i.image_url.url
                }
            })));
        const textContents = content.filter((i)=>i.type === "text");
        parts.push(...textContents.map((t)=>({
                text: t.text
            })));
        return parts;
    }
    static chatMessageToGemini(message) {
        return {
            role: this.ROLES_TO_GEMINI[message.role],
            parts: this.messageContentToGeminiParts(message.content)
        };
    }
}
class Gemini extends _base.ToolCallLLM {
    static{
        ({ e: [_initProto] } = _apply_decs_2203_r(this, [
            [
                _utils.wrapLLMEvent,
                2,
                "chat"
            ]
        ], []));
    }
    model;
    temperature;
    topP;
    maxTokens;
    session;
    constructor(init){
        super();
        _initProto(this);
        this.model = init?.model ?? "gemini-pro";
        this.temperature = init?.temperature ?? 0.1;
        this.topP = init?.topP ?? 1;
        this.maxTokens = init?.maxTokens ?? undefined;
        this.session = init?.session ?? GeminiSessionStore.get();
    }
    get supportToolCall() {
        return SUPPORT_TOOL_CALL_MODELS.includes(this.model);
    }
    get metadata() {
        return {
            model: this.model,
            temperature: this.temperature,
            topP: this.topP,
            maxTokens: this.maxTokens,
            contextWindow: GEMINI_MODEL_INFO_MAP[this.model].contextWindow,
            tokenizer: undefined
        };
    }
    prepareChat(params) {
        const { messages } = params;
        const mergedMessages = GeminiHelper.mergeNeighboringSameRoleMessages(messages);
        const history = mergedMessages.slice(0, -1);
        const nextMessage = mergedMessages[mergedMessages.length - 1];
        const messageContent = GeminiHelper.chatMessageToGemini(nextMessage).parts;
        const client = this.session.gemini.getGenerativeModel(this.metadata);
        const chat = client.startChat({
            history: history.map(GeminiHelper.chatMessageToGemini)
        });
        return {
            chat,
            messageContent
        };
    }
    async nonStreamChat(params) {
        const { chat, messageContent } = this.prepareChat(params);
        const result = await chat.sendMessage(messageContent);
        const { response } = result;
        const topCandidate = response.candidates[0];
        return {
            raw: response,
            message: {
                content: response.text(),
                role: GeminiHelper.ROLES_FROM_GEMINI[topCandidate.content.role]
            }
        };
    }
    async *streamChat(params) {
        const { chat, messageContent } = this.prepareChat(params);
        const result = await chat.sendMessageStream(messageContent);
        return (0, _utils.streamConverter)(result.stream, (response)=>{
            return {
                text: response.text(),
                raw: response
            };
        });
    }
    async chat(params) {
        if (params.stream) return this.streamChat(params);
        return this.nonStreamChat(params);
    }
    async complete(params) {
        const { prompt, stream } = params;
        const client = this.session.gemini.getGenerativeModel(this.metadata);
        if (stream) {
            const result = await client.generateContentStream(GeminiHelper.messageContentToGeminiParts(prompt));
            return (0, _utils.streamConverter)(result.stream, (response)=>{
                return {
                    text: response.text(),
                    raw: response
                };
            });
        }
        const result = await client.generateContent(GeminiHelper.messageContentToGeminiParts(prompt));
        return {
            text: result.response.text(),
            raw: result.response
        };
    }
}
