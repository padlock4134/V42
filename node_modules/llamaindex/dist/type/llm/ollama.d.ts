import { type CreateRequest, type Options, type ProgressResponse, type ShowRequest } from "ollama/browser";
import { BaseEmbedding } from "../embeddings/types.js";
import type { ChatResponse, ChatResponseChunk, CompletionResponse, LLM, LLMChatParamsNonStreaming, LLMChatParamsStreaming, LLMCompletionParamsNonStreaming, LLMCompletionParamsStreaming, LLMMetadata } from "./types.js";
export type OllamaParams = {
    model: string;
    options?: Partial<Options>;
};
/**
 * This class both implements the LLM and Embedding interfaces.
 */
export declare class Ollama extends BaseEmbedding implements LLM {
    readonly hasStreaming = true;
    model: string;
    options: Partial<Omit<Options, "num_ctx" | "top_p" | "temperature">> & Pick<Options, "num_ctx" | "top_p" | "temperature">;
    constructor(params: OllamaParams);
    get metadata(): LLMMetadata;
    chat(params: LLMChatParamsStreaming): Promise<AsyncIterable<ChatResponseChunk>>;
    chat(params: LLMChatParamsNonStreaming): Promise<ChatResponse>;
    complete(params: LLMCompletionParamsStreaming): Promise<AsyncIterable<CompletionResponse>>;
    complete(params: LLMCompletionParamsNonStreaming): Promise<CompletionResponse>;
    private getEmbedding;
    getTextEmbedding(text: string): Promise<number[]>;
    getQueryEmbedding(query: string): Promise<number[]>;
    static list(): Promise<import("ollama/browser").ModelResponse[]>;
    static detail(modelName: string, options?: Omit<ShowRequest, "model">): Promise<import("ollama/browser").ShowResponse>;
    static create(modelName: string, options?: Omit<CreateRequest, "model"> & {
        stream: false;
    }): Promise<ProgressResponse>;
    static create(modelName: string, options: Omit<CreateRequest, "model"> & {
        stream: true;
    }): Promise<AsyncGenerator<ProgressResponse>>;
    static delete(modelName: string): Promise<import("ollama/browser").StatusResponse>;
    static copy(source: string, destination: string): Promise<import("ollama/browser").StatusResponse>;
    static pull(modelName: string, options?: Omit<CreateRequest, "model"> & {
        stream: false;
    }): Promise<ProgressResponse>;
    static pull(modelName: string, options: Omit<CreateRequest, "model"> & {
        stream: true;
    }): Promise<AsyncGenerator<ProgressResponse>>;
    static push(modelName: string, options?: Omit<CreateRequest, "model"> & {
        stream: false;
    }): Promise<ProgressResponse>;
    static push(modelName: string, options: Omit<CreateRequest, "model"> & {
        stream: true;
    }): Promise<AsyncGenerator<ProgressResponse>>;
}
